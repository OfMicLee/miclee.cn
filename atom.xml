<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[MicLee's Bolg]]></title>
  <subtitle><![CDATA[技术创造价值，分享带来快乐]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://miclee.cn/"/>
  <updated>2017-04-20T08:20:47.000Z</updated>
  <id>http://miclee.cn/</id>
  
  <author>
    <name><![CDATA[MicLee]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Python下划线使用]]></title>
    <link href="http://miclee.cn/2017/04/20/Python%E4%B8%8B%E5%88%92%E7%BA%BF%E4%BD%BF%E7%94%A8/"/>
    <id>http://miclee.cn/2017/04/20/Python下划线使用/</id>
    <published>2017-04-20T05:43:52.000Z</published>
    <updated>2017-04-20T08:20:47.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 在 python 中，下划线命名规则往往令初学者相当疑惑：单下划线、双下划线、双下划线还分前后...那它们的作用与使用场景到底有何区别呢？ </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="单下划线（-）"><a href="#单下划线（-）" class="headerlink" title="单下划线（_）"></a>单下划线（_）</h2><p>通常情况下，会在以下3种场景中使用：</p>
<ol>
<li><p>在解释器中：在这种情况下，‘_‘代表交互式解释器会话中上一条执行的语句的结果。这种用法首先被标准CPython解释器采用，然后其他类型的解释器也先后采用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>_ Traceback (most recent call last):</div><div class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'_'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">42</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>_</div><div class="line"><span class="number">42</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'alright!'</span> <span class="keyword">if</span> _ <span class="keyword">else</span> <span class="string">':('</span></div><div class="line"><span class="string">'alright!'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>_</div><div class="line"><span class="string">'alright!'</span></div></pre></td></tr></table></figure>
</li>
<li><p>作为一个名称：这与上面一点稍微有些联系，此时‘_‘作为临时性的名称使用。这样，当其他人阅读你的代码时将会知道，你分配了一个特定的名称，但是并不会在后面再次用到该名称。例如，下面的例子中，你可能对循环计数中的实际值并不感兴趣，此时就可以使用‘_‘。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">42</span></div><div class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</div><div class="line">    do_something()</div></pre></td></tr></table></figure>
</li>
<li><p>国际化：也许你也曾看到‘_‘会被作为一个函数来使用。这种情况下，它通常用于实现国际化和本地化字符串之间翻译查找的函数名称，这似乎源自并遵循相应的C约定。例如，在Django文档‘转换‘章节中，你将能看到如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext <span class="keyword">as</span> _</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></div><div class="line">	output = _(<span class="string">"Welcome to my site."</span>)</div><div class="line">	<span class="keyword">return</span> HttpResponse(output)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>可以发现，场景二和场景三中的使用方法可能会相互冲突，所以我们需要避免在使用”_”作为国际化查找转换功能的代码块中同时使用‘_‘作为临时名称。</p>
<h2 id="名称前的单下划线（如：-shahriar）"><a href="#名称前的单下划线（如：-shahriar）" class="headerlink" title="名称前的单下划线（如：_shahriar）"></a>名称前的单下划线（如：_shahriar）</h2><p>程序员使用名称前的单下划线，用于指定该名称属性为‘私有‘。这有点类似于惯例，为了使其他人（或你自己）使用这些代码时将会知道以‘_‘开头的名称只供内部使用。正如Python文档中所述：</p>
<p>以下划线‘_‘为前缀的名称（如_spam）应该被视为API中非公开的部分（不管是函数、方法还是数据成员）。此时，应该将它们看作是一种实现细节，在修改它们时无需对外部通知。</p>
<p>正如上面所说，这确实类似一种惯例，因为它对解释器来说确实有一定的意义，如果你写了代码‘from &lt;模块/包名&gt; import *‘，那么以‘_‘开头的名称都不会被导入，除非模块或包中的‘<strong>all</strong>‘列表显式地包含了它们。了解更多请查看 <a href="https://shahriar.svbtle.com/importing-star-in-python" target="_blank" rel="external">Importing * in Python</a></p>
<h2 id="名称前的双下划线（如：-shahriar）"><a href="#名称前的双下划线（如：-shahriar）" class="headerlink" title="名称前的双下划线（如：__shahriar）"></a>名称前的双下划线（如：__shahriar）</h2><p>名称（具体为一个方法名）前双下划线（<strong>）的用法并不是一种惯例，对解释器来说它有特定的意义。Python中的这种用法是为了避免与子类定义的名称冲突。Python文档指出，‘</strong>spam‘这种形式（至少两个前导下划线，最多一个后续下划线）的任何标识符将会被‘_classname__spam‘这种形式原文取代，在这里‘classname‘是去掉前导下划线的当前类名。例如下面的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">_internal_use</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span><span class="keyword">pass</span></div><div class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">__method_name</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span><span class="keyword">pass</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(A())</div><div class="line">[<span class="string">'_A__method_name'</span>, ..., <span class="string">'_internal_use'</span>]</div></pre></td></tr></table></figure></p>
<p>正如所预料的，‘_internal_use‘并未改变，而‘<strong>method_name‘却被变成了‘_ClassName</strong>method_name‘。此时，如果你创建A的一个子类B，那么你将不能轻易地覆写A中的方法‘__method_name‘。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">__method_name</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span><span class="keyword">pass</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(B())</div><div class="line">[<span class="string">'_A__method_name'</span>, <span class="string">'_B__method_name'</span>, ..., <span class="string">'_internal_use'</span>]</div></pre></td></tr></table></figure>
<p>通常用作类的私有成员</p>
<h2 id="名称前后的双下划线（如："><a href="#名称前后的双下划线（如：" class="headerlink" title="名称前后的双下划线（如："></a>名称前后的双下划线（如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这种用法表示Python中特殊的方法名。其实，这只是一种惯例，对Python系统来说，这将确保不会与用户自定义的名称冲突。通常，你将会覆写这些方法，并在里面实现你所需要的功能，以便Python调用它们。例如，当定义一个类时，你经常会覆写‘```__init__```‘方法。</div><div class="line"></div><div class="line">双下划线开头双下划线结尾的是一些 Python 的‘魔术‘对象，如类成员的 ```__init__、__del__、__add__、__getitem__``` 等，以及全局的 ```__file__、__name__ ```等。 Python 官方推荐永远不要将这样的命名方式应用于自己的变量或函数，而是按照文档说明来使用。虽然你也可以编写自己的特殊方法名，但不要这样做。</div><div class="line"></div><div class="line">```Python</div><div class="line">&gt;&gt;&gt; class C(object):</div><div class="line">...     def __mine__(self):</div><div class="line">...         pass</div><div class="line">...</div><div class="line">&gt;&gt;&gt; dir(C)</div><div class="line">... [..., &apos;__mine__&apos;, ...]</div></pre></td></tr></table></figure></h2><h2 id="用-all-暴露接口"><a href="#用-all-暴露接口" class="headerlink" title="用 all 暴露接口"></a>用 <strong>all</strong> 暴露接口</h2><p>Python 可以在模块级别暴露接口：</p>
<p><strong>all</strong> = [“foo”, “bar”]</p>
<p>很多时候这么做还是很有好处的……</p>
<p>提供了哪些是公开接口的约定</p>
<p>不像 Ruby 或者 Java，Python 没有语言原生的可见性控制，而是靠一套需要大家自觉遵守的‘约定‘下工作。比如下划线开头的应该对外部不可见。同样，<strong>all</strong> 也是对于模块公开接口的一种约定，比起下划线，<strong>all</strong> 提供了暴露接口用的‘白名单‘。一些不以下划线开头的变量（比如从其他地方 import 到当前模块的成员）可以同样被排除出去。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Python 用下划线作为变量前缀和后缀指定特殊变量。</p>
<ul>
<li>_xxx     不能用’from module import *‘导入</li>
<li><strong>xxx</strong>  系统定义名字</li>
<li>__xxx    类中的私有变量名</li>
</ul>
<p>_xxx 被看作是‘私有的‘，在模块或类外不可以使用。当变量是私有的时候，用_xxx 来表示变量是很好的习惯。</p>
<p><strong>xxx</strong> 对Python 来说有特殊含义，对于普通的变量应当避免这种命名风格。</p>
<p>__xxx 是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据。</p>
<h2 id="PEP规范"><a href="#PEP规范" class="headerlink" title="PEP规范"></a>PEP规范</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">PEP-0008:</div><div class="line"></div><div class="line">In addition, the following special forms using leading or trailing underscores are recognized (these can generally be combined with any case convention):</div><div class="line"></div><div class="line"><span class="code">    - _single_leading_underscore: weak "internal use" indicator. E.g. "from M import \*" does not import objects whose name starts with an underscore.</span></div><div class="line"></div><div class="line"><span class="code">    - single_trailing_underscore_: used by convention to avoid conflicts with Python keyword, e.g.</span></div><div class="line"></div><div class="line"><span class="code">      Tkinter.Toplevel(master, class_='ClassName')</span></div><div class="line"></div><div class="line"><span class="code">    - __double_leading_underscore: when naming a class attribute, invokes name mangling (inside class FooBar, __boo becomes _FooBar__boo; see below).</span></div><div class="line"></div><div class="line"><span class="code">    - __double_leading_and_trailing_underscore__: "magic" objects or attributes that live in user-controlled namespaces. E.g. __init__,</span></div><div class="line"><span class="code">      __import__ or __file__. Never invent such names; only use them as documented.</span></div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[在 python 中，下划线命名规则往往令初学者相当疑惑：单下划线、双下划线、双下划线还分前后...那它们的作用与使用场景到底有何区别呢？]]>
    
    </summary>
    
      <category term="Python" scheme="http://miclee.cn/tags/Python/"/>
    
      <category term="Python" scheme="http://miclee.cn/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java keytool]]></title>
    <link href="http://miclee.cn/2017/04/19/Java_keytool/"/>
    <id>http://miclee.cn/2017/04/19/Java_keytool/</id>
    <published>2017-04-19T09:47:51.000Z</published>
    <updated>2017-04-19T10:18:00.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> Keytool是一个Java数据证书的管理工具，它使用户能够管理自己的公钥/私钥对及相关证书，用于（通过数字签名）自我认证（用户向别的用户/服务认证自己）或数据完整性以及认证服务。它还允许用户储存他们的通信对等者的公钥（以证书形式）。Keytool将密钥（key）和证书（certificates）存在一个称为秘钥仓库(keystore)的文件中。 </em></strong><br><a id="more"></a></p>
<hr>
<p>在keystore里，包含两种数据：</p>
<ul>
<li><p>密钥实体（Key entity）<br>每项存放极为敏感的加密密钥信息，这种信息以一种受保护的格式储存以防止未授权的访问。通常，储存在这类项中的密钥是机密密钥，或是伴有用于认证相应公钥用的证书“链”的私钥。keytool 和 jarsigner 工具只处理后一类型的项，即私钥及其关联的证书链。</p>
</li>
<li><p>可信任的证书实体（trusted certificate entries）<br>每项包含一个属于另一团体的公钥证书。它之所以叫做“可信任的证书”，是因为密钥仓库的拥有者相信证书中的公钥确实属于证书“主体”（拥有者）识别的身份。证书签发人通过对证书签名来保证这点。</p>
</li>
</ul>
<h2 id="生成keystore"><a href="#生成keystore" class="headerlink" title="生成keystore"></a>生成keystore</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -<span class="built_in">alias</span> miclee -keyalg RSA -validity <span class="number">1000</span> -keystore miclee.keystore</div></pre></td></tr></table></figure>
<h2 id="查看证书"><a href="#查看证书" class="headerlink" title="查看证书"></a>查看证书</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -<span class="type">list</span> -keystore miclee.keystore -storepass <span class="number">123456</span> -v</div></pre></td></tr></table></figure>
<h2 id="导出证书（只能导出公钥）"><a href="#导出证书（只能导出公钥）" class="headerlink" title="导出证书（只能导出公钥）"></a>导出证书（只能导出公钥）</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -exportcert -alias miclee -keystore miclee<span class="selector-class">.keystore</span> -file miclee<span class="selector-class">.crt</span> -storepass <span class="number">123456</span></div></pre></td></tr></table></figure>
<p>导出的miclee.crt为二进制格式，如果想要ASCII格式，请参考博文：<a href="http://miclee.cn/2017/04/19/certificate/">安全证书</a></p>
<h2 id="查看导出的证书"><a href="#查看导出的证书" class="headerlink" title="查看导出的证书"></a>查看导出的证书</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -printcert -<span class="built_in">file</span> miclee.crt</div></pre></td></tr></table></figure>
<h2 id="证书条目的删除"><a href="#证书条目的删除" class="headerlink" title="证书条目的删除"></a>证书条目的删除</h2><figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -<span class="keyword">delete</span> -<span class="keyword">alias</span> miclee -keystore miclee.keystore -storepass <span class="number">123456</span></div></pre></td></tr></table></figure>
<h2 id="证书条目口令的修改"><a href="#证书条目口令的修改" class="headerlink" title="证书条目口令的修改"></a>证书条目口令的修改</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -keypasswd -alias miclee -keypass <span class="number">123456</span> -new <span class="number">654321</span> -keystore miclee.keystore -storepass <span class="number">123456</span></div></pre></td></tr></table></figure>
<h2 id="keystore口令的修改"><a href="#keystore口令的修改" class="headerlink" title="keystore口令的修改"></a>keystore口令的修改</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -storepasswd -keystore miclee.keystore -storepass <span class="number">123456</span> -new <span class="number">654321</span></div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[Keytool是一个Java数据证书的管理工具，它使用户能够管理自己的公钥/私钥对及相关证书，用于（通过数字签名）自我认证（用户向别的用户/服务认证自己）或数据完整性以及认证服务。它还允许用户储存他们的通信对等者的公钥（以证书形式）。Keytool将密钥（key）和证书（certificates）存在一个称为秘钥仓库(keystore)的文件中。]]>
    
    </summary>
    
      <category term="加密技术" scheme="http://miclee.cn/tags/%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/"/>
    
      <category term="加密技术" scheme="http://miclee.cn/categories/%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安全证书]]></title>
    <link href="http://miclee.cn/2017/04/19/certificate/"/>
    <id>http://miclee.cn/2017/04/19/certificate/</id>
    <published>2017-04-19T09:09:27.000Z</published>
    <updated>2017-04-19T10:25:46.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 证书、标准、格式、转换方式 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><p>SSL - Secure Sockets Layer，现在应该叫”TLS”，但由于习惯问题，我们还是叫”SSL”比较多.http协议默认情况下是不加密内容的，这样就很可能在内容传播的时候被别人监听到，对于安全性要求较高的场合，必须要加密，https就是带加密的http协议，而https的加密是基于SSL的，它执行的是一个比较下层的加密，也就是说，在加密前，你的服务器程序在干嘛，加密后也一样在干嘛，不用动，这个加密对用户和开发者来说都是透明的。</p>
<h2 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h2><p>OpenSSL - 简单地说，OpenSSL是SSL的一个实现，SSL只是一种规范.理论上来说，SSL这种规范是安全的，目前的技术水平很难破解，但SSL的实现就可能有些漏洞，如著名的”心脏出血”.OpenSSL还提供了一大堆强大的工具软件，强大到90%我们都用不到.</p>
<h2 id="证书标准-X-509"><a href="#证书标准-X-509" class="headerlink" title="证书标准-X.509"></a>证书标准-X.509</h2><p>X.509是常见通用的证书标准，主要定义了证书中应该包含哪些内容。所有的证书都符合为Public Key<br>Infrastructure (PKI) 制定的 ITU-T X509 国际标准。其详情可以参考RFC5280，SSL使用的就是这种证书标准。</p>
<h2 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h2><ul>
<li><strong>PEM - Privacy Enhanced Mail</strong><br>PEM格式通常用于数字证书认证机构（Certificate Authorities，CA）。内容为Base64编码的ASCII码文件，有类似”—–BEGIN CERTIFICATE—–” 和 “—–END CERTIFICATE—–”的头尾标记。服务器认证证书，中级认证证书和私钥都可以储存为PEM格式（认证证书其实就是公钥）。Apache和*NIX服务器偏向于使用这种编码格式。</li>
</ul>
<p>常用扩展名：.pem | .crt | .cer | .key</p>
<p>查看PEM格式证书的信息：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -<span class="keyword">in</span> certificate<span class="selector-class">.pem</span> -text -noout</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>DER - Distinguished Encoding Rules</strong><br>DER格式与PEM不同之处在于其使用二进制而不是Base64编码的ASCII。所有类型的认证证书和私钥都可以存储为DER格式。Java和Windows服务器偏向于使用这种编码格式。</li>
</ul>
<p>常用扩展名：.der | .cer</p>
<p>查看DER格式证书的信息：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -<span class="keyword">in</span> certificate<span class="selector-class">.der</span> -inform der -text -noout</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>PKCS - Public-Key Cryptography Standards</strong><br>PKCS是由 RSA 实验室与其它安全系统开发商为促进公钥密码的发展而制订的一系列标准，PKCS 目前共发布过 15 个标准。 常用的有：<ul>
<li>PKCS#7 Cryptographic Message Syntax Standard</li>
<li>PKCS#10 Certification Request Standard</li>
<li>PKCS#12 Personal Information Exchange Syntax Standard</li>
</ul>
</li>
</ul>
<h2 id="转换方式"><a href="#转换方式" class="headerlink" title="转换方式"></a>转换方式</h2><ul>
<li><p><strong>PEM &lt;-&gt; DER</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">openssl x509 -outform der -<span class="keyword">in</span> certificate<span class="selector-class">.pem</span> -out certificate<span class="selector-class">.der</span></div><div class="line"></div><div class="line">openssl x509 -inform der -<span class="keyword">in</span> certificate<span class="selector-class">.cer</span> -out certificate.pem</div></pre></td></tr></table></figure>
</li>
<li><p><strong>PEM &lt;-&gt; P7B</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">openssl crl2pkcs7 -nocrl -certfile certificate<span class="selector-class">.cer</span> -out certificate<span class="selector-class">.p7b</span> -certfile CACert<span class="selector-class">.cer</span></div><div class="line"></div><div class="line">openssl pkcs7 -print_certs -<span class="keyword">in</span> certificate<span class="selector-class">.p7b</span> -out certificate.cer</div></pre></td></tr></table></figure>
</li>
<li><p><strong>PEM &lt;-&gt; PFX</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -out certificate<span class="selector-class">.pfx</span> -inkey privateKey<span class="selector-class">.key</span> -<span class="keyword">in</span> certificate<span class="selector-class">.crt</span> -certfile CACert<span class="selector-class">.crt</span></div><div class="line"></div><div class="line">openssl pkcs12 -<span class="keyword">in</span> certificate<span class="selector-class">.pfx</span> -out certificate<span class="selector-class">.cer</span> -nodes</div></pre></td></tr></table></figure>
</li>
</ul>
<p>PXF转PEM后certificate.cer文件包含认证证书和私钥，需要把它们分开存储才能使用。</p>
<p>要转换KEY文件也类似，只不过把x509换成rsa，要转CSR的话，把x509换成req</p>
<h2 id="证书获取"><a href="#证书获取" class="headerlink" title="证书获取"></a>证书获取</h2><ul>
<li><strong>向权威证书颁发机构申请证书</strong><br>用这命令生成一个csr:<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">openssl</span> <span class="selector-tag">req</span> <span class="selector-tag">-newkey</span> <span class="selector-tag">rsa</span><span class="selector-pseudo">:2048</span> <span class="selector-tag">-new</span> <span class="selector-tag">-nodes</span> <span class="selector-tag">-keyout</span> <span class="selector-tag">my</span><span class="selector-class">.key</span> <span class="selector-tag">-out</span> <span class="selector-tag">my</span><span class="selector-class">.csr</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>把csr交给权威证书颁发机构，权威证书颁发机构对此进行签名，完成.保留好csr，当权威证书颁发机构颁发的证书过期的时候，你还可以用同样的csr来申请新的证书，key保持不变。</p>
<ul>
<li><strong>生成自签名的证书</strong><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">openssl</span> <span class="selector-tag">req</span> <span class="selector-tag">-newkey</span> <span class="selector-tag">rsa</span><span class="selector-pseudo">:2048</span> <span class="selector-tag">-new</span> <span class="selector-tag">-nodes</span> <span class="selector-tag">-x509</span> <span class="selector-tag">-days</span> 3650 <span class="selector-tag">-keyout</span> <span class="selector-tag">key</span><span class="selector-class">.pem</span> <span class="selector-tag">-out</span> <span class="selector-tag">cert</span><span class="selector-class">.pem</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>在生成证书的过程中会要你填一堆的东西，其实真正要填的只有Common Name，通常填写你服务器的域名，如”yourcompany.com”，或者你服务器的IP地址，其它都可以留空的.<br>生产环境中还是不要使用自签的证书，否则浏览器会不认，或者如果你是企业应用的话能够强制让用户的浏览器接受你的自签证书也行.向权威机构要证书通常是要钱的，但现在也有免费的，仅仅需要一个简单的域名验证即可。有兴趣的话查查”沃通数字证书”。</p>
]]></content>
    <summary type="html">
    <![CDATA[证书、标准、格式、转换方式]]>
    
    </summary>
    
      <category term="加密技术" scheme="http://miclee.cn/tags/%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/"/>
    
      <category term="加密技术" scheme="http://miclee.cn/categories/%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python之禅]]></title>
    <link href="http://miclee.cn/2017/04/19/Python%E4%B9%8B%E7%A6%85/"/>
    <id>http://miclee.cn/2017/04/19/Python之禅/</id>
    <published>2017-04-19T06:41:37.000Z</published>
    <updated>2017-04-19T06:51:30.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 有人说，要想学好一门编程语言，你就需要接受这门语言的哲学。那么如果你想精通Python，就需要践行Python背后的设计哲学。 </em></strong><br><a id="more"></a></p>
<hr>
<p>Python之父是荷兰人Guido van Rossum，被誉为历史上最伟大的12名程序员之一。他在设计Python时，目的是设计出一种优美而强大，提供给非专业程序设计师使用的语言，同时采取开放策略，使Python能够完美结合如C 、 C++和Java等其他语言。Guido对python设计之初提出了规范和风格，名为“Pythonic”，它指的是以Python的方式去编写代码、组织逻辑和对象行为。而对Python哲学的最好阐述，莫过于核心开发者Tim Peters所总结的“Python之禅”（The Zen of Python）了。启动Python解释器后，输入import this就可以看到全文了。</p>
<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import this</div><div class="line"></div><div class="line">The Zen <span class="keyword">of</span> Python, <span class="keyword">by</span> Tim Peters</div><div class="line"></div><div class="line">Beautiful <span class="keyword">is</span> better than ugly.</div><div class="line"><span class="keyword">Explicit</span> <span class="keyword">is</span> better than implicit.</div><div class="line">Simple <span class="keyword">is</span> better than complex.</div><div class="line">Complex <span class="keyword">is</span> better than complicated.</div><div class="line">Flat <span class="keyword">is</span> better than nested.</div><div class="line">Sparse <span class="keyword">is</span> better than dense.</div><div class="line">Readability counts.</div><div class="line">Special cases aren<span class="comment">'t special enough to break the rules.</span></div><div class="line">Although practicality beats purity.</div><div class="line">Errors should never pass silently.</div><div class="line">Unless explicitly silenced.</div><div class="line"><span class="keyword">In</span> the face <span class="keyword">of</span> ambiguity, refuse the temptation <span class="keyword">to</span> guess.</div><div class="line">There should be one-- <span class="keyword">and</span> preferably only one --obvious way <span class="keyword">to</span> <span class="keyword">do</span> it.</div><div class="line">Although that way may <span class="keyword">not</span> be obvious at first unless you<span class="comment">'re Dutch.</span></div><div class="line">Now <span class="keyword">is</span> better than never.</div><div class="line">Although never <span class="keyword">is</span> often better than *right* now.</div><div class="line"><span class="keyword">If</span> the implementation <span class="keyword">is</span> hard <span class="keyword">to</span> explain, it<span class="comment">'s a bad idea.</span></div><div class="line"><span class="keyword">If</span> the implementation <span class="keyword">is</span> easy <span class="keyword">to</span> explain, it may be a good idea.</div><div class="line">Namespaces are one honking great idea -- <span class="keyword">let</span><span class="comment">'s do more of those!</span></div></pre></td></tr></table></figure>
<h2 id="Python之禅"><a href="#Python之禅" class="headerlink" title="Python之禅"></a>Python之禅</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">优美胜于丑陋，</div><div class="line">明了胜于晦涩。</div><div class="line">简洁胜于复杂，</div><div class="line">复杂胜于凌乱。</div><div class="line">扁平胜于嵌套，</div><div class="line">稀疏胜于密繁。</div><div class="line">可读性很重要！</div><div class="line">即便假借特例的实用性之名，也不可违背这些规则。</div><div class="line">不要放过一切错误，除非错误本身需要以忽略对待。</div><div class="line">不确定面前，我们应抵挡妄加猜测的引诱。</div><div class="line">应该有一种，也但愿只有这一种是显而易见的解决之道。</div><div class="line">万事开头难，除非荷兰人。</div><div class="line">做好过不做，而不假思索就动手还不如不做。</div><div class="line">如果某个实现无法很好阐释，那么它肯定是一个糟糕的办法；</div><div class="line">如果某个实现很容易说清楚，那么它可能就是个不错的方案。</div><div class="line">命名空间是个绝妙的发明——对此我们应多多益善！</div></pre></td></tr></table></figure>
<h2 id="蛇宗三字经"><a href="#蛇宗三字经" class="headerlink" title="蛇宗三字经"></a>蛇宗三字经</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">美胜丑</div><div class="line">明胜暗</div><div class="line">简胜复</div><div class="line">复胜杂</div><div class="line">浅胜深</div><div class="line">疏胜密</div><div class="line">辞达意</div><div class="line">不逾矩</div><div class="line">弃至清</div><div class="line">无阴差</div><div class="line">有阳错</div><div class="line">拒疑数</div><div class="line">求完一</div><div class="line">虽不至，向往之</div><div class="line">敏于行</div><div class="line">戒莽撞</div><div class="line">差难言</div><div class="line">好易说</div><div class="line">每师出，多有名</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[有人说，要想学好一门编程语言，你就需要接受这门语言的哲学。那么如果你想精通Python，就需要践行Python背后的设计哲学。]]>
    
    </summary>
    
      <category term="Python" scheme="http://miclee.cn/tags/Python/"/>
    
      <category term="Python" scheme="http://miclee.cn/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[virtualenvwrapper设置]]></title>
    <link href="http://miclee.cn/2017/04/18/py_virtualenvwrapper/"/>
    <id>http://miclee.cn/2017/04/18/py_virtualenvwrapper/</id>
    <published>2017-04-18T11:16:24.000Z</published>
    <updated>2017-04-19T05:17:01.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> virtualenv 是一个可以在同一计算机中隔离多个python版本的工具。有时，两个不同的项目可能需要不同版本的python，如 python2.6.6 / python3.0 ，但是如果都装到一起，经常会导致问题。所以需要一个工具能够将这两种或几种不同版本的环境隔离开来，需要哪个版本就切换到哪个版本做为默认版本。virtualenv 既是满足这个需求的工具。它能够用于创建独立的Python环境，多个Python相互独立，互不影响。 </em></strong><br><a id="more"></a></p>
<hr>
<p>virtualenvwrapper是virtualenv的扩展管理包，用于更方便管理虚拟环境，它可以做：</p>
<ul>
<li>将所有虚拟环境整合在一个目录下</li>
<li>管理（新增，删除，复制）虚拟环境</li>
<li>切换虚拟环境</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> virtualenv</div><div class="line">pip <span class="keyword">install</span> virtualenvwrapper</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 ~/.bash_profile 文件里添加以下配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> WORKON_HOME=~/.virtualenvs</div><div class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</div></pre></td></tr></table></figure>
<p>别忘了执行 source .bash_profile</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>所有的命令可使用：virtualenvwrapper –help 进行查看，这里列出几个常用的：</p>
<ul>
<li>创建基本环境：mkvirtualenv [环境名]</li>
<li>删除环境：rmvirtualenv [环境名]</li>
<li>激活环境：workon [环境名]</li>
<li>退出环境：deactivate</li>
<li>列出所有环境：workon 或者 lsvirtualenv -b</li>
</ul>
<h2 id="安装Python3-环境"><a href="#安装Python3-环境" class="headerlink" title="安装Python3 环境"></a>安装Python3 环境</h2><p>先安装Python3：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>Python3</div></pre></td></tr></table></figure>
<p>创建环境：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkvirtualenv --python=<span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>python3 envname</div></pre></td></tr></table></figure>
<p>查看环境：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">workon</span></div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[virtualenv 是一个可以在同一计算机中隔离多个python版本的工具。有时，两个不同的项目可能需要不同版本的python，如 python2.6.6 / python3.0 ，但是如果都装到一起，经常会导致问题。所以需要一个工具能够将这两种或几种不同版本的环境隔离开来，需要哪个版本就切换到哪个版本做为默认版本。virtualenv 既是满足这个需求的工具。它能够用于创建独立的Python环境，多个Python相互独立，互不影响。]]>
    
    </summary>
    
      <category term="Python" scheme="http://miclee.cn/tags/Python/"/>
    
      <category term="Python" scheme="http://miclee.cn/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jupyter 安装]]></title>
    <link href="http://miclee.cn/2017/04/18/py_jurpyter/"/>
    <id>http://miclee.cn/2017/04/18/py_jurpyter/</id>
    <published>2017-04-18T11:09:03.000Z</published>
    <updated>2017-04-19T02:37:33.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> Jupyter NoteBook 支持python2和3 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="全新安装"><a href="#全新安装" class="headerlink" title="全新安装"></a>全新安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 <span class="keyword">install</span> jupyter</div></pre></td></tr></table></figure>
<h2 id="增加Python3的支持"><a href="#增加Python3的支持" class="headerlink" title="增加Python3的支持"></a>增加Python3的支持</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python3 -m pip <span class="keyword">install</span> ipykernel</div><div class="line">python3 -m ipykernel <span class="keyword">install</span> <span class="comment">--user</span></div></pre></td></tr></table></figure>
<h2 id="增加Python2的支持"><a href="#增加Python2的支持" class="headerlink" title="增加Python2的支持"></a>增加Python2的支持</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python -m pip <span class="keyword">install</span> ipykernel</div><div class="line">python -m ipykernel <span class="keyword">install</span> <span class="comment">--user</span></div></pre></td></tr></table></figure>
<h2 id="新的启动命令"><a href="#新的启动命令" class="headerlink" title="新的启动命令"></a>新的启动命令</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">jupyter notebook</span></div></pre></td></tr></table></figure>
<h2 id="页面支持内嵌图表"><a href="#页面支持内嵌图表" class="headerlink" title="页面支持内嵌图表"></a>页面支持内嵌图表</h2><p>在notebook页面执行：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">%<span class="selector-tag">pylab</span></span> inline</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[Jupyter NoteBook 支持python2和3]]>
    
    </summary>
    
      <category term="Python" scheme="http://miclee.cn/tags/Python/"/>
    
      <category term="Python" scheme="http://miclee.cn/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python模块 - collections]]></title>
    <link href="http://miclee.cn/2017/03/13/py_collections/"/>
    <id>http://miclee.cn/2017/03/13/py_collections/</id>
    <published>2017-03-13T06:54:36.000Z</published>
    <updated>2017-04-19T02:06:52.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> collections是Python内建的一个集合模块，提供了许多有用的集合类。 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="defaultdict-带有默认值的字典"><a href="#defaultdict-带有默认值的字典" class="headerlink" title="defaultdict 带有默认值的字典"></a>defaultdict 带有默认值的字典</h2><p>我们都知道，在使用Python原生的数据结构dict的时候，如果用 d[key] 这样的方式访问， 当指定的key不存在时，是会抛出KeyError异常的。</p>
<p>但是，如果使用defaultdict，只要你传入一个默认的类型或工厂方法，那么请求一个不存在的key时，便会调用这个工厂方法使用其结果来作为这个key的默认值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"></div><div class="line">members = [</div><div class="line">    <span class="comment"># Age, name</span></div><div class="line">    [<span class="string">'male'</span>, <span class="string">'John'</span>],</div><div class="line">    [<span class="string">'male'</span>, <span class="string">'Jack'</span>],</div><div class="line">    [<span class="string">'female'</span>, <span class="string">'Lily'</span>],</div><div class="line">    [<span class="string">'male'</span>, <span class="string">'Pony'</span>],</div><div class="line">    [<span class="string">'female'</span>, <span class="string">'Lucy'</span>],</div><div class="line">]</div><div class="line"></div><div class="line">result = defaultdict(list)</div><div class="line"><span class="keyword">for</span> sex, name <span class="keyword">in</span> members:</div><div class="line">    result[sex].append(name)</div><div class="line"></div><div class="line"><span class="keyword">print</span> result</div><div class="line"></div><div class="line"><span class="comment"># Result:</span></div><div class="line"><span class="comment"># defaultdict(&lt;type 'list'&gt;, &#123;'male': ['John', 'Jack', 'Pony'], 'female': ['Lily', 'Lucy']&#125;)</span></div></pre></td></tr></table></figure>
<h3 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3><p>namedtuple主要用来产生可以使用名称来访问元素的数据对象，通常用来增强代码的可读性， 在访问一些tuple类型的数据时尤其好用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"></div><div class="line">websites = [</div><div class="line">    (<span class="string">'google'</span>, <span class="string">'http://www.google.com/'</span>, <span class="string">u'拉里·佩奇'</span>),</div><div class="line">    (<span class="string">'facebook'</span>, <span class="string">'http://www.facebook.com/'</span>, <span class="string">u'马克·扎克伯格'</span>),</div><div class="line">    (<span class="string">'taobao'</span>, <span class="string">'http://www.taobao.com'</span>, <span class="string">u'马云'</span>)</div><div class="line">]</div><div class="line"></div><div class="line">Website = namedtuple(<span class="string">'Website'</span>, [<span class="string">'name'</span>, <span class="string">'url'</span>, <span class="string">'founder'</span>])</div><div class="line"></div><div class="line"><span class="keyword">for</span> website <span class="keyword">in</span> websites:</div><div class="line">    website = Website._make(website)</div><div class="line">    print(website)</div><div class="line"></div><div class="line"><span class="comment"># Result:</span></div><div class="line"><span class="comment"># Website(name='google', url='http://www.google.com/', founder='拉里·佩奇')</span></div><div class="line"><span class="comment"># Website(name='facebook', url='http://www.facebook.com/', founder='马克·扎克伯格')</span></div><div class="line"><span class="comment"># Website(name='taobao', url='http://www.taobao.com', founder='马云')</span></div></pre></td></tr></table></figure>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>deque其实是 double-ended queue 的缩写，翻译过来就是双端队列，它最大的好处就是实现了从队列 头部快速增加和取出对象: .popleft(), .appendleft() 。</p>
<p>你可能会说，原生的list也可以从头部添加和取出对象啊？就像这样：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">l</span><span class="selector-class">.insert</span>(0, <span class="selector-tag">v</span>)</div><div class="line"><span class="selector-tag">l</span><span class="selector-class">.pop</span>(0)</div></pre></td></tr></table></figure>
<p>但是值得注意的是，list对象的这两种用法的时间复杂度是 O(n) ，也就是说随着元素数量的增加耗时呈 线性上升。而使用deque对象则是 O(1) 的复杂度，所以当你的代码有这样的需求的时候， 一定要记得使用deque。</p>
<p>作为一个双端队列，deque还提供了一些其他的好用方法，比如 rotate 等。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"></div><div class="line">fancy_loading = deque(<span class="string">'------&gt;---托--乐--嘉--花--园---&gt;------'</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'\r%s'</span> % <span class="string">''</span>.join(fancy_loading),</div><div class="line">    fancy_loading.rotate(<span class="number">1</span>)</div><div class="line">    sys.stdout.flush()</div><div class="line">    time.sleep(<span class="number">0.15</span>)</div></pre></td></tr></table></figure>
<h3 id="Counter-计时器"><a href="#Counter-计时器" class="headerlink" title="Counter 计时器"></a>Counter 计时器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line">c = Counter(time_zones)</div><div class="line"><span class="comment"># 最多的10个</span></div><div class="line"><span class="keyword">print</span> c.most_common(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h3 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h3><p>在Python中，dict这个数据结构由于hash的特性，是无序的，这在有的时候会给我们带来一些麻烦， 幸运的是，collections模块为我们提供了OrderedDict，当你要获得一个有序的字典对象时，用它就对了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</div><div class="line"></div><div class="line">items = (</div><div class="line">    (<span class="string">'A'</span>, <span class="number">1</span>),</div><div class="line">    (<span class="string">'B'</span>, <span class="number">2</span>),</div><div class="line">    (<span class="string">'C'</span>, <span class="number">3</span>)</div><div class="line">)</div><div class="line"></div><div class="line">regular_dict = dict(items)</div><div class="line">ordered_dict = OrderedDict(items)</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'Regular Dict:'</span></div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> regular_dict.items():</div><div class="line">    <span class="keyword">print</span> k, v</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'Ordered Dict:'</span></div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> ordered_dict.items():</div><div class="line">    <span class="keyword">print</span> k, v</div><div class="line"></div><div class="line"><span class="comment"># Result:</span></div><div class="line"><span class="comment"># Regular Dict:</span></div><div class="line"><span class="comment"># A 1</span></div><div class="line"><span class="comment"># C 3</span></div><div class="line"><span class="comment"># B 2</span></div><div class="line"><span class="comment"># Ordered Dict:</span></div><div class="line"><span class="comment"># A 1</span></div><div class="line"><span class="comment"># B 2</span></div><div class="line"><span class="comment"># C 3</span></div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[collections是Python内建的一个集合模块，提供了许多有用的集合类。]]>
    
    </summary>
    
      <category term="Python" scheme="http://miclee.cn/tags/Python/"/>
    
      <category term="Python" scheme="http://miclee.cn/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JPA 对象关系模型之继承映射策略]]></title>
    <link href="http://miclee.cn/2016/05/25/jpa-inherit-type/"/>
    <id>http://miclee.cn/2016/05/25/jpa-inherit-type/</id>
    <published>2016-05-25T09:00:27.000Z</published>
    <updated>2016-05-25T09:30:25.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> Java 是一种面向对象的语言，面向对象的语言特的性之一就是继承。而关系型数据库中的表与表之间的关系，并没有这种继承关系，不能说一张表继承另一张表，它们之间的关系只是关联关系。那么现在 JPA 要将 POJO 的 Java 类映射到数据库中，对于 Java 类中的这种继承关系是如何映射到数据库中的呢。JPA 规范中现在提供了三种不同的策略来实现继承与关系之间的映射。 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><h3 id="一、Single-table-策略"><a href="#一、Single-table-策略" class="headerlink" title="一、Single-table 策略"></a>一、Single-table 策略</h3><p>这是继承映射中的缺省策略，在不特别指明的情况下，系统默认就是采用这种映射策略进行映射的。这个策略的映射原则就是父类包括子类中新添加的属性全部映射到一张数据库表中，数据库表中有一个自动生成的字段用来存储区分不同的子类的信息。</p>
<p><strong><em>就是不管有几张子实体，统统存在一张表里，父实体会为每个子实体冗余一条数据，通过自动生成的’DTYPE’字段来区分属于谁的数据。</em></strong></p>
<h3 id="二、Joined-subclass-策略"><a href="#二、Joined-subclass-策略" class="headerlink" title="二、Joined-subclass 策略"></a>二、Joined-subclass 策略</h3><p>这种映射策略中，继承关系中的每一个实体类，无论是具体类 (concrete entity) 或者抽象类 (abstract entity)，数据库中都有一个单独的表与他对应。子实体对应的表中不含有从根实体继承而来的属性，它们之间通过共享主键的方式进行关联。</p>
<p><strong><em>子实体会自动存入父实体的主键ID字段，父实体会为每个子实体存一条记录，通过自动生成的’DTYPE’字段来区分属于谁的数据。</em></strong></p>
<h3 id="三、Table-per-concrete-class-策略"><a href="#三、Table-per-concrete-class-策略" class="headerlink" title="三、Table-per-concrete-class 策略"></a>三、Table-per-concrete-class 策略</h3><p>这个策略就是将继承关系中的每一个实体映射到数据库中的一个单独的表中，与“Joined”策略不同的是，子实体对应的表中含有从根实体继承而来的属性。这种策略在 JPA2.0 中仍然是自由选取得，也就是说实现 JPA2.0 规范的持久化引擎，如 Toplink，Hibernate 等 , 仍然可以自由选取是否实现这种策略。</p>
<p><strong><em>每个子实体都有单独表冗余进父实体的字段</em></strong></p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>得益于注解 (annotation) 方式的使用，JPA 2.0 中实现继承关系的映射非常简单。当实体 (entity) 之间有继承关系的时候，一定有一个根实体 (root entity)，JPA2.0 中只需要在这个根实体 (root entity) 上标注 @Inheritance 注解并且指明想要采用的映射策略就可以了。如果是不用 @Inheritance 注解，或者使用了 @Inheritance 注解但是没有指明所要采用的映射策略的时候，默认就是采用单表策略 (Single-table strategy)。下面用图 1 这个继承关系分别说明这三种映射策略的使用。</p>
<h3 id="1、-Inheritance"><a href="#1、-Inheritance" class="headerlink" title="1、@Inheritance"></a>1、@Inheritance</h3><p>用于父，对应策略一</p>
<h3 id="2、-Inheritance-strategy-InheritanceType-JOINED"><a href="#2、-Inheritance-strategy-InheritanceType-JOINED" class="headerlink" title="2、@Inheritance(strategy=InheritanceType.JOINED)"></a>2、@Inheritance(strategy=InheritanceType.JOINED)</h3><p>用于父，对应策略二</p>
<h3 id="3、-Inheritance-strategy-InheritanceType-TABLE-PER-CLASS"><a href="#3、-Inheritance-strategy-InheritanceType-TABLE-PER-CLASS" class="headerlink" title="3、 @Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)"></a>3、 @Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)</h3><p>用于父，对应策略三</p>
<h3 id="4、用-MappedSuperclass来替代-Entity"><a href="#4、用-MappedSuperclass来替代-Entity" class="headerlink" title="4、用@MappedSuperclass来替代@Entity"></a>4、用@MappedSuperclass来替代@Entity</h3><p>用于父，父实体一般为抽象的不用被实例，数据库不会生成对应表，子实体会继承字段</p>
<h3 id="5、-Embeddable-和-Embedded"><a href="#5、-Embeddable-和-Embedded" class="headerlink" title="5、@Embeddable 和 @Embedded"></a>5、@Embeddable 和 @Embedded</h3><p>@Embeddable用于父，@Embedded用于子。嵌套映射，子实体里定义父实体的类型变量。</p>
<p><strong><em>需要注意的是，如有重复字段，需要用 @Transient 注解排除 </em></strong></p>
<p><strong><em>实际使用中可以用改良版 Joined-subclass 策略，父实体和子实体各自一张表，父实体只存储一份数据，由子实体通过父ID共享。</em></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[Java 是一种面向对象的语言，面向对象的语言特的性之一就是继承。而关系型数据库中的表与表之间的关系，并没有这种继承关系，不能说一张表继承另一张表，它们之间的关系只是关联关系。那么现在 JPA 要将 POJO 的 Java 类映射到数据库中，对于 Java 类中的这种继承关系是如何映射到数据库中的呢。JPA 规范中现在提供了三种不同的策略来实现继承与关系之间的映射。]]>
    
    </summary>
    
      <category term="jpa" scheme="http://miclee.cn/tags/jpa/"/>
    
      <category term="spring" scheme="http://miclee.cn/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis 安装]]></title>
    <link href="http://miclee.cn/2016/05/12/redis-setup/"/>
    <id>http://miclee.cn/2016/05/12/redis-setup/</id>
    <published>2016-05-12T08:33:43.000Z</published>
    <updated>2016-05-12T13:02:19.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> Redis是一个开源、支持网络、基于内存、键值对存储数据库，使用ANSI C编写， redis中文官方网站：[http://redis.cn/](http://redis.cn/) </em></strong><br><a id="more"></a></p>
<hr>
<h3 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget http:<span class="comment">//download.redis.io/releases/redis-3.2.0.tar.gz</span></div><div class="line">$ tar -xzf redis-<span class="number">3.2</span>.<span class="number">0</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div></pre></td></tr></table></figure>
<h3 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>cd redis-<span class="number">3.2</span>.<span class="number">0</span></div><div class="line"><span class="variable">$ </span>make</div></pre></td></tr></table></figure>
<h3 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>make PREFIX=<span class="regexp">/usr/local</span><span class="regexp">/redis install</span></div></pre></td></tr></table></figure>
<p>这步完了之后，Redis就被安装到了/usr/local/redis/ 下面了</p>
<h3 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make <span class="built_in">test</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果没安装有tcl那么会包下面这错误：<br>    You need tcl 8.5 or newer in order to run the Redis test​<br>   【安装Tcl-8.6.3】<br>​     [root@localhost202 src]# wget <a href="http://downloads.sourceforge.net/tcl/tcl8.6.3-src.tar.gz" target="_blank" rel="external">http://downloads.sourceforge.net/tcl/tcl8.6.3-src.tar.gz</a><br>     [root@localhost202 src]# tar -zxf tcl8.6.3-src.tar.gz<br>     [root@localhost202 src]# cd ​tcl8.6.3/unix/<br>     [root@localhost202 src]# ./configure<br>     [root@localhost202 src]# make<br>     [root@localhost202 src]# make install</p>
</blockquote>
<h3 id="五、配置"><a href="#五、配置" class="headerlink" title="五、配置"></a>五、配置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ cp src/redis-server src/redis-cli <span class="meta-keyword">/usr/</span>bin/bin</div><div class="line">$ cp ./redis.conf <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/redis/</span></div><div class="line">$ vim <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/redis/</span>redis.conf</div><div class="line"></div><div class="line">daemonize   yes      <span class="meta">#redis将以守护进程的方式运行，默认为no会暂用你的终端</span></div><div class="line">timeout <span class="number">300</span>​          <span class="meta">#当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span></div><div class="line">requirepass password123</div></pre></td></tr></table></figure>
<h3 id="六、运行"><a href="#六、运行" class="headerlink" title="六、运行"></a>六、运行</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ redis-server <span class="regexp">/usr/</span>local<span class="regexp">/redis/</span>redis.conf</div></pre></td></tr></table></figure>
<h3 id="七、防火墙里开启6379端口"><a href="#七、防火墙里开启6379端口" class="headerlink" title="七、防火墙里开启6379端口"></a>七、防火墙里开启6379端口</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi <span class="regexp">/etc/</span>sysconfig<span class="regexp">/iptables</span></div></pre></td></tr></table></figure>
<p>加入： -A INPUT -m state –state NEW -m tcp -p tcp –dport 6379 -j ACCEPT<br>重启防火墙<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>service iptables restart</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[Redis是一个开源、支持网络、基于内存、键值对存储数据库，使用ANSI C编写， redis中文官方网站：[http://redis.cn/](http://redis.cn/)]]>
    
    </summary>
    
      <category term="技术综合" scheme="http://miclee.cn/categories/%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[react-component]]></title>
    <link href="http://miclee.cn/2016/04/20/react-component/"/>
    <id>http://miclee.cn/2016/04/20/react-component/</id>
    <published>2016-04-20T11:01:42.000Z</published>
    <updated>2016-04-20T11:03:50.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 可以这么说，一个 React 应用就是构建在 React 组件之上的。 </em></strong><br><a id="more"></a></p>
<hr>
<h1 id="React-组件"><a href="#React-组件" class="headerlink" title="React 组件"></a>React 组件</h1><p>组件有两个核心概念：</p>
<ul>
<li>props</li>
<li>state</li>
</ul>
<p>一个组件就是通过这两个属性的值在 <code>render</code> 方法里面生成这个组件对应的 HTML 结构。</p>
<p>_注意：组件生成的 HTML 结构只能有一个单一的根节点。_</p>
<h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>前面也提到很多次了，<code>props</code> 就是组件的属性，由外部通过 JSX<br>属性传入设置，一旦初始设置完成，就可以认为 <code>this.props</code> 是不可更改的，所以<strong>不要</strong>轻易更改设置 <code>this.props</code> 里面的值（虽然对于一个 JS 对象你可以做任何事）。</p>
<h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p><code>state</code> 是组件的当前状态，可以把组件简单看成一个“状态机”，根据状态 <code>state</code><br>呈现不同的 UI 展示。</p>
<p>一旦状态（数据）更改，组件就会自动调用 <code>render</code> 重新渲染 UI，这个更改的动作会通过<br><code>this.setState</code> 方法来触发。</p>
<h2 id="划分状态数据"><a href="#划分状态数据" class="headerlink" title="划分状态数据"></a>划分状态数据</h2><p>一条原则：让组件尽可能地少状态。</p>
<p>这样组件逻辑就越容易维护。</p>
<p>什么样的数据属性可以当作状态？</p>
<p>当更改这个状态（数据）需要更新组件 UI 的就可以认为是 <code>state</code>，下面这些可以认为<strong>不是</strong>状态：</p>
<ul>
<li>可计算的数据：比如一个数组的长度</li>
<li>和 props 重复的数据：除非这个数据是要做变更的</li>
</ul>
<p>最后回过头来反复看几遍 <a href="http://facebook.github.io/react/docs/thinking-in-react.html" target="_blank" rel="external">Thinking in<br>React</a>，相信会对组件有更深刻的认识。</p>
<h2 id="无状态组件"><a href="#无状态组件" class="headerlink" title="无状态组件"></a>无状态组件</h2><p>你也可以用纯粹的函数来定义无状态的组件(stateless function)，这种组件没有状态，没有生命周期，只是简单的接受 props 渲染生成 DOM 结构。无状态组件非常简单，开销很低，如果可能的话尽量使用无状态组件。比如使用箭头函数定义：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const HelloMessage = (props) =&gt; &lt;div&gt; Hello &#123;props.name&#125;&lt;/div&gt;;</div><div class="line">render(&lt;HelloMessage name="John" /&gt;, mountNode);</div></pre></td></tr></table></figure>
<p>因为无状态组件只是函数，所以它没有实例返回，这点在想用 refs<br>获取无状态组件的时候要注意，参见<a href="dom.md">DOM 操作</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[可以这么说，一个 React 应用就是构建在 React 组件之上的。]]>
    
    </summary>
    
      <category term="react" scheme="http://miclee.cn/tags/react/"/>
    
      <category term="react" scheme="http://miclee.cn/categories/react/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React开发神器Webpack]]></title>
    <link href="http://miclee.cn/2016/04/20/react-webpack/"/>
    <id>http://miclee.cn/2016/04/20/react-webpack/</id>
    <published>2016-04-20T09:19:55.000Z</published>
    <updated>2016-04-20T12:01:03.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> Webpack是功能最为强大的前端模块管理和打包工具。虽然Webpack是一个通用的工具，并不只适合于React，但是很多React的文章或者项目都使用了Webpack，尤其是react-hot-loader这样的神器存在，让Webpack成为最主流的React开发工具。 </em></strong><br><a id="more"></a></p>
<hr>
<p>Webpack将项目中用到的一切静态资源都视之为模块，模块之间可以互相依赖。Webpack对它们进行统一的管理以及打包发布。</p>
<h2 id="一、安装Webpack"><a href="#一、安装Webpack" class="headerlink" title="一、安装Webpack"></a>一、安装Webpack</h2><p>Webpack一般作为全局的npm模块安装：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g Webpack</div></pre></td></tr></table></figure>
<p>直接执行此命令会默认使用当前目录的webpack.config.js作为配置文件。如果要指定另外的配置文件，可以执行：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack —config webpack<span class="selector-class">.custom</span><span class="selector-class">.config</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure>
<h2 id="二、Webpack模块加载器（Loaders）"><a href="#二、Webpack模块加载器（Loaders）" class="headerlink" title="二、Webpack模块加载器（Loaders）"></a>二、Webpack模块加载器（Loaders）</h2><p>Webpack将所有静态资源都认为是模块，比如JavaScript，CSS，LESS，TypeScript，JSX，CoffeeScript，图片等等，从而可以对其进行统一管理。每一种资源都可以通过对应的加载器处理成模块。和大多数包管理器不一样的是，Webpack的加载器之间可以进行串联，一个加载器的输出可以成为另一个加载器的输入。比如LESS文件先通过less-load处理成css，然后再通过css-loader加载成css模块，最后由style-loader加载器对其做最后的处理，从而运行时可以通过style标签将其应用到最终的浏览器环境。</p>
<p>为了让Webpack识别什么样的资源应该用什么加载器去载入，需要在配置文件进行配置：通过正则表达式对文件名进行匹配。</p>
<h3 id="特别的，使用babel解析js或jsx"><a href="#特别的，使用babel解析js或jsx" class="headerlink" title="特别的，使用babel解析js或jsx"></a>特别的，使用babel解析js或jsx</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-loader</div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-preset-react</div><div class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-preset-es2015</div></pre></td></tr></table></figure>
<h2 id="三、config文件"><a href="#三、config文件" class="headerlink" title="三、config文件"></a>三、config文件</h2><p>配置文件通常放在项目根目录之下，其本身也是一个标准的CommonJS模块。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./js/main.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'./build'</span>, <span class="comment">// 打包文件存放的绝对路径</span></div><div class="line">    publicPath: <span class="string">'/build'</span>, <span class="comment">// 网站运行时的访问路径</span></div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">resolve</span>: &#123; <span class="comment">//resolve 指定可以被 import 的文件后缀。比如 Hello.jsx 这样的文件就可以直接用 import Hello from 'Hello' 引用。</span></div><div class="line">       extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">   &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel-loader'</span>,</div><div class="line">        <span class="attr">query</span>:</div><div class="line">        &#123;</div><div class="line">			    <span class="attr">presets</span>:[<span class="string">'es2015'</span>,<span class="string">'react'</span>]</div><div class="line">			  &#125;</div><div class="line">      &#125;, <span class="comment">//指定 babel-loader 编译后缀名为 .js 或者 .jsx 的文件</span></div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'style-loader!css-loader'</span></div><div class="line">      &#125;,</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.(png|jpg)$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'url-loader?limit=8192'</span></div><div class="line">      &#125; <span class="comment">// inline base64 URLs for &lt;=8k images, direct URLs for the rest</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="四、webpack服务器"><a href="#四、webpack服务器" class="headerlink" title="四、webpack服务器"></a>四、webpack服务器</h2><p>在webpack里面有一个开发工具就是可以自动开启一个服务器。可以和webpack一样作为全局的npm模块安装：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g webpack-dev-<span class="keyword">server</span></div></pre></td></tr></table></figure></p>
<h2 id="五、实现热替换-HMR-功能"><a href="#五、实现热替换-HMR-功能" class="headerlink" title="五、实现热替换(HMR)功能"></a>五、实现热替换(HMR)功能</h2><ul>
<li><p>Webpack本身具有运行时模块替换功能，称之为Hot Module Replacement (HMR)。</p>
<p>当某个模块代码发生变化时，Webpack实时打包将其推送到页面并进行替换，从而无需刷新页面就实现代码替换。这个过程相对比较复杂，需要进行多方面考虑和配置。</p>
</li>
<li><p>使用react-hot-loader加载器</p>
<p>针对React出现了一个第三方react-hot-loader加载器，使用这个加载器就可以轻松实现React组件的热替换，非常方便。其实正是因为React的每一次更新都是全局刷新的虚拟DOM机制，让React组件的热替换可以成为通用的加载器，从而极大提高开发效率。</p>
</li>
<li><p>使用监听模式</p>
<p>‘webpack –watch’命令，不过需要手动刷新页面，但不需要重启服务。</p>
<h3 id="react-hot-loader加载器具体实现："><a href="#react-hot-loader加载器具体实现：" class="headerlink" title="react-hot-loader加载器具体实现："></a>react-hot-loader加载器具体实现：</h3><ul>
<li><p>1、安装依赖</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react-hot-loader --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
</li>
<li><p>2、更改webpack.config.js<br>为了热加载React组件，我们需要在前端页面中加入相应的代码，用以接收Webpack推送过来的代码模块，进而可以通知所有相关React组件进行重新Render:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line">...</div><div class="line">entry: [</div><div class="line">  <span class="string">'webpack-dev-server/client?http://127.0.0.1:8080'</span>, <span class="comment">// WebpackDevServer host and port</span></div><div class="line">  <span class="string">'webpack/hot/only-dev-server'</span>,</div><div class="line">  <span class="string">'./js/main'</span> <span class="comment">// Your appʼs entry point</span></div><div class="line">]</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>3、下一步，我们需要让Webpack用react-hot-loader去加载React组件:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line">...</div><div class="line">loaders: [&#123;</div><div class="line">    <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">    <span class="attr">loader</span>: <span class="string">'react-hot!babel'</span></div><div class="line">  &#125;,</div><div class="line">  …</div><div class="line">]</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>4、修改package.json文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "build": "webpack",</div><div class="line">  "dev": "webpack-dev-server --devtool eval --progress --colors --hot --content-base"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>参数含义：</p>
<ul>
<li>webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器</li>
<li>devtool eval - 为你的代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号</li>
<li>progress - 显示合并代码进度</li>
<li>colors - Yay，命令行中显示颜色！</li>
<li>hot - 开启HMR参数hot</li>
<li>content-base - 指向设置的输出目录,后面可以写你想指向的输出目录 不写默认为空目录</li>
</ul>
<ul>
<li>5、使用<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">run</span><span class="bash"> dev</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Webpack是功能最为强大的前端模块管理和打包工具。虽然Webpack是一个通用的工具，并不只适合于React，但是很多React的文章或者项目都使用了Webpack，尤其是react-hot-loader这样的神器存在，让Webpack成为最主流的React开发工具。]]>
    
    </summary>
    
      <category term="react" scheme="http://miclee.cn/tags/react/"/>
    
      <category term="react" scheme="http://miclee.cn/categories/react/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Catalina_Base和Catalina_HOME的区别]]></title>
    <link href="http://miclee.cn/2016/02/23/Catalina-Base/"/>
    <id>http://miclee.cn/2016/02/23/Catalina-Base/</id>
    <published>2016-02-23T06:58:14.000Z</published>
    <updated>2016-02-23T07:00:59.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> catalina.home和catalina.base这两个属性仅在你需要安装多个Tomcat实例而不想安装多个软件备份的时候使用，这样能节省磁盘空间。 </em></strong><br><a id="more"></a></p>
<hr>
<p>以Tomcat6.0为例，其Tomcat目录结构如下：<br>bin (运行脚本）<br>conf (配置文件）<br>lib (核心库文件）<br>logs (日志目录)<br>temp (临时目录)<br>webapps (自动装载的应用程序的目录）<br>work (JVM临时文件目录[java.io.tmpdir]) </p>
<p>让我们看看这些目录那些可以被多个Tomcat实例公用，其实只有 bin 和 lib 目录,其它目录conf、logs、temp、webapps和work每个Tomcat实例必须拥有其自己独立的备份。<br>明白了上述关系就容易理解catalina.home和catalina.base的用途了。<br>catalina.home指向公用信息的位置，就是bin和lib的父目录。<br>catalina.base指向每个Tomcat目录私有信息的位置，就是conf、logs、temp、webapps和work的父目录。</p>
<h1 id="仅运行一个Tomcat实例时，这两个属性指向的位置是相同的。"><a href="#仅运行一个Tomcat实例时，这两个属性指向的位置是相同的。" class="headerlink" title="仅运行一个Tomcat实例时，这两个属性指向的位置是相同的。"></a>仅运行一个Tomcat实例时，这两个属性指向的位置是相同的。</h1><p>我们可以从Tomcat 5.5 的配置文档（<a href="http://tomcat.apache.org/tomcat-5.5-doc/config/host.html" target="_blank" rel="external">http://tomcat.apache.org/tomcat-5.5-doc/config/host.html</a> ）中找到答案：</p>
<p>The description below uses the variable name $CATALINA_HOME to refer to the directory into which you have installed Tomcat 5, and is the base directory against which most relative paths are resolved. However, if you have configured Tomcat 5 for multiple instances by setting a CATALINA_BASE directory, you should use $CATALINA_BASE instead of $CATALINA_HOME for each of these references.</p>
<p>从这段描述可以看出CATALINA_HOME 和CATALINA_BASE 的区别。简单的说，CATALINA_HOME 是Tomcat 的安装目录，CATALINA_BASE 是Tomcat 的工作目录。如果我们想要运行Tomcat 的多个实例，但是不想安装多个Tomcat 软件副本。那么我们可以配置多个工作目录，每个运行实例独占一个工作目录，但是共享同一个安装目录。</p>
<p>Tomcat 每个运行实例需要使用自己的conf 、logs 、temp 、webapps 、work 和shared 目录，因此CATALINA_BASE 就指向这些目录。 而其他目录主要包括了Tomcat 的二进制文件和脚本，CATALINA_HOME 就指向这些目录。</p>
<p>如果我们希望再运行另一个Tomcat 实例，那么我们可以建立一个目录，把conf 、logs 、temp 、webapps 、work 和shared 拷贝到该目录下，然后让CATALINA_BASE 指向该目录即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[catalina.home和catalina.base这两个属性仅在你需要安装多个Tomcat实例而不想安装多个软件备份的时候使用，这样能节省磁盘空间。]]>
    
    </summary>
    
      <category term="tomcat" scheme="http://miclee.cn/categories/tomcat/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring-boot哎哟不错(八) —— 使用jpa]]></title>
    <link href="http://miclee.cn/2016/01/13/spring-boot-8/"/>
    <id>http://miclee.cn/2016/01/13/spring-boot-8/</id>
    <published>2016-01-13T07:26:46.000Z</published>
    <updated>2016-01-13T07:55:23.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> JPA是Sun官方提出的Java持久化规范。它为Java开发人员提供了一种对象/关系映射工具来管理Java应用中的关系数据。JPA的宗旨是为POJO提供持久化标准规范，伴随 Java EE 5 发布以来，受到了各大厂商及开源社区的追捧，各种商用的和开源的 JPA 框架如雨后春笋般出现，为开发者提供了丰富的选择。它一改之前 EJB 2.x 中实体 Bean 笨重且难以使用的形象，充分吸收了在开源社区已经相对成熟的 ORM 思想。另外，它并不依赖于 EJB 容器，可以作为一个独立的持久层技术而存在。目前比较成熟的 JPA 框架主要包括 Jboss 的 Hibernate EntityManager、Oracle 捐献给 Eclipse 社区的 EclipseLink(曾经的toplink)、Apache 的 OpenJPA等。所以使用Jpa的一个好处是，可以更换实现而不必改动太多代码。 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="Spring-Boot持久层发展历史"><a href="#Spring-Boot持久层发展历史" class="headerlink" title="Spring-Boot持久层发展历史"></a>Spring-Boot持久层发展历史</h2><p><img src="https://raw.githubusercontent.com/OfMicLee/img-hosting/master/java/spring-boot-jpa.png" alt="spring-boot-jpa"></p>
<h2 id="Spring-boot-jpa-常用配置"><a href="#Spring-boot-jpa-常用配置" class="headerlink" title="Spring-boot-jpa 常用配置"></a>Spring-boot-jpa 常用配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  jpa:</span></div><div class="line"><span class="attr">     database:</span> <span class="string">MYSQL</span></div><div class="line"><span class="attr">     show-sql:</span> <span class="literal">true</span></div><div class="line"><span class="attr">     hibernate:</span></div><div class="line"><span class="attr">           ddl-auto:</span> <span class="string">update</span></div><div class="line">           <span class="comment"># ddl-auto: none, create, create-drop, update, validate</span></div><div class="line"><span class="attr">           naming_strategy:</span> <span class="string">org.springframework.boot.orm.jpa.hibernate.SpringNamingStrategy</span></div><div class="line">           <span class="comment"># naming_strategy: org.hibernate.cfg.ImprovedNamingStrategy</span></div></pre></td></tr></table></figure>
<h3 id="ddl-auto"><a href="#ddl-auto" class="headerlink" title="ddl-auto"></a>ddl-auto</h3><p>主要用于：自动创建|更新|验证数据库表结构。如果不是此方面的需求建议set value=”none”。</p>
<ul>
<li><p>create ：<br>每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。</p>
</li>
<li><p>create-drop ：<br>每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。</p>
</li>
<li><p>update：<br>最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。</p>
</li>
<li><p>validate ：<br>每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</p>
</li>
</ul>
<blockquote>
<p>当为内嵌数据库时（hsqldb/h2/derby）默认为 create-drop<br>外部数据库默认 none</p>
</blockquote>
<h3 id="naming-strategy"><a href="#naming-strategy" class="headerlink" title="naming_strategy"></a>naming_strategy</h3><p>设置和数据库的映射方式，主要表名，字段名，外键名等。<br>SpringNamingStrategy继承了ImprovedNamingStrategy，主要修复了外键名的问题，具体请见：<a href="http://stackoverflow.com/questions/7689206/ejb3namingstrategy-vs-improvednamingstrategy-foreign-key-naming" target="_blank" rel="external">http://stackoverflow.com/questions/7689206/ejb3namingstrategy-vs-improvednamingstrategy-foreign-key-naming</a></p>
]]></content>
    <summary type="html">
    <![CDATA[JPA是Sun官方提出的Java持久化规范。它为Java开发人员提供了一种对象/关系映射工具来管理Java应用中的关系数据。JPA的宗旨是为POJO提供持久化标准规范，伴随 Java EE 5 发布以来，受到了各大厂商及开源社区的追捧，各种商用的和开源的 JPA 框架如雨后春笋般出现，为开发者提供了丰富的选择。它一改之前 EJB 2.x 中实体 Bean 笨重且难以使用的形象，充分吸收了在开源社区已经相对成熟的 ORM 思想。另外，它并不依赖于 EJB 容器，可以作为一个独立的持久层技术而存在。目前比较成熟的 JPA 框架主要包括 Jboss 的 Hibernate EntityManager、Oracle 捐献给 Eclipse 社区的 EclipseLink(曾经的toplink)、Apache 的 OpenJPA等。所以使用Jpa的一个好处是，可以更换实现而不必改动太多代码。]]>
    
    </summary>
    
      <category term="spring" scheme="http://miclee.cn/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[maven scope 类型]]></title>
    <link href="http://miclee.cn/2015/12/28/maven-scope/"/>
    <id>http://miclee.cn/2015/12/28/maven-scope/</id>
    <published>2015-12-28T03:04:46.000Z</published>
    <updated>2016-04-07T03:45:14.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 依赖范围控制哪些依赖在哪些classpath 中可用，哪些依赖包含在一个应用中。记录下以作备忘。 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="一、compile（编译范围）"><a href="#一、compile（编译范围）" class="headerlink" title="一、compile（编译范围）"></a>一、compile（编译范围）</h2><p><strong>compile是默认的范围</strong>；如果没有提供一个范围，编译范围依赖在所有的classpath中可用，同时它们也会被打包。而且这些dependency会传递到依赖的项目中。</p>
<h2 id="二、provided（已提供范围）"><a href="#二、provided（已提供范围）" class="headerlink" title="二、provided（已提供范围）"></a>二、provided（已提供范围）</h2><p>provided 指明了dependency 由JDK或者容器提供。例如如果开发了一个web 应用，可能在编译 classpath 中需要可用的Servlet API 来编译一个servlet，但是你不会想要在打包好的WAR 中包含这个Servlet API；这Servlet API JAR 由你的应用服务器或者servlet容器提供。已提供范围的依赖在编译classpath （不是运行时）可用。它们不是传递性的也不会被打包。</p>
<p>如：javax.servlet.jsp，jsp-api</p>
<h2 id="三、runtime（运行时范围）"><a href="#三、runtime（运行时范围）" class="headerlink" title="三、runtime（运行时范围）"></a>三、runtime（运行时范围）</h2><p>runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如可能在编译的时候只需要JDBC API JAR，而只有在运行的时候才需要JDBC驱动实现。</p>
<p>如：mysql-connector-java</p>
<h2 id="四、test（测试范围）"><a href="#四、test（测试范围）" class="headerlink" title="四、test（测试范围）"></a>四、test（测试范围）</h2><p>test范围依赖 在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。典型的如junit。</p>
<h2 id="五、system（系统范围）"><a href="#五、system（系统范围）" class="headerlink" title="五、system（系统范围）"></a>五、system（系统范围）</h2><p>system范围依赖与provided 类似，但是你必须显式的提供一个对于本地系统中JAR 文件的路径。这么做是为了允许基于本地对象编译，而这些对象是系统类库的一部分。这样的构件应该是一直可用的，Maven 也不会在仓库中去寻找它。如果你将一个依赖范围设置成系统范围，你必须同时提供一个 systemPath 元素。注意该范围是不推荐使用的（你应该一直尽量去从公共或定制的 Maven 仓库中引用依赖）。</p>
]]></content>
    <summary type="html">
    <![CDATA[依赖范围控制哪些依赖在哪些classpath 中可用，哪些依赖包含在一个应用中。记录下以作备忘。]]>
    
    </summary>
    
      <category term="maven" scheme="http://miclee.cn/tags/maven/"/>
    
      <category term="java" scheme="http://miclee.cn/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS 和 Android 的后台推送原理]]></title>
    <link href="http://miclee.cn/2015/12/26/ios-android-push/"/>
    <id>http://miclee.cn/2015/12/26/ios-android-push/</id>
    <published>2015-12-26T07:42:15.000Z</published>
    <updated>2015-12-26T07:59:39.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 因为手机平台本身、电量、网络流量的限制，移动互联网应用在设计上跟传统 PC 上的应用很大不一样，需要根据手机本身的特点，尽量的节省电量和流量，同时又要尽可能的保证数据能及时到达客户端。为了解决数据同步的问题，在手机平台上，常用的方法有2种。一种是定时去服务器上查询数据，也叫Polling，还有一种手机跟服务器之间维护一个 TCP 长连接，当服务器有数据时，实时推送到客户端，也就是我们说的 Push。从耗费的电量、流量和数据送达的及时性来说，Push都会有明显的优势，但 Push 的实现和维护成本相对较高。在移动无线网络下维护长连接，相对也有一些技术上的难度。本文介绍下IOS和Android目前不同的PUSH方案。 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><p>iOS 系统的推送（APNS，即 Apple Push Notification Service）依托一个或几个系统常驻进程运作，是全局的（接管所有应用的消息推送），所以可看作是独立于应用之外，而且是设备和苹果服务器之间的通讯，而非应用的提供商服务器。如 腾讯 QQ 的服务器（Provider）会给苹果公司对应的服务器（APNs）发出通知，然后再中转传送到你的设备（Devices）之上。当你接收到通知，打开应用，才开始从腾讯服务器接收数据，跟你之前看到通知里内容一样，但却是经由两个不同的通道而来。</p>
<p>而 Android，就不同，更像是传统桌面电脑系统做法。每个需要后台推送的应用有各自的单独后台进程，才能和各自的服务器通讯，交换数据。另外其实 Android 也有类似 APNS 的 GCM（Google Cloud Message），属于开发者可选，非强制。所以你大概看出来区别，iOS 的消息推送机制面世之时是一种全新的解决方案（堪称平台中的平台），应用本身不能有常驻的后台进程，系统的开销少，内存使用更少，电量也更少（把更多的运算和资源开销放在云端，非设备端）。而 Android 的特点，虽然开销大，优点是更稳定快速，但不明显。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>本质上，APNs 与 GCM 是类似的技术实现原理：即系统层有一个常驻的 TCP 长连接，一直保持的长连接，即使手机休眠的时候也在保持的长连接。这里对于大部分人来说，最不理解的就是，休眠时候都保持在那里的 TCP 长连接，不会耗电很厉害么？答案是：不会。这是手机的设计来做到的。TCP长连接有个心跳的时间，在国外可以很长比如30分钟，在国内则因为网络环境复杂一般10分钟。客户端发起的心跳，会短暂地消耗手机电能，但在这个心跳间隔期间，则消耗电能是很少的。当在心跳期间服务器端有推送信息过来时，客户端可以收到并做处理。</p>
<p>再说 APNs 的设计成功处。iOS 为了真正地为用户体验负责，不允许应用在后台活动。有了这个限制，但是对于终端设备，应用又是有必要“通知”到达用户的，随时与用户主动沟通起来的（典型的如聊天应用）。这就是 APNs 的逻辑所在：iOS 自己做个长驻后台保持连接。所有应用，有必要（申请）并且被允许（用户可以改设置）的话，可以通过 APNs 中转到达用户。这样就完善了！有可能很多人没有真正地体会到 iOS 不允许后台应用的好处。我是 Android 开发人员，Android 手机上一般只保留几个常用的应用，不常用就卸载。但是我的 iPhone / iPad 上则是，除非空间不足，一般不会删除应用。Android 就像 Windows，你要真的很费心去维护：有软件在干背后干坏事么？设备又给拖慢了，要清理。要考虑杀毒了。。。Android 因为后台可以长驻，尤其是国内的 Android 的手机上 Google自家的推送服务 GCM 处于基本不可用的状态。所以，各App各显神通。聊天类应用的话，大多数直接借用 XMPP 规范里的一些成果。少量如微信有IM底子的，自己开发协议。这些在实现原理上与 APNs / GCM 没有本质的区别，但有一定的技术门槛。而大多数普遍应用，要使用推送的话，则使用轮询的方式简单实现。其实，国外如 Urban Airship 自己实现了 Android 上的第三方提供的推送平台。近期国内如极光推送也实现了第三方的推送平台（技术与微信、GCM、APNs类似）。理论上，如果一个 Android 设备上多款应用都使用极光推送这种第三方推送平台的话，也可以如 APNs 一样达到节省电量、流量消耗的效果。</p>
]]></content>
    <summary type="html">
    <![CDATA[因为手机平台本身、电量、网络流量的限制，移动互联网应用在设计上跟传统 PC 上的应用很大不一样，需要根据手机本身的特点，尽量的节省电量和流量，同时又要尽可能的保证数据能及时到达客户端。为了解决数据同步的问题，在手机平台上，常用的方法有2种。一种是定时去服务器上查询数据，也叫Polling，还有一种手机跟服务器之间维护一个 TCP 长连接，当服务器有数据时，实时推送到客户端，也就是我们说的 Push。从耗费的电量、流量和数据送达的及时性来说，Push都会有明显的优势，但 Push 的实现和维护成本相对较高。在移动无线网络下维护长连接，相对也有一些技术上的难度。本文介绍下IOS和Android目前不同的PUSH方案。]]>
    
    </summary>
    
      <category term="push" scheme="http://miclee.cn/tags/push/"/>
    
      <category term="移动端" scheme="http://miclee.cn/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring-boot哎哟不错(七) —— 使用spring-boot 打包可执行jar和war包]]></title>
    <link href="http://miclee.cn/2015/12/25/spring-boot-7/"/>
    <id>http://miclee.cn/2015/12/25/spring-boot-7/</id>
    <published>2015-12-25T05:00:42.000Z</published>
    <updated>2015-12-25T05:35:25.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 使用spring-boot 打包可执行jar和war包。spring-boot哎哟不错系列第七篇，哎哟不错系列只记录spring-boot使用过程中重要的部分。 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="一、官方说法"><a href="#一、官方说法" class="headerlink" title="一、官方说法"></a>一、官方说法</h2><p>一旦spring-boot-maven-plugin被包含到你的pom.xml中，它就会自动尝试使用spring-boot:repackage目标重写存档以使它们能够执行。为了构建一个jar或war，你应该使用常规的packaging元素配置你的项目：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>生成的存档在package阶段会被Spring Boot增强。你想启动的main类即可以通过指定一个配置选项，也可以通过为manifest添加一个Main-Class属性这种常规的方式实现。如果你没有指定一个main类，该插件会搜索带有public static void main(String[] args)方法的类。</p>
<p>为了构建和运行一个项目的artifact，你可以输入以下命令：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mvn <span class="keyword">package</span></div><div class="line"><span class="title">$ java -jar target/mymodule-0.0.1-SNAPSHOT.jar</span></div></pre></td></tr></table></figure>
<p><strong>为了构建一个即是可执行的，又能部署到一个外部容器的war文件，你需要标记内嵌容器依赖为”provided”</strong>，例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="二、亲测"><a href="#二、亲测" class="headerlink" title="二、亲测"></a>二、亲测</h2><h3 id="亲测一：JSP项目"><a href="#亲测一：JSP项目" class="headerlink" title="亲测一：JSP项目"></a>亲测一：JSP项目</h3><p>存在设置情况下，各种运行情况（tomcat相关包在war包的lib-provided目录下）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>java -jar test.war   -&gt; OK</li>
<li>mvn spring-boot:run  -&gt; OK</li>
<li>tomcat 容器           -&gt; OK</li>
<li>run mainClass        -&gt; error 启动报错：java.lang.NoClassDefFoundError: javax/servlet/ServletContext，位于tomcat-embed-core，被打包到lib-provided。</li>
</ol>
<p>去掉设置或去掉provided（tomcat相关包在war包的lib目录下）:</p>
<ol>
<li>java -jar test.war   -&gt; OK</li>
<li>mvn spring-boot:run  -&gt; OK</li>
<li>tomcat 容器           -&gt; OK</li>
<li>run mainClass        -&gt; error 能启动，但访问404（无法解析JSP页面）</li>
</ol>
<h3 id="非JSP项目"><a href="#非JSP项目" class="headerlink" title="非JSP项目"></a>非JSP项目</h3><p>非JSP项目去掉依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>存在设置情况下，各种运行情况（spring-boot-starter-tomcat-1.3.0.RELEASE.jar在war包的lib-provided目录下）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>java -jar test.war   -&gt; OK</li>
<li>mvn spring-boot:run  -&gt; OK</li>
<li>tomcat 容器           -&gt; OK</li>
<li>run mainClass        -&gt; OK</li>
</ol>
<p>去掉设置或去掉provided（spring-boot-starter-tomcat-1.3.0.RELEASE.jar在war包的lib包下）:</p>
<ol>
<li>java -jar test.war   -&gt; OK</li>
<li>mvn spring-boot:run  -&gt; OK</li>
<li>tomcat 容器           -&gt; OK</li>
<li>run mainClass        -&gt; OK</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[使用spring-boot 打包可执行jar和war包。spring-boot哎哟不错系列第七篇，哎哟不错系列只记录spring-boot使用过程中重要的部分。]]>
    
    </summary>
    
      <category term="spring" scheme="http://miclee.cn/tags/spring/"/>
    
      <category term="spring" scheme="http://miclee.cn/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring-boot哎哟不错(六) —— spring-boot 重要注解解析]]></title>
    <link href="http://miclee.cn/2015/12/23/spring-boot-6/"/>
    <id>http://miclee.cn/2015/12/23/spring-boot-6/</id>
    <published>2015-12-23T05:22:26.000Z</published>
    <updated>2016-04-07T02:44:37.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> spring-boot 重要注解解析。spring-boot哎哟不错系列第六篇，哎哟不错系列只记录spring-boot使用过程中重要的部分。 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="一、-SpringBootApplication"><a href="#一、-SpringBootApplication" class="headerlink" title="一、 @SpringBootApplication"></a>一、 @SpringBootApplication</h2><ul>
<li><strong>spring-boot</strong> 定义的注解，属于包 <strong><em>org.springframework.boot.autoconfigure</em></strong>，先看源代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Indicates a &#123;<span class="doctag">@link</span> Configuration configuration&#125; class that declares one or more</div><div class="line"> * &#123;<span class="doctag">@link</span> Bean <span class="doctag">@Bean</span>&#125; methods and also triggers &#123;<span class="doctag">@link</span> EnableAutoConfiguration</div><div class="line"> * auto-configuration&#125; and &#123;<span class="doctag">@link</span> ComponentScan component scanning&#125;. This is a convenience</div><div class="line"> * annotation that is equivalent to declaring &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125;,</div><div class="line"> * &#123;<span class="doctag">@code</span> <span class="doctag">@EnableAutoConfiguration</span>&#125; and &#123;<span class="doctag">@code</span> <span class="doctag">@ComponentScan</span>&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Phillip Webb</div><div class="line"> * <span class="doctag">@author</span> Stephane Nicoll</div><div class="line"> * <span class="doctag">@since</span> 1.2.0</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Exclude specific auto-configuration classes such that they will never be applied.</div><div class="line">	 * <span class="doctag">@return</span> the classes to exclude</div><div class="line">	 */</div><div class="line">	Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Exclude specific auto-configuration class names such that they will never be</div><div class="line">	 * applied.</div><div class="line">	 * <span class="doctag">@return</span> the class names to exclude</div><div class="line">	 * <span class="doctag">@since</span> 1.3.0</div><div class="line">	 */</div><div class="line">	String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Base packages to scan for annotated components. Use &#123;<span class="doctag">@link</span> #scanBasePackageClasses&#125;</div><div class="line">	 * for a type-safe alternative to String-based package names.</div><div class="line">	 * <span class="doctag">@return</span> base packages to scan</div><div class="line">	 * <span class="doctag">@since</span> 1.3.0</div><div class="line">	 */</div><div class="line">	<span class="meta">@AliasFor</span>(annotation = ComponentScan.class, attribute = <span class="string">"basePackages"</span>)</div><div class="line">	String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Type-safe alternative to &#123;<span class="doctag">@link</span> #scanBasePackages&#125; for specifying the packages to</div><div class="line">	 * scan for annotated components. The package of each class specified will be scanned.</div><div class="line">	 * &lt;p&gt;</div><div class="line">	 * Consider creating a special no-op marker class or interface in each package that</div><div class="line">	 * serves no purpose other than being referenced by this attribute.</div><div class="line">	 * <span class="doctag">@return</span> base packages to scan</div><div class="line">	 * <span class="doctag">@since</span> 1.3.0</div><div class="line">	 */</div><div class="line">	<span class="meta">@AliasFor</span>(annotation = ComponentScan.class, attribute = <span class="string">"basePackageClasses"</span>)</div><div class="line">	Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>元注解 @Target, @Retention, @Documented, @Inherited 的作用请见 <a href="http://miclee.cn/2015/12/22/spring-annotition/">spring注解原理剖析与实现</a>这篇博文。</p>
</li>
<li><p>很多Spring Boot开发者总是使用@Configuration，@EnableAutoConfiguration和@ComponentScan注解他们的main类。由于这些注解被如此频繁地一块使用，Spring Boot提供一个方便的@SpringBootApplication选择。所以@SpringBootApplication注解等价于以默认属性使用@Configuration，@EnableAutoConfiguration和@ComponentScan。下面延伸解析下这三个注解。</p>
</li>
</ul>
<h2 id="二、-Configuration"><a href="#二、-Configuration" class="headerlink" title="二、 @Configuration"></a>二、 @Configuration</h2><ul>
<li><strong>spring</strong> 定义的注解，属于包 <strong><em>org.springframework.context.annotation</em></strong>，先看源代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Explicitly specify the name of the Spring bean definition associated</div><div class="line">	 * with this Configuration class.  If left unspecified (the common case),</div><div class="line">	 * a bean name will be automatically generated.</div><div class="line">	 * &lt;p&gt;The custom name applies only if the Configuration class is picked up via</div><div class="line">	 * component scanning or supplied directly to a &#123;<span class="doctag">@link</span> AnnotationConfigApplicationContext&#125;.</div><div class="line">	 * If the Configuration class is registered as a traditional XML bean definition,</div><div class="line">	 * the name/id of the bean element will take precedence.</div><div class="line">	 * <span class="doctag">@return</span> the specified bean name, if any</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.support.DefaultBeanNameGenerator</div><div class="line">	 */</div><div class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>众所周知，Spring 框架是控制反转 (IOC) 或依赖性注入 (DI) 模式的推动因素，而这种推动是通过基于容器的配置实现的。过去，Spring 允许开发人员使用基于 XML 的配置，通过利用应用程序上下文 XML 文件来管理 bean 依赖性。此文件处于应用程序的外部，包含 bean 及其与该应用程序的依赖项的定义。尽管使用 XML 配置较为简单和便捷，但仍有另外一种方法可定义 bean 及其依赖项。这种方法也称为基于 Java 的配置。不同于 XML，基于 Java 的配置使您能够以编程方式管理 bean。这可通过运用多种注释来实现。</p>
<p>演示一个demo:</p>
<ol>
<li><p>xml版的bean定义：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"course"</span> <span class="attr">class</span>=<span class="string">"demo.Course"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"module"</span> <span class="attr">ref</span>=<span class="string">"module"</span>/&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"module"</span> <span class="attr">class</span>=<span class="string">"demo.Module"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"assignment"</span> <span class="attr">ref</span>=<span class="string">"assignment"</span>/&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"assignment"</span> <span class="attr">class</span>=<span class="string">"demo.Assignment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>@Configuration 注解的配置类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppContext</span> </span>&#123;</div><div class="line">  	<span class="meta">@Bean</span></div><div class="line">  	<span class="function"><span class="keyword">public</span> Course <span class="title">course</span><span class="params">()</span> </span>&#123;</div><div class="line">  		Course course = <span class="keyword">new</span> Course();</div><div class="line">  		course.setModule(<span class="keyword">module</span>());</div><div class="line">  		<span class="keyword">return</span> course;</div><div class="line">  	&#125;</div><div class="line"></div><div class="line">  	<span class="meta">@Bean</span></div><div class="line">  	<span class="function"><span class="keyword">public</span> Module <span class="title">module</span><span class="params">()</span> </span>&#123;</div><div class="line">  		Module <span class="keyword">module</span> = <span class="keyword">new</span> Module();</div><div class="line">  		<span class="keyword">module</span>.setAssignment(assignment());</div><div class="line">  		<span class="keyword">return</span> <span class="keyword">module</span>;</div><div class="line">  	&#125;</div><div class="line"></div><div class="line">  	<span class="meta">@Bean</span></div><div class="line">  	<span class="function"><span class="keyword">public</span> Assignment <span class="title">assignment</span><span class="params">()</span> </span>&#123;</div><div class="line">  		<span class="keyword">return</span> <span class="keyword">new</span> Assignment();</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>@Configuration 注释位于类的顶端。它告知 Spring 容器这个类是一个拥有 bean 定义和依赖项的配置类。 @Bean 注释用于定义 bean。上述注释位于实例化 bean 并设置依赖项的方法上方。方法名称与 bean id 或默认名称相同。该方法的返回类型是向 Spring 应用程序上下文注册的 bean。您可使用 bean 的 setter 方法来设置依赖项，容器将调用它们来连接相关项。基于 Java 的配置也被视为基于注释的配置。</p>
<blockquote>
<p>总体来说，就是告诉spring容器加载这个配置；<br>相对于xml的配置来说，这个注解的作用就是将spring-xxx.xml（某个配置文件）配置进web.xml</p>
</blockquote>
<h2 id="三、-EnableAutoConfiguration"><a href="#三、-EnableAutoConfiguration" class="headerlink" title="三、 @EnableAutoConfiguration"></a>三、 @EnableAutoConfiguration</h2><ul>
<li><strong>spring-boot</strong> 定义的注解，属于包 <strong><em>org.springframework.boot.autoconfigure</em></strong>，先看源代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@AutoConfigurationPackage</span></div><div class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Exclude specific auto-configuration classes such that they will never be applied.</div><div class="line">	 * <span class="doctag">@return</span> the classes to exclude</div><div class="line">	 */</div><div class="line">	Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Exclude specific auto-configuration class names such that they will never be</div><div class="line">	 * applied.</div><div class="line">	 * <span class="doctag">@return</span> the class names to exclude</div><div class="line">	 * <span class="doctag">@since</span> 1.3.0</div><div class="line">	 */</div><div class="line">	String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个注解告诉Spring Boot <strong><em>根据添加的jar依赖猜测你想如何配置Spring</em></strong>。比如spring-boot-starter-web添加了Tomcat和Spring MVC，所以auto-configuration将假定你正在开发一个web应用并相应地对Spring进行设置。</p>
<p>Starter POMs和Auto-Configuration：设计auto-configuration的目的是更好的使用”Starter POMs”，但这两个概念没有直接的联系。你可以自由地挑选starter POMs以外的jar依赖，并且Spring Boot将仍旧尽最大努力去自动配置你的应用。</p>
<h2 id="四、-ComponentScan"><a href="#四、-ComponentScan" class="headerlink" title="四、 @ComponentScan"></a>四、 @ComponentScan</h2><ul>
<li><strong>spring</strong> 定义的注解，属于包 <strong><em>org.springframework.context.annotation</em></strong>，先看源代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ComponentScan &#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Alias for &#123;<span class="doctag">@link</span> #basePackages&#125;.</div><div class="line">	 * &lt;p&gt;Allows for more concise annotation declarations if no other attributes</div><div class="line">	 * are needed &amp;mdash; for example, &#123;<span class="doctag">@code</span> <span class="doctag">@ComponentScan</span>("org.my.pkg")&#125;</div><div class="line">	 * instead of &#123;<span class="doctag">@code</span> <span class="doctag">@ComponentScan</span>(basePackages = "org.my.pkg")&#125;.</div><div class="line">	 */</div><div class="line">	<span class="meta">@AliasFor</span>(<span class="string">"basePackages"</span>)</div><div class="line">	String[] value() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Base packages to scan for annotated components.</div><div class="line">	 * &lt;p&gt;&#123;<span class="doctag">@link</span> #value&#125; is an alias for (and mutually exclusive with) this</div><div class="line">	 * attribute.</div><div class="line">	 * &lt;p&gt;Use &#123;<span class="doctag">@link</span> #basePackageClasses&#125; for a type-safe alternative to</div><div class="line">	 * String-based package names.</div><div class="line">	 */</div><div class="line">	<span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</div><div class="line">	String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="comment">//还有一些属性并不常用，所以不列举了。。。。。。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>@ComponentScan 注解的作用就是开启spring的注解扫描，与xml配置方式下的 <context:component-scan> 作用一样。<br>可以设置一个值指定basePackages，就是开始扫描的包。如果没有设置 <strong>默认从定义这个注解的类所属包开始一直到所有子包</strong>。</context:component-scan></li>
</ul>
<h2 id="五、-Import"><a href="#五、-Import" class="headerlink" title="五、 @Import"></a>五、 @Import</h2><ul>
<li><strong>spring</strong> 定义的注解，属于包 <strong><em>org.springframework.context.annotation</em></strong>，先看源代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Import &#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * @&#123;<span class="doctag">@link</span> Configuration&#125;, &#123;<span class="doctag">@link</span> ImportSelector&#125;, &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125;</div><div class="line">	 * or regular component classes to import.</div><div class="line">	 */</div><div class="line">	Class&lt;?&gt;[] value();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>@Import 与xml配置方式下的<import> 作用一样。支持导入的类型有：<ul>
<li>一个或多个拥有 @Configuration 注解的配置类</li>
<li>ImportSelector 接口的实现类</li>
<li>ImportBeanDefinitionRegistrar 的实现类</li>
</ul>
</import></li>
</ul>
<blockquote>
<p>如果Import注解中Class为ImportSelector子类，通过invokeAwareMethods(selector)设置aware值，如果类型为DeferredImportSelector则添加到deferredImportSelectors集合中，待前面的parser.parse(configCandidates)<br>方法中processDeferredImportSelectors()处理；如果不是，则执行selectImports方法，将获取到的结果递归调用processImports，解析selectImports得到的结果</p>
<p>如果Import注解中Class为ImportBeanDefinitionRegistrar子类，则添加到importBeanDefinitionRegistrars中，注意该部分的数据在执行完parser.parse(configCandidates)后调用this.reader.loadBeanDefinitions(configClasses)解析，否则执行配置信息的解析操作。</p>
</blockquote>
<h2 id="六、-Conditional"><a href="#六、-Conditional" class="headerlink" title="六、 @Conditional"></a>六、 @Conditional</h2><ul>
<li><strong>spring</strong> 定义的注解，属于包 <strong><em>org.springframework.context.annotation</em></strong>，先看源代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Conditional &#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * All &#123;<span class="doctag">@link</span> Condition&#125;s that must &#123;<span class="doctag">@linkplain</span> Condition#matches match&#125;</div><div class="line">	 * in order for the component to be registered.</div><div class="line">	 */</div><div class="line">	Class&lt;? extends Condition&gt;[] value();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出value的值必须是实现了Condition接口的类，Condition接口定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condition</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Determine if the condition matches.</div><div class="line">	 * <span class="doctag">@param</span> context the condition context</div><div class="line">	 * <span class="doctag">@param</span> metadata metadata of the &#123;<span class="doctag">@link</span> org.springframework.core.type.AnnotationMetadata class&#125;</div><div class="line">	 * or &#123;<span class="doctag">@link</span> org.springframework.core.type.MethodMetadata method&#125; being checked.</div><div class="line">	 * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the condition matches and the component can be registered</div><div class="line">	 * or &#123;<span class="doctag">@code</span> false&#125; to veto registration.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>matchs()返回true 表明该bean（注解了@Conditional的类）需要被创建，否则不创建。</p>
<blockquote>
<p>延伸几个 spring-boot提供的 @Conditional的子集，具体了Conditional的条件：</p>
<ul>
<li><strong>@ConditionalOnClass:</strong> 等同于 <strong><em>@Conditional(OnClassCondition.class)</em></strong>，表示存在对应的Class文件时才会去创建该bean</li>
<li><strong>@ConditionalOnMissingBean:</strong> 等同于 <strong><em>@Conditional(OnBeanCondition.class)</em></strong>，表示spring上下文里缺失某个bean时才会去创建该bean</li>
<li><strong>@ConditionalOnWebApplication:</strong> 等同于 <strong><em>@Conditional(OnWebApplicationCondition.class)</em></strong>，表示只有在WEB应用时才会创建该bean</li>
<li>更多请参考 <strong><em>org.springframework.boot.autoconfigure.condition</em></strong> 包下面的类</li>
</ul>
</blockquote>
<h2 id="七、-EnableConfigurationProperties-amp-amp-ConfigurationProperties"><a href="#七、-EnableConfigurationProperties-amp-amp-ConfigurationProperties" class="headerlink" title="七、 @EnableConfigurationProperties &amp;&amp; @ConfigurationProperties"></a>七、 @EnableConfigurationProperties &amp;&amp; @ConfigurationProperties</h2><p>使用@Value(“${property}”)注解注入配置属性有时可能比较笨重，特别是需要使用多个properties或你的数据本身有层次结构。为了控制和校验你的应用配置，Spring Boot提供一个允许强类型beans的替代方法来使用properties。</p>
<p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"connection"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionSettings</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> InetAddress remoteAddress;</div><div class="line">    <span class="comment">// ... getters and setters</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当@EnableConfigurationProperties注解应用到你的@Configuration时，任何被@ConfigurationProperties注解的beans将自动被Environment属性配置。这种风格的配置特别适合与SpringApplication的外部YAML配置进行配合使用。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># application.yml</span></div><div class="line"><span class="symbol">connection:</span></div><div class="line"><span class="symbol">    username:</span> admin</div><div class="line"><span class="symbol">    remoteAddress:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></div><div class="line"><span class="meta"># additional configuration as required</span></div></pre></td></tr></table></figure>
<p>为了使用@ConfigurationProperties beans，你可以使用与其他任何bean相同的方式注入它们。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ConnectionSettings connection;</div><div class="line">     <span class="comment">//...</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openConnection</span><span class="params">()</span> </span>&#123;</div><div class="line">        Server server = <span class="keyword">new</span> Server();</div><div class="line">        <span class="keyword">this</span>.connection.configure(server);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可以通过在@EnableConfigurationProperties注解中直接简单的列出属性类来快捷的注册@ConfigurationProperties bean的定义。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(ConnectionSettings.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ConnectionSettings connection;</div><div class="line">     <span class="comment">//...</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openConnection</span><span class="params">()</span> </span>&#123;</div><div class="line">        Server server = <span class="keyword">new</span> Server();</div><div class="line">        <span class="keyword">this</span>.connection.configure(server);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//@Component 这样ConnectionSettings类上面就不用标示 @Component注解了</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"connection"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionSettings</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> InetAddress remoteAddress;</div><div class="line">    <span class="comment">// ... getters and setters</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[spring-boot 重要注解解析。spring-boot哎哟不错系列第六篇，哎哟不错系列只记录spring-boot使用过程中重要的部分。]]>
    
    </summary>
    
      <category term="spring" scheme="http://miclee.cn/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring-boot哎哟不错(五) —— spring-boot 自定义配置详解]]></title>
    <link href="http://miclee.cn/2015/12/22/spring-boot-5/"/>
    <id>http://miclee.cn/2015/12/22/spring-boot-5/</id>
    <published>2015-12-22T07:39:10.000Z</published>
    <updated>2016-04-07T02:40:17.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> spring-boot 自定义配置详解。spring-boot哎哟不错系列第五篇，哎哟不错系列只记录spring-boot使用过程中重要的部分。 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="一、spring-boot支持的配置类型"><a href="#一、spring-boot支持的配置类型" class="headerlink" title="一、spring-boot支持的配置类型"></a>一、spring-boot支持的配置类型</h2><ol>
<li><p><strong>.properties</strong> 以往常见，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user.address.city=nanjing</div></pre></td></tr></table></figure>
</li>
<li><p><strong>.yml</strong> yaml格式的文件，如：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">user:</span></div><div class="line"><span class="attr">  address:</span></div><div class="line"><span class="attr">    city:</span> <span class="string">nanjing</span></div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>在yaml中缩进不要使用TAB，否则会解析错误</p>
</blockquote>
<h2 id="二、简单配置案例"><a href="#二、简单配置案例" class="headerlink" title="二、简单配置案例"></a>二、简单配置案例</h2><ol>
<li><p>类路径下创建application.properties文件并定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name = MicLee</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个配置类来获取配置信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>) String name;</div><div class="line"></div><div class="line">    <span class="comment">//TODO getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在HelloWorldController.java调用配置bean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/springboot"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> User user;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;name&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayWorld</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name) </span>&#123;</div><div class="line">        System.out.println(<span class="string">"userName:"</span> + user.getName());</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>启动工程，在命令行执行</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/springboot/mi</span>clee</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<ul>
<li>在spring boot中默认会加载<br>classpath:/ | classpath:/config/ | file:./ | file:./config/ 路径下以application命名的property或yaml文件；</li>
<li>参数spring.config.location设置配置文件存放位置；</li>
<li>参数spring.config.name设置配置文件名称；</li>
</ul>
</blockquote>
<h2 id="三、配置文件里获取随机数"><a href="#三、配置文件里获取随机数" class="headerlink" title="三、配置文件里获取随机数"></a>三、配置文件里获取随机数</h2><p>在spring boot配置文件里能调用Random中的方法，如在application.properties中为user增加age参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name=MicLee</div><div class="line">age=$&#123;random.int&#125;</div></pre></td></tr></table></figure></p>
<p>bean中同时增加参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>) String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;age&#125;"</span>) Integer age;</div><div class="line"></div><div class="line">    <span class="comment">//TODO getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动工程时会为age随机生成一个整数值：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$&#123;<span class="built_in">random</span>.<span class="keyword">int</span>(<span class="number">100</span>)&#125; : 限制生成的数字小于<span class="number">10</span></div><div class="line">$&#123;<span class="built_in">random</span>.<span class="keyword">int</span>[<span class="number">0</span>,<span class="number">100</span>]&#125; : 指定范围的数字</div></pre></td></tr></table></figure></p>
<h2 id="在配置文件中调用占位符"><a href="#在配置文件中调用占位符" class="headerlink" title="在配置文件中调用占位符"></a>在配置文件中调用占位符</h2><p>修改配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name=MicLee</div><div class="line">age=$&#123;random.int[0,100]&#125;</div><div class="line">remark=hello,my name is $&#123;name&#125;,age is $&#123;age&#125;.</div></pre></td></tr></table></figure></p>
<p>修改bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>) String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;age&#125;"</span>) Integer age;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;remark&#125;"</span>) String remark;</div><div class="line">    <span class="comment">//TODO getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="四、去掉-Value-注解"><a href="#四、去掉-Value-注解" class="headerlink" title="四、去掉 @Value 注解"></a>四、去掉 @Value 注解</h2><p>在spring boot中属性的注入连 @Value 注解都不需要。<br>修改配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name=MicLee</div><div class="line">age=$&#123;random.int[0,100]&#125;</div><div class="line">remark=hello,my name is $&#123;name&#125;,age is $&#123;age&#125;.</div><div class="line">user.address=China,Nanjing</div></pre></td></tr></table></figure></p>
<p>修改bean，增加注解 @ConfigurationProperties ：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>) String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;age&#125;"</span>) Integer age;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;remark&#125;"</span>) String remark;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line"></div><div class="line">    <span class="comment">//TODO getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>使用@ConfigurationProperties需要指定prefix,同时bean中的属性和配置参数名保持一致。</p>
</blockquote>
<h2 id="五、实体嵌套配置"><a href="#五、实体嵌套配置" class="headerlink" title="五、实体嵌套配置"></a>五、实体嵌套配置</h2><p>在User中定义一个Address实体同样可以快捷配置:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// User.java</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>) String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;age&#125;"</span>) Integer age;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;remark&#125;"</span>) String remark;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Address address;</div><div class="line"></div><div class="line">    <span class="comment">//TODO getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Address.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String country;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String province;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line"></div><div class="line">    <span class="comment">//TODO getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">name=MicLee</div><div class="line">age=$&#123;random.int[0,100]&#125;</div><div class="line">remark=hello,my name is $&#123;name&#125;,age is $&#123;age&#125;.</div><div class="line">user.address.country=China</div><div class="line">user.address.province=Jiangsu</div><div class="line">user.address.city=Nanjing</div></pre></td></tr></table></figure></p>
<p>这种嵌套关系如果通过yaml文件展示出来层次感会更强:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">user:</span></div><div class="line"><span class="attr">    address:</span></div><div class="line"><span class="attr">      country:</span><span class="string">China</span></div><div class="line"><span class="attr">      province:</span><span class="string">Jiangsu</span></div><div class="line"><span class="attr">      city:</span><span class="string">Nanjing</span></div></pre></td></tr></table></figure></p>
<h2 id="六、配置集合"><a href="#六、配置集合" class="headerlink" title="六、配置集合"></a>六、配置集合</h2><p>一个人可能有多个联系地址，那么地址为集合:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// User.java</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>) String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;age&#125;"</span>) Integer age;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"$&#123;remark&#125;"</span>) String remark;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Address address；</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Address&gt; addressList = <span class="keyword">new</span> ArrayList&lt;Address&gt;();</div><div class="line"></div><div class="line">    <span class="comment">//TODO getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应的properties文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">user.addressList[0].country=China</div><div class="line">user.addressList[0].province=Jiangsu</div><div class="line">user.addressList[0].city=Nanjing</div><div class="line"></div><div class="line">user.addressList[1].country=China</div><div class="line">user.addressList[1].province=Anhui</div><div class="line">user.addressList[1].city=Anqing</div></pre></td></tr></table></figure></p>
<p>对应的yaml文件：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">user:</span></div><div class="line"><span class="attr">    -addressList:</span></div><div class="line"><span class="attr">      country:</span><span class="string">China</span></div><div class="line"><span class="attr">      province:</span><span class="string">Jiangsu</span></div><div class="line"><span class="attr">      city:</span><span class="string">Nanjing</span></div><div class="line"><span class="attr">    -addressList:</span></div><div class="line"><span class="attr">      country:</span><span class="string">China</span></div><div class="line"><span class="attr">      province:</span><span class="string">Anhui</span></div><div class="line"><span class="attr">      city:</span><span class="string">Anqing</span></div></pre></td></tr></table></figure></p>
<h2 id="七、多配置文件"><a href="#七、多配置文件" class="headerlink" title="七、多配置文件"></a>七、多配置文件</h2><p>spring boot设置多配置文件很简单，可以在bean上使用注解 @Profile(“development”) 即调用application-development.properties|yml文件，也可以调用SpringApplication中的etAdditionalProfiles()方法，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Profile</span>(<span class="string">"development"</span>)</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication app = <span class="keyword">new</span> SpringApplication(Application.class);</div><div class="line">        <span class="comment">//   app.setAdditionalProfiles("development");</span></div><div class="line">        app.addListeners(<span class="keyword">new</span> MyApplicationStartedEventListener());</div><div class="line">        app.run(args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以通过启动时指定参数spring.profiles.active。</p>
<blockquote>
<p>在实际项目中最好是将配置参数抽离出来集中管理，比如利用淘宝的super-diamond ,consul,zk 等。</p>
</blockquote>
<h2 id="八、去掉-Component注解"><a href="#八、去掉-Component注解" class="headerlink" title="八、去掉@@Component注解"></a>八、去掉@@Component注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//@Component  注解配置类User.java</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String remark;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line"></div><div class="line">    <span class="comment">//TODO getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注解引入处 UserService.java</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(User.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> User user;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[spring-boot 自定义配置详解。spring-boot哎哟不错系列第五篇，哎哟不错系列只记录spring-boot使用过程中重要的部分。]]>
    
    </summary>
    
      <category term="spring" scheme="http://miclee.cn/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring注解原理剖析与实现]]></title>
    <link href="http://miclee.cn/2015/12/22/spring-annotition/"/>
    <id>http://miclee.cn/2015/12/22/spring-annotition/</id>
    <published>2015-12-22T05:47:51.000Z</published>
    <updated>2015-12-22T07:09:36.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 讲述注解的基本概念和原理及其简单实用、以及自己实现一个 @Resource 注解来讲述其实现原理 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="一、注解的基本概念和原理"><a href="#一、注解的基本概念和原理" class="headerlink" title="一、注解的基本概念和原理"></a>一、注解的基本概念和原理</h2><h3 id="1）概念"><a href="#1）概念" class="headerlink" title="1）概念"></a>1）概念</h3><p>注解（Annotation）提供了一种安全的类似注释的机制，为我们在代码中添加信息提供了一种形式化得方法，使我们可以在稍后某个时刻方便的使用这些数据（通过解析注解来使用这些数据），用来将任何的信息或者元数据与程序元素（类、方法、成员变量等）进行关联。其实就是更加直观更加明了的说明，这些说明信息与程序业务逻辑没有关系，并且是供指定的工具或框架使用的。Annotation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的申明语句中。</p>
<p>Annotation其实是一种接口。通过java的反射机制相关的API来访问Annotation信息。相关类（框架或工具中的类）根据这些信息来决定如何使用该程序元素或改变它们的行为。Java语言解释器在工作时会忽略这些Annotation，因此在JVM中这些Annotation是“不起作用”的，只能通过配套的工具才能对这些Annotation类型的信息进行访问和处理。</p>
<h3 id="2）Annotation和interface的异同"><a href="#2）Annotation和interface的异同" class="headerlink" title="2）Annotation和interface的异同"></a>2）Annotation和interface的异同</h3><ol>
<li>Annotition的类型使用关键字 @interface 而不是interface。它继承了java.lang.annotition.Annotition接口，并非申明了一个interface。</li>
<li><p>Annotation类型、方法定义是独特的、受限制的：</p>
<ul>
<li><p>Annotation类型的方法必须申明为无参数、无异常抛出的。这些方法定义了 <strong>Annotation的成员：方法名为成员名，而方法返回值为成员的类型。</strong></p>
<blockquote>
<p>特别的，如果方法名为 value()， 则在注解的地方需要设置属性值时可以直接写入值，如：@Target({ElemenetType.TYPE}) 而不必写为 @Target(value={ElemenetType.TYPE})</p>
</blockquote>
</li>
<li><p>方法返回值必须为primitive类型、Class类型、枚举类型、Annotation类型或者由前面类型之一作为元素的一位数组。</p>
</li>
<li>方法的后面可以使用default关键字加一个默认数值来申明成员的默认值，null不能作为成员的默认值，这与我们在非Annotation类型中定义方法有很大不同。</li>
<li>Annotation类型和他的方法不能使用Annotation类型的参数，成员不能是generic。只有返回值类型是Class的方法可以在Annotation类型中使用generic，因为此方法能够用类转换将各种类型转换为Class。</li>
</ul>
</li>
<li>Annotation类型又与接口有着近似之处：它可以定义常量、静态成员类型（比如枚举类型定义）；Annotation类型也可以如接口一般被实现或者继承。</li>
</ol>
<h3 id="3）元注解-Target-Retention-Documented-Inherited"><a href="#3）元注解-Target-Retention-Documented-Inherited" class="headerlink" title="3）元注解 @Target, @Retention, @Documented, @Inherited"></a>3）元注解 @Target, @Retention, @Documented, @Inherited</h3><ol>
<li>@Target 表示该注解用于什么地方，可能的 ElemenetType 参数包括：<ul>
<li>ElemenetType.CONSTRUCTOR 构造器声明</li>
<li>ElemenetType.FIELD 域声明（包括 enum 实例）</li>
<li>ElemenetType.LOCAL_VARIABLE 局部变量声明</li>
<li>ElemenetType.METHOD 方法声明</li>
<li>ElemenetType.PACKAGE 包声明</li>
<li>ElemenetType.PARAMETER 参数声明</li>
<li>ElemenetType.TYPE 类，接口（包括注解类型）或enum声明</li>
</ul>
</li>
<li>@Retention 表示在什么级别保存该注解信息。可选的 RetentionPolicy 参数包括：<ul>
<li>RetentionPolicy.SOURCE 注解将被编译器丢弃</li>
<li>RetentionPolicy.CLASS 注解在class文件中可用，但会被VM丢弃</li>
<li>RetentionPolicy.RUNTIME VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息</li>
</ul>
</li>
<li>@Documented 将此注解包含在 javadoc 中</li>
<li>@Inherited 允许子类继承父类中的注解</li>
</ol>
<h3 id="4）演示一个demo"><a href="#4）演示一个demo" class="headerlink" title="4）演示一个demo"></a>4）演示一个demo</h3><ol>
<li><p>定义注解Test：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该注解用于方法声明</span></div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="comment">//VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="comment">//将此注解包含在javadoc中</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="comment">//允许子类继承父类中的注解</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> "no description"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span></span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 被注释的三个方法</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span>(id = <span class="number">1</span>, description = <span class="string">"hello method1"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span>(id = <span class="number">2</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span>(id = <span class="number">3</span>, description = <span class="string">"last method3"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>解析注解:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Method[] methods = Test_1.class.getDeclaredMethods();</div><div class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">            <span class="comment">//判断方法中是否有指定注解类型的注解</span></div><div class="line">            <span class="keyword">boolean</span> hasAnnotation = method.isAnnotationPresent(Test.class);</div><div class="line">            <span class="keyword">if</span> (hasAnnotation) &#123;</div><div class="line">                <span class="comment">//根据注解类型返回方法的指定类型注解</span></div><div class="line">                Test annotation = method.getAnnotation(Test.class);</div><div class="line">                System.out.println(<span class="string">"Test(method="</span> + method.getName() + <span class="string">",id="</span> + annotation.id()</div><div class="line">                                   + <span class="string">",description="</span> + annotation.description() + <span class="string">")"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="二、自定义-Resource注解"><a href="#二、自定义-Resource注解" class="headerlink" title="二、自定义 @Resource注解"></a>二、自定义 @Resource注解</h2><h3 id="1）定义Annotition-MicLeeResource"><a href="#1）定义Annotition-MicLeeResource" class="headerlink" title="1）定义Annotition @MicLeeResource"></a>1）定义Annotition @MicLeeResource</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>( &#123; ElementType.FIELD, ElementType.METHOD &#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MicLeeResource &#123;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2）使用注解"><a href="#2）使用注解" class="headerlink" title="2）使用注解"></a>2）使用注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleServiceImpl</span> <span class="keyword">implements</span> <span class="title">PeopleService</span> </span>&#123;</div><div class="line">    <span class="meta">@MicLeeResource</span></div><div class="line">    <span class="keyword">private</span> PeopleDao peopleDao;</div><div class="line">    <span class="keyword">private</span> String    name = <span class="string">"MicLee"</span>;</div><div class="line">    <span class="keyword">private</span> Integer   id   = <span class="number">1</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> peopleDao 或者注解在set方法上</div><div class="line">     */</div><div class="line">    <span class="comment">//@MicLeeResource</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPeopleDao</span><span class="params">(PeopleDao peopleDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.peopleDao = peopleDao;</div><div class="line">    &#125;</div><div class="line">…</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3）实现注入原理，在自定义spring容器中添加注解功能"><a href="#3）实现注入原理，在自定义spring容器中添加注解功能" class="headerlink" title="3）实现注入原理，在自定义spring容器中添加注解功能"></a>3）实现注入原理，在自定义spring容器中添加注解功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicLeeClassPathXMLApplicationContext</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//存放BeanDefinition的列表，在beans.xml中定义的bean可能不止一个</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;BeanDefinition&gt; beanDefines = <span class="keyword">new</span> ArrayList&lt;BeanDefinition&gt;();</div><div class="line">    <span class="comment">//将类名作为索引，将创建的Bean对象存入到Map中</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt;  sigletons   = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MicLeeClassPathXMLApplicationContext</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">        <span class="comment">//读取xml配置文件</span></div><div class="line">        <span class="keyword">this</span>.readXML(fileName);</div><div class="line">        <span class="comment">//实例化bean</span></div><div class="line">        <span class="keyword">this</span>.instanceBeans();</div><div class="line">        <span class="comment">//处理注解方式</span></div><div class="line">        <span class="keyword">this</span>.annotationInject();</div><div class="line">        <span class="comment">//注入对象</span></div><div class="line">        <span class="keyword">this</span>.injectObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用注解方式注入对象方法实现</div><div class="line">     * <span class="doctag">@throws</span> IntrospectionException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">annotationInject</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//循环所有bean对象</span></div><div class="line">        <span class="keyword">for</span> (String beanName : sigletons.keySet()) &#123;</div><div class="line">            <span class="comment">//获取bean对象</span></div><div class="line">            Object bean = sigletons.get(beanName);</div><div class="line">            <span class="comment">//如果bean不为空,取得bean的属性</span></div><div class="line">            <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">//按属性注入</span></div><div class="line">                    PropertyDescriptor[] ps = Introspector.getBeanInfo(bean.getClass())</div><div class="line">                        .getPropertyDescriptors();</div><div class="line">                    <span class="keyword">for</span> (PropertyDescriptor properdesc : ps) &#123;</div><div class="line">                        <span class="comment">//获取属性的setter方法</span></div><div class="line">                        Method setter = properdesc.getWriteMethod();</div><div class="line">                        <span class="comment">//判断注解是否存在</span></div><div class="line">                        <span class="keyword">if</span> (setter != <span class="keyword">null</span> &amp;&amp; setter.isAnnotationPresent(MicLeeResource.class)) &#123;</div><div class="line">                            <span class="comment">//取得注解</span></div><div class="line">                            MicLeeResource resource = setter.getAnnotation(MicLeeResource.class);</div><div class="line">                            Object value = <span class="keyword">null</span>;</div><div class="line">                            <span class="comment">//如果按名字找到</span></div><div class="line">                            <span class="keyword">if</span> (resource.name() != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(resource.name())) &#123;</div><div class="line">                                <span class="comment">//取得容器中的bean对象</span></div><div class="line">                                value = sigletons.get(resource.name());</div><div class="line"></div><div class="line">                            &#125; <span class="keyword">else</span> &#123;<span class="comment">//没有按名字找到，按类型寻找</span></div><div class="line">                                <span class="comment">//取得容器中的bean对象</span></div><div class="line">                                value = sigletons.get(resource.name());</div><div class="line">                                <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">                                    <span class="keyword">for</span> (String key : sigletons.keySet()) &#123;</div><div class="line">                                        <span class="keyword">if</span> (properdesc.getPropertyType().isAssignableFrom(</div><div class="line">                                            sigletons.get(key).getClass())) &#123;</div><div class="line">                                            value = sigletons.get(key);</div><div class="line">                                            <span class="keyword">break</span>;</div><div class="line">                                        &#125;</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">//把引用对象注入到属性</span></div><div class="line">                            setter.setAccessible(<span class="keyword">true</span>);</div><div class="line">                            setter.invoke(bean, value);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//按字段注入</span></div><div class="line">                    Field[] fields = bean.getClass().getDeclaredFields();</div><div class="line">                    <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">                        <span class="comment">//如果注解存在</span></div><div class="line">                        <span class="keyword">if</span> (field.isAnnotationPresent(MicLeeResource.class)) &#123;</div><div class="line">                            <span class="comment">//取得注解</span></div><div class="line">                            MicLeeResource resource = field.getAnnotation(MicLeeResource.class);</div><div class="line">                            Object value = <span class="keyword">null</span>;</div><div class="line">                            <span class="comment">//如果按名字找到</span></div><div class="line">                            <span class="keyword">if</span> (resource.name() != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(resource.name())) &#123;</div><div class="line">                                <span class="comment">//取得容器中的bean对象</span></div><div class="line">                                value = sigletons.get(resource.name());</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;<span class="comment">//没有按名字找到，按类型寻找</span></div><div class="line">                                <span class="comment">//取得容器中的bean对象</span></div><div class="line">                                value = sigletons.get(field.getName());</div><div class="line">                                <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">                                    <span class="keyword">for</span> (String key : sigletons.keySet()) &#123;</div><div class="line">                                        <span class="keyword">if</span> (field.getType().isAssignableFrom(</div><div class="line">                                            sigletons.get(key).getClass())) &#123;</div><div class="line">                                            value = sigletons.get(key);</div><div class="line">                                            <span class="keyword">break</span>;</div><div class="line">                                        &#125;</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">//允许访问private</span></div><div class="line">                            field.setAccessible(<span class="keyword">true</span>);</div><div class="line">                            field.set(bean, value);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (IntrospectionException e) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *为bean对象的属性注入值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">injectObject</span><span class="params">()</span> </span>&#123;</div><div class="line">    ….</div><div class="line">    &#125;</div><div class="line">….</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>@MicLeeResource 注解本身不做任何事情，只是像xml文件一样起到配置作用。注解代表的是某种业务意义，注解背后处理器的工作原理如上源码实现：首先解析所有属性，判断属性上是否存在指定注解，如果存在则根据搜索规则取得bean，然后利用反射原理注入。如果标注在字段上面，也可以通过字段的反射技术取得注解，根据搜索规则取得bean，然后利用反射技术注入。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[讲述注解的基本概念和原理及其简单实用、以及自己实现一个 @Resource 注解来讲述其实现原理]]>
    
    </summary>
    
      <category term="annotation" scheme="http://miclee.cn/tags/annotation/"/>
    
      <category term="spring" scheme="http://miclee.cn/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用模板语言]]></title>
    <link href="http://miclee.cn/2015/12/18/template-language/"/>
    <id>http://miclee.cn/2015/12/18/template-language/</id>
    <published>2015-12-18T09:11:40.000Z</published>
    <updated>2016-04-07T03:45:14.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 常用的模板引擎语言 </em></strong><br><a id="more"></a></p>
<hr>
<blockquote>
<p>在java领域，表现层技术主要有三种：jsp、freemarker、velocity<br>在javascript领域，主要有：EJS、Jade、doT、swig等等，参考<a href="http://garann.github.io/template-chooser/" target="_blank" rel="external">http://garann.github.io/template-chooser/</a></p>
</blockquote>
<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>功能强大，可以写java代码</li>
<li>支持jsp标签（jsp tag）</li>
<li>支持表达式语言（el）</li>
<li>官方标准，用户群广，丰富的第三方jsp标签库</li>
<li>性能良好。jsp编译成class文件执行，有很好的性能表现<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3>jsp没有明显缺点，非要挑点骨头那就是，由于可以编写java代码，如使用不当容易破坏mvc结构。</li>
</ol>
<h2 id="velocity是较早出现的用于代替jsp的模板语言"><a href="#velocity是较早出现的用于代替jsp的模板语言" class="headerlink" title="velocity是较早出现的用于代替jsp的模板语言"></a>velocity是较早出现的用于代替jsp的模板语言</h2><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol>
<li>不能编写java代码，可以实现严格的mvc分离</li>
<li>性能良好，据说比jsp性能还要好些</li>
<li>使用表达式语言，据说jsp的表达式语言就是学velocity的<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3></li>
<li>不是官方标准</li>
<li>用户群体和第三方标签库没有jsp多。</li>
<li>对jsp标签支持不够好</li>
</ol>
<h2 id="freemarker"><a href="#freemarker" class="headerlink" title="freemarker"></a>freemarker</h2><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol>
<li>不能编写java代码，可以实现严格的mvc分离</li>
<li>性能。velocity应该是最好的，其次是jsp，普通的页面freemarker性能最差（虽然只是几毫秒到十几毫秒的差距）。但是在复杂页面上（包含大量判断. 日期金额格式化）的页面上，freemarker的性能比使用tag和el的jsp好。</li>
<li>对jsp标签支持良好</li>
<li>内置大量常用功能，比如html过滤，日期金额格式化等等，使用非常方便</li>
<li>宏定义（类似jsp标签）非常方便，优于jsp的tag</li>
<li>使用表达式语言<h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3></li>
<li>不是官方标准</li>
<li>用户群体和第三方标签库没有jsp多</li>
</ol>
<h2 id="Jade"><a href="#Jade" class="headerlink" title="Jade"></a>Jade</h2><ul>
<li>Jade 很简洁，表达能力也很强，但不够直观，学习和适应成本高，大量的tab和空格容易出错。</li>
<li>Jade 处理模板时计算量大，在没有缓存的情况下性能低是肯定的。</li>
<li>Jade 对于一个不擅长前端、喜欢Bootstrap和Ctrl c + v 实在不能提高开发效率。</li>
<li>适合后端人员用</li>
</ul>
<h2 id="EJS"><a href="#EJS" class="headerlink" title="EJS"></a>EJS</h2><p>简单易用的模板引擎，不过不支持继承，如果只是想要个模板往里面填充数据，是最好的选择</p>
]]></content>
    <summary type="html">
    <![CDATA[常用的模板引擎语言]]>
    
    </summary>
    
      <category term="template" scheme="http://miclee.cn/tags/template/"/>
    
      <category term="java" scheme="http://miclee.cn/categories/java/"/>
    
  </entry>
  
</feed>
