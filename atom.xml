<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[MicLee's Bolg]]></title>
  <subtitle><![CDATA[技术创造价值，分享带来快乐]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://miclee.cn/"/>
  <updated>2015-12-14T07:50:17.000Z</updated>
  <id>http://miclee.cn/</id>
  
  <author>
    <name><![CDATA[MicLee]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用 Spring Security 保护 Web 应用的安全]]></title>
    <link href="http://miclee.cn/2015/12/14/spring-security/"/>
    <id>http://miclee.cn/2015/12/14/spring-security/</id>
    <published>2015-12-14T03:29:16.000Z</published>
    <updated>2015-12-14T07:50:17.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 安全一直是 Web 应用开发中非常重要的一个方面。从安全的角度来说，需要考虑用户认证和授权两个方面。为 Web 应用增加安全方面的能力并非一件简单的事情，需要考虑不同的认证和授权机制。Spring Security 为使用 Spring 框架的 Web 应用提供了良好的支持。本文将详细介绍如何使用 Spring Security 框架为 Web 应用提供安全支持。 </em></strong><br><a id="more"></a></p>
<hr>
<blockquote>
<p>在 Web 应用开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</p>
</blockquote>
<h2 id="Spring_Security_简介">Spring Security 简介</h2><p>Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</p>
<p>对于上面提到的两种应用情景，Spring Security 框架都有很好的支持。在用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</p>
<blockquote>
<p>未完待续。。。。。。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[安全一直是 Web 应用开发中非常重要的一个方面。从安全的角度来说，需要考虑用户认证和授权两个方面。为 Web 应用增加安全方面的能力并非一件简单的事情，需要考虑不同的认证和授权机制。Spring Security 为使用 Spring 框架的 Web 应用提供了良好的支持。本文将详细介绍如何使用 Spring Security 框架为 Web 应用提供安全支持。]]>
    
    </summary>
    
      <category term="spring" scheme="http://miclee.cn/tags/spring/"/>
    
      <category term="spring" scheme="http://miclee.cn/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring-boot-admin 使用介绍]]></title>
    <link href="http://miclee.cn/2015/11/28/spring-boot-admin/"/>
    <id>http://miclee.cn/2015/11/28/spring-boot-admin/</id>
    <published>2015-11-28T07:48:35.000Z</published>
    <updated>2015-12-14T02:42:04.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> spring-boot应用监控平台 </em></strong><br><a id="more"></a></p>
<hr>
<p>spring-boot应用监控平台使用方法简介：</p>
<h2 id="客户端">客户端</h2><ul>
<li>pom.xml增加以下依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置文件增加属性：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="class">.boot</span><span class="class">.admin</span><span class="class">.url</span>=http:<span class="comment">//localhost:8001</span></span><br></pre></td></tr></table></figure>
<p>如果为.yml格式，则如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">boot</span>:</span><br><span class="line">    <span class="attribute">admin</span>:</span><br><span class="line">      <span class="attribute">url</span>: <span class="attribute">http</span>:<span class="comment">//localhost:8001</span></span><br></pre></td></tr></table></figure>
<h2 id="服务端">服务端</h2><ul>
<li>只提供服务</li>
</ul>
<p>pom.xml增加以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-admin-server<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>只需要增加 @EnableAdminServer 一个注解即可创建admin应用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="annotation">@EnableAutoConfiguration</span></span><br><span class="line"><span class="annotation">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(Application.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>服务端加客户端（注册自身）</li>
</ul>
<p>在上面配置之外，再增加属性配置：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="class">.boot</span><span class="class">.admin</span><span class="class">.url</span>=http:<span class="comment">//localhost:8001</span></span><br></pre></td></tr></table></figure>
<p>如果为.yml格式，则如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">boot</span>:</span><br><span class="line">    <span class="attribute">admin</span>:</span><br><span class="line">      <span class="attribute">url</span>: <span class="attribute">http</span>:<span class="comment">//localhost:8001</span></span><br></pre></td></tr></table></figure>
<h2 id="客户端免配置模式">客户端免配置模式</h2><p>特别的，服务端增加spring-clouds注解 @EnableDiscoveryClient，并包含一个实现方式，(e.g. Eureka)，即可实现客户端免配置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableAdminServer</span><br><span class="line">public class SpringBootAdminApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.0.3.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[spring-boot应用监控平台]]>
    
    </summary>
    
      <category term="spring" scheme="http://miclee.cn/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[免费编程书籍]]></title>
    <link href="http://miclee.cn/2015/11/25/free-programming-books/"/>
    <id>http://miclee.cn/2015/11/25/free-programming-books/</id>
    <published>2015-11-25T02:40:03.000Z</published>
    <updated>2015-11-25T02:44:50.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 免费编程书籍 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="目录">目录</h2><ul>
<li><a href="#语言无关">语言无关</a><ul>
<li><a href="#在线教育">在线教育</a></li>
<li><a href="#软件开发方法">软件开发方法</a></li>
<li><a href="#操作系统">操作系统</a></li>
<li><a href="#版本控制">版本控制</a></li>
<li><a href="#数据库">数据库</a></li>
<li><a href="#正则表达式">正则表达式</a></li>
<li><a href="#智能系统">智能系统</a></li>
<li><a href="#分布式系统">分布式系统</a></li>
<li><a href="#编译原理">编译原理</a></li>
<li><a href="#函数式概念">函数式概念</a></li>
<li><a href="#计算机图形学">计算机图形学</a></li>
<li><a href="#web服务器">WEB服务器</a></li>
<li><a href="#编辑器">编辑器</a></li>
<li><a href="#nosql">NoSQL</a></li>
<li><a href="#postgresql">PostgreSQL</a></li>
<li><a href="#mysql">MySQL</a></li>
<li><a href="#管理和监控">管理和监控</a></li>
<li><a href="#项目相关">项目相关</a></li>
<li><a href="#设计模式">设计模式</a></li>
<li><a href="#web">Web</a></li>
<li><a href="#大数据">大数据</a></li>
<li><a href="#编程艺术">编程艺术</a></li>
<li><a href="#其它">其它</a></li>
</ul>
</li>
<li><a href="#语言相关">语言相关</a><ul>
<li><a href="#android">Android</a></li>
<li><a href="#awk">AWK</a></li>
<li><a href="#cc">C/C++</a></li>
<li><a href="#coffeescript">CoffeeScript</a></li>
<li><a href="#dart">Dart</a></li>
<li><a href="#elasticsearch">Elasticsearch</a></li>
<li><a href="#erlang">Erlang</a></li>
<li><a href="#fortran">Fortran</a></li>
<li><a href="#golang">Golang</a></li>
<li><a href="#haskell">Haskell</a></li>
<li><a href="#html--css">HTML / CSS</a></li>
<li><a href="#http">HTTP</a></li>
<li><a href="#ios">iOS</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">JavaScript</a></li>
<li><a href="#latex">LaTeX</a></li>
<li><a href="#lisp">LISP</a></li>
<li><a href="#lua">Lua</a></li>
<li><a href="#markdown">Markdown</a></li>
<li><a href="#nodejs">Node.js</a></li>
<li><a href="#perl">Perl</a></li>
<li><a href="#php">PHP</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#r">R</a></li>
<li><a href="#restructuredtext">reStructuredText</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#scheme">Scheme</a></li>
<li><a href="#shell">Shell</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#vim">Vim</a></li>
<li><a href="#visual-prolog">Visual Prolog</a></li>
</ul>
</li>
</ul>
<h2 id="语言无关">语言无关</h2><h3 id="在线教育">在线教育</h3><ul>
<li><a href="https://www.codeschool.com" target="_blank" rel="external">CodeSchool</a></li>
<li><a href="http://www.codecademy.com/?locale_code=zh" target="_blank" rel="external">Codecademy</a></li>
<li><a href="https://www.coursera.org/courses?orderby=upcoming&amp;lngs=zh" target="_blank" rel="external">Coursera</a></li>
<li><a href="http://learnxinyminutes.com" target="_blank" rel="external">Learn X in Y minutes</a> (数十种语言快速入门教程)</li>
<li><a href="https://www.shiyanlou.com" target="_blank" rel="external">shiyanlou</a></li>
<li><a href="http://teamtreehouse.com" target="_blank" rel="external">TeamTreeHouse</a></li>
<li><a href="https://www.udacity.com" target="_blank" rel="external">Udacity</a></li>
<li><a href="https://www.xuetangx.com" target="_blank" rel="external">xuetangX</a></li>
<li><a href="http://www.imooc.com/course/list" target="_blank" rel="external">慕课网</a> (丰富的移动端开发、php开发、web前端、html5教程以及css3视频教程等课程资源)</li>
<li><a href="http://www.jikexueyuan.com" target="_blank" rel="external">极客学院</a></li>
<li><a href="http://edu.51cto.com" target="_blank" rel="external">51CTO学院</a></li>
<li><a href="http://www.jisuanke.com" target="_blank" rel="external">计蒜客</a></li>
</ul>
<h3 id="软件开发方法">软件开发方法</h3><ul>
<li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="external">傻瓜函数编程</a> (《Functional Programming For The Rest of Us》中文版)</li>
<li><a href="http://www.infoq.com/cn/minibooks/scrum-xp-from-the-trenches" target="_blank" rel="external">硝烟中的 Scrum 和 XP</a></li>
</ul>
<h3 id="操作系统">操作系统</h3><ul>
<li><a href="http://man.chinaunix.net/linux/debian/reference/reference.zh-cn.html" target="_blank" rel="external">Debian 参考手册 </a></li>
<li><a href="http://wiki.ubuntu.org.cn/UbuntuManual" target="_blank" rel="external">Ubuntu 参考手册 </a></li>
<li><a href="http://www.freebsd.org/doc/zh_CN.UTF-8/books/handbook/" target="_blank" rel="external">FreeBSD 使用手册</a></li>
<li><a href="http://happypeter.github.io/LGCB/book/" target="_blank" rel="external">Linux Guide for Complete Beginners</a></li>
<li><a href="http://cb.vu/unixtoolbox_zh_CN.xhtml" target="_blank" rel="external">UNIX TOOLBOX</a></li>
<li><a href="http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php" target="_blank" rel="external">鸟哥的 Linux 私房菜 基础学习篇</a></li>
<li><a href="http://vbird.dic.ksu.edu.tw/linux_server/" target="_blank" rel="external">鸟哥的 Linux 私房菜 服务器架设篇</a></li>
<li><a href="http://i.linuxtoy.org/docs/guide/index.html" target="_blank" rel="external">开源世界旅行手册</a></li>
<li><a href="http://sourceforge.net/apps/trac/elpi/wiki/ALP" target="_blank" rel="external">Linux 系统高级编程</a></li>
<li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="external">The Linux Command Line</a> (中英文版)</li>
<li><a href="http://oss.org.cn/kernel-book/ldd3/index.html" target="_blank" rel="external">Linux 设备驱动</a> (第三版)</li>
<li><a href="http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html" target="_blank" rel="external">深入分析Linux内核源码</a></li>
<li><a href="http://works.jinbuguo.com/lfs/lfs62/index.html" target="_blank" rel="external">Linux 构建指南</a></li>
<li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="external">Linux工具快速教程</a></li>
<li><a href="http://tinylab.gitbooks.io/linux-doc" target="_blank" rel="external">Linux Documentation (中文版)</a></li>
<li><a href="http://tinylab.gitbooks.io/elinux" target="_blank" rel="external">嵌入式 Linux 知识库 (eLinux.org 中文版)</a></li>
<li><a href="https://github.com/tobegit3hub/understand_linux_process" target="_blank" rel="external">理解Linux进程</a></li>
<li><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="external">Operating Systems: Three Easy Pieces</a></li>
<li><a href="https://www.gitbook.com/book/objectkuan/ucore-docs/details" target="_blank" rel="external">uCore Lab: Operating System Course in Tsinghua University</a></li>
<li><a href="https://github.com/widuu/chinese_docker" target="_blank" rel="external">Docker中文指南</a></li>
<li><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="external">Docker —— 从入门到实践</a></li>
<li><a href="http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1" target="_blank" rel="external">Docker入门实战</a></li>
<li><a href="http://freeradius.akagi201.org" target="_blank" rel="external">FreeRADIUS新手入门</a></li>
<li><a href="http://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="external">Mac 开发配置手册</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="external">命令行的艺术</a></li>
</ul>
<h3 id="版本控制">版本控制</h3><ul>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">Git - 简易指南</a></li>
<li><a href="http://gitbook.liuhui998.com" target="_blank" rel="external">Git Community Book 中文版</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external">Git magic</a></li>
<li><a href="http://gitref.justjavac.com" target="_blank" rel="external">Git 参考手册</a></li>
<li><a href="https://github.com/gotgit/gotgithub" target="_blank" rel="external">Got GitHub</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Pro Git</a></li>
<li><a href="https://www.gitbook.com/book/0532/progit/details" target="_blank" rel="external">Pro Git 中文版</a> (整理在gitbook上)</li>
<li><a href="http://pcottle.github.io/learnGitBranching/" target="_blank" rel="external">学习 Git 分支</a> (点击右下角按钮可切换至简体及正体中文)</li>
<li><a href="http://igit.linuxtoy.org/index.html" target="_blank" rel="external">沉浸式学 Git</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a> （本文由 <a href="http://weibo.com/liaoxuefeng" target="_blank" rel="external">@廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href="https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437" target="_blank" rel="external">iTunes</a> 购买）</li>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能懂的GIT入门</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external">Git Magic</a></li>
<li><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="external">GotGitHub</a></li>
<li><a href="http://mercurial.selenic.com/wiki/ChineseTutorial" target="_blank" rel="external">Mercurial 使用教程</a></li>
<li><a href="http://bucunzai.net/hginit/" target="_blank" rel="external">HgInit (中文版)</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="external">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li>
<li><a href="http://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/index.html" target="_blank" rel="external">GitHub秘籍</a></li>
<li><a href="https://github.com/waylau/github-help" target="_blank" rel="external">Github帮助文档</a></li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="external">git-flow 备忘清单</a></li>
<li><a href="http://svnbook.red-bean.com/nightly/zh/index.html" target="_blank" rel="external">svn 手册</a></li>
</ul>
<h3 id="数据库">数据库</h3><ul>
<li><a href="http://www.redisbook.com" target="_blank" rel="external">Redis 设计与实现</a></li>
<li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn" target="_blank" rel="external">The Little MongoDB Book 中文版</a></li>
</ul>
<h3 id="正则表达式">正则表达式</h3><ul>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
</ul>
<h3 id="智能系统">智能系统</h3><ul>
<li><a href="https://github.com/gmszone/designiot" target="_blank" rel="external">一步步搭建物联网系统</a></li>
</ul>
<h3 id="分布式系统">分布式系统</h3><ul>
<li><a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf" target="_blank" rel="external">走向分布式</a> (PDF)</li>
</ul>
<h3 id="编译原理">编译原理</h3><ul>
<li><a href="https://github.com/DeathKing/Learning-SICP" target="_blank" rel="external">《计算机程序的结构和解释》公开课 翻译项目</a></li>
</ul>
<h3 id="函数式概念">函数式概念</h3><ul>
<li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="external">傻瓜函数编程</a></li>
</ul>
<h3 id="计算机图形学">计算机图形学</h3><ul>
<li><a href="https://github.com/zilongshanren/opengl-tutorials" target="_blank" rel="external">OpenGL 教程</a></li>
</ul>
<h3 id="WEB服务器">WEB服务器</h3><ul>
<li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="external">Nginx开发从入门到精通</a> (淘宝团队出品)</li>
<li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/" target="_blank" rel="external">Nginx教程从入门到精通</a> (PDF版本，运维生存时间出品)</li>
<li><a href="http://works.jinbuguo.com/apache/menu22/index.html" target="_blank" rel="external">Apache 中文手册</a></li>
</ul>
<h3 id="编辑器">编辑器</h3><ul>
<li><a href="http://exvim.github.io/docs-zh/intro/" target="_blank" rel="external">exvim–vim 改良成IDE项目</a></li>
<li><a href="http://learnvimscriptthehardway.onefloweroneworld.com" target="_blank" rel="external">笨方法学Vimscript 中译本</a></li>
<li><a href="https://github.com/vimcn/vimcdoc" target="_blank" rel="external">Vim中文文档</a></li>
<li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="external">所需即所获：像 IDE 一样使用 vim</a></li>
<li><a href="https://github.com/aqua7regia/tmux-Productive-Mouse-Free-Development_zh" target="_blank" rel="external">tmux:高效的全键盘开发工具</a></li>
</ul>
<h3 id="NoSQL">NoSQL</h3><ul>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html" target="_blank" rel="external">NoSQL数据库笔谈</a> (<a href="http://yankaycom-wordpress.stor.sinaapp.com/uploads/2012/12/NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%B0%88v2.pdf" target="_blank" rel="external">PDF</a>)</li>
<li><a href="http://redisbook.com" target="_blank" rel="external">Redis 设计与实现</a></li>
<li><a href="http://www.redisdoc.com" target="_blank" rel="external">Redis 命令参考</a></li>
<li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external">带有详细注释的 Redis 3.0 代码</a></li>
<li><a href="https://github.com/huangz1990/annotated_redis_source" target="_blank" rel="external">带有详细注释的 Redis 2.6 代码</a></li>
<li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md" target="_blank" rel="external">The Little MongoDB Book</a></li>
<li><a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="external">The Little Redis Book</a></li>
<li><a href="http://docs.neo4j.org.cn" target="_blank" rel="external">Neo4j 简体中文手册 v1.8</a></li>
<li><a href="http://neo4j.tw" target="_blank" rel="external">Neo4j .rb 中文資源</a></li>
<li><a href="http://disquebook.com" target="_blank" rel="external">Disque 使用教程</a></li>
</ul>
<h3 id="PostgreSQL">PostgreSQL</h3><ul>
<li><a href="http://works.jinbuguo.com/postgresql/menu823/index.html" target="_blank" rel="external">PostgreSQL 8.2.3 中文文档</a></li>
<li><a href="http://www.postgres.cn/docs/9.3/index.html" target="_blank" rel="external">PostgreSQL 9.3.1 中文文档</a></li>
</ul>
<h3 id="MySQL">MySQL</h3><ul>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">MySQL索引背后的数据结构及算法原理</a></li>
<li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="external">21分钟MySQL入门教程</a></li>
</ul>
<h3 id="管理和监控">管理和监控</h3><ul>
<li><a href="http://kibana.logstash.es" target="_blank" rel="external">ELKstack 中文指南</a></li>
<li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="external">Mastering Elasticsearch(中文版)</a></li>
<li><a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="external">ElasticSearch 权威指南</a></li>
<li><a href="http://es.xiaoleilu.com" target="_blank" rel="external">Elasticsearch 权威指南（中文版）</a></li>
<li><a href="https://github.com/chenryn/logstash-best-practice-cn" target="_blank" rel="external">Logstash 最佳实践</a></li>
<li><a href="http://bbs.konotes.org/workdoc/puppet-27/" target="_blank" rel="external">Puppet 2.7 Cookbook 中文版</a></li>
</ul>
<h3 id="项目相关">项目相关</h3><ul>
<li><a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="external">持续集成（第二版）</a> (译言网)</li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-ap/" target="_blank" rel="external">让开发自动化系列专栏</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="external">追求代码质量</a></li>
<li><a href="https://github.com/fool2fish/selenium-doc" target="_blank" rel="external">selenium 中文文档</a></li>
<li><a href="http://local.joelonsoftware.com/wiki/Chinese_(Simplified" target="_blank" rel="external">Joel谈软件</a>)</li>
<li><a href="http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81" target="_blank" rel="external">約耳談軟體(Joel on Software)</a></li>
<li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="external">Gradle 2 用户指南</a></li>
<li><a href="http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2" target="_blank" rel="external">Gradle 中文使用文档</a></li>
<li><a href="https://github.com/ecomfe/spec" target="_blank" rel="external">编码规范</a></li>
<li><a href="http://www.ituring.com.cn/book/1143" target="_blank" rel="external">开源软件架构</a></li>
<li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external">GNU make 指南</a></li>
</ul>
<h3 id="设计模式">设计模式</h3><ul>
<li><a href="https://github.com/me115/design_patterns" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="http://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="external">史上最全设计模式导学目录</a></li>
</ul>
<h3 id="Web">Web</h3><ul>
<li><a href="http://www.20thingsilearned.com/zh-CN/home" target="_blank" rel="external">关于浏览器和网络的 20 项须知</a></li>
<li><a href="http://jinlong.github.io/2013/08/29/devtoolsecrets/" target="_blank" rel="external">浏览器开发工具的秘密</a></li>
<li><a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank" rel="external">Chrome 开发者工具中文手册</a></li>
<li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="external">Chrome扩展开发文档</a></li>
<li><a href="http://www.gruntjs.net" target="_blank" rel="external">Grunt中文文档</a></li>
<li><a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="external">gulp中文文档</a></li>
<li><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="external">Gulp 入门指南</a></li>
<li><a href="http://yeomanjs.org" target="_blank" rel="external">Yeoman中文文档</a></li>
<li><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="external">移动Web前端知识库</a></li>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="external">前端开发体系建设日记</a></li>
<li><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="external">移动前端开发收藏夹</a></li>
<li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">JSON风格指南</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external">HTTP 接口设计指北</a></li>
<li><a href="https://github.com/hacke2/hacke2.github.io/issues/1" target="_blank" rel="external">前端资源分享（一）</a></li>
<li><a href="https://github.com/hacke2/hacke2.github.io/issues/3" target="_blank" rel="external">前端资源分享（二）</a></li>
<li><a href="http://coderlmn.github.io/code-standards/" target="_blank" rel="external">前端代码规范 及 最佳实践</a></li>
<li><a href="http://man.lupaworld.com/content/network/wireshark/index.html" target="_blank" rel="external">Wireshark用户手册</a></li>
<li><a href="https://community.emc.com/thread/194901" target="_blank" rel="external">一站式学习Wireshark</a></li>
<li><a href="http://happypeter.github.io/tealeaf-http/" target="_blank" rel="external">HTTP 下午茶</a></li>
<li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="external">HTTP/2.0 中文翻译</a></li>
<li><a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="external">http2讲解</a></li>
<li><a href="https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details" target="_blank" rel="external">3 Web Designs in 3 Weeks</a></li>
</ul>
<h3 id="大数据">大数据</h3><ul>
<li><a href="https://github.com/Flowerowl/Big-Data-Resources" target="_blank" rel="external">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li>
<li><a href="https://github.com/jizhang/guidetodatamining" target="_blank" rel="external">面向程序员的数据挖掘指南</a></li>
<li><a href="https://code.csdn.net/CODE_Translation/spark_matei_phd" target="_blank" rel="external">大型集群上的快速和通用数据处理架构</a></li>
<li><a href="https://github.com/linyiqun/DataMiningAlgorithm" target="_blank" rel="external">数据挖掘中经典的算法实现和详细的注释</a></li>
<li><a href="https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/" target="_blank" rel="external">Spark 编程指南简体中文版</a></li>
</ul>
<h3 id="编程艺术">编程艺术</h3><ul>
<li><a href="http://huyuefeng.me/intro-to-prog/" target="_blank" rel="external">编程入门指南</a></li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-by-July" target="_blank" rel="external">程序员编程艺术</a></li>
<li><a href="http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print" target="_blank" rel="external">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li>
<li><a href="http://read.douban.com/ebook/4972883/" target="_blank" rel="external">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li>
<li><a href="http://xiaobeicn.gitbooks.io/programming-skills-summary/" target="_blank" rel="external">编程技巧总汇</a></li>
</ul>
<h3 id="其它">其它</h3><ul>
<li><a href="http://softwaredownload.gitbooks.io/openwrt-fanqiang/" target="_blank" rel="external">OpenWrt智能、自动、透明翻墙路由器教程</a></li>
<li><a href="https://community.emc.com/docs/DOC-16067" target="_blank" rel="external">SAN 管理入门系列</a></li>
<li><a href="http://sketchcn.com/sketch-chinese-user-manual.html#introduce" target="_blank" rel="external">Sketch 中文手册</a></li>
<li><a href="http://ifeve.com/perfbook/" target="_blank" rel="external">深入理解并行编程</a></li>
</ul>
<h2 id="语言相关">语言相关</h2><h3 id="Android">Android</h3><ul>
<li><a href="http://www.apkbus.com/design/index.html" target="_blank" rel="external">Android Design(中文版)</a></li>
<li>Google Material Design 正體中文版 (<a href="http://wcc723.gitbooks.io/google_design_translate/content/style-icons.html" target="_blank" rel="external">译本一</a> <a href="https://github.com/1sters/material_design_zh" target="_blank" rel="external">译本二</a>)</li>
<li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external">Material Design 中文版</a></li>
<li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Google Android官方培训课程中文版</a></li>
<li><a href="http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路</a></li>
<li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="external">Android开发技术前线(android-tech-frontier)</a></li>
<li><a href="https://github.com/FX-Max/Point-of-Android" target="_blank" rel="external">Point-of-Android</a> Android 一些重要知识点解析整理</li>
<li><a href="http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">Android6.0新特性详解</a></li>
</ul>
<h3 id="AWK">AWK</h3><ul>
<li><a href="https://github.com/wuzhouhui/awk" target="_blank" rel="external">awk程序设计语言</a></li>
<li><a href="http://awk.readthedocs.org/en/latest/index.html" target="_blank" rel="external">awk中文指南</a></li>
</ul>
<h3 id="C">C</h3><ul>
<li><a href="http://c-faq-chn.sourceforge.net/ccfaq/ccfaq.html" target="_blank" rel="external">C 语言常见问题集</a></li>
<li><a href="http://doc.lellansin.com" target="_blank" rel="external">C/C++ 学习教程</a></li>
<li><a href="https://github.com/limingth/NCCL" target="_blank" rel="external">新概念 C 语言教程</a></li>
<li><a href="http://docs.linuxtone.org/ebooks/C&amp;CPP/c/" target="_blank" rel="external">Linux C 编程一站式学习</a></li>
</ul>
<h3 id="C++">C++</h3><ul>
<li><a href="https://github.com/wuye9036/CppTemplateTutorial" target="_blank" rel="external">C++ Template 进阶指南</a></li>
<li><a href="http://www.prglab.com/cms/" target="_blank" rel="external">C++ 基础教程</a></li>
<li><a href="https://github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial" target="_blank" rel="external">C++ 并发编程指南</a></li>
<li><a href="http://www.ituring.com.cn/book/1203" target="_blank" rel="external">像计算机科学家一样思考（C++版)</a> (《How To Think Like a Computer Scientist: C++ Version》中文版)</li>
<li><a href="http://tinylab.gitbooks.io/cbook" target="_blank" rel="external">C 语言编程透视</a></li>
<li><a href="https://github.com/leeyiw/cgdb-manual-in-chinese" target="_blank" rel="external">CGDB中文手册</a></li>
<li><a href="https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md" target="_blank" rel="external">100个gdb小技巧</a></li>
<li><a href="https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md" target="_blank" rel="external">100个gcc小技巧</a></li>
<li><a href="https://github.com/anjuke/zguide-cn" target="_blank" rel="external">ZMQ 指南</a></li>
<li><a href="http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf" target="_blank" rel="external">跟我一起写Makefile(PDF)</a> (PDF)</li>
<li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external">GNU make 指南</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="external">Google C++ 风格指南</a></li>
<li><a href="https://github.com/andycai/cprimer" target="_blank" rel="external">C/C++ Primer</a> (by @andycai)</li>
<li><a href="http://www.nowamagic.net/librarys/books/contents/c" target="_blank" rel="external">简单易懂的C魔法</a></li>
<li><a href="http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf" target="_blank" rel="external">Cmake 实践</a> (PDF版)</li>
<li><a href="http://www.sunistudio.com/cppfaq/" target="_blank" rel="external">C++ FAQ LITE(中文版)</a></li>
<li><a href="https://github.com/Mooophy/Cpp-Primer" target="_blank" rel="external">C++ Primer 5th Answers</a></li>
<li><a href="http://chenxiaowei.gitbooks.io/cpp_concurrency_in_action/" target="_blank" rel="external">C++ 并发编程(基于C++11)</a></li>
<li><a href="http://www.kuqin.com/qtdocument/tutorial.html" target="_blank" rel="external">QT 教程</a></li>
</ul>
<h3 id="CoffeeScript">CoffeeScript</h3><ul>
<li><a href="http://coffee-script.org" target="_blank" rel="external">CoffeeScript 中文</a></li>
<li><a href="https://github.com/elrrrrrrr/coffeescript-style-guide/blob/master/README-ZH.md" target="_blank" rel="external">CoffeeScript 编程风格指南</a></li>
</ul>
<h3 id="Dart">Dart</h3><ul>
<li><a href="http://dart.lidian.info/wiki/Language_Tour" target="_blank" rel="external">Dart 语言导览</a></li>
</ul>
<h3 id="Elasticsearch">Elasticsearch</h3><ul>
<li><a href="https://github.com/looly/elasticsearch-definitive-guide-cn" target="_blank" rel="external">Elasticsearch 权威指南</a> （《Elasticsearch the definitive guide》中文版）</li>
<li><a href="http://kibana.logstash.es" target="_blank" rel="external">ELKstack 中文指南</a></li>
<li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="external">Mastering Elasticsearch(中文版)</a></li>
</ul>
<h3 id="Erlang">Erlang</h3><ul>
<li><a href="https://github.com/liancheng/cpie-cn" target="_blank" rel="external">Erlang 并发编程</a> (《Concurrent Programming in Erlang (Part I)》中文版)</li>
</ul>
<h3 id="Fortran">Fortran</h3><ul>
<li><a href="http://micro.ustc.edu.cn/Fortran/ZJDing/" target="_blank" rel="external">Fortran77和90/95编程入门</a></li>
</ul>
<h3 id="Golang">Golang</h3><ul>
<li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="external">Go Web 编程</a></li>
<li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="external">Go 入门指南</a> (《The Way to Go》中文版)</li>
<li><a href="http://go-tour-zh.appsp0t.com" target="_blank" rel="external">Go 指南</a> (《A Tour of Go》中文版)</li>
<li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="external">Go 编程基础</a></li>
<li><a href="http://mikespook.com/learning-go/" target="_blank" rel="external">学习Go语言</a></li>
<li><a href="https://github.com/astaxie/Go-in-Action" target="_blank" rel="external">Go实战开发</a> (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者<a href="https://me.alipay.com/astaxie" target="_blank" rel="external">捐赠</a>，以鼓励作者的继续创作)</li>
<li><a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="external">Network programming with Go 中文翻译版本</a></li>
<li><a href="http://www.hellogcc.org/effective_go.html" target="_blank" rel="external">Effective Go</a></li>
<li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example" target="_blank" rel="external">Go 语言标准库</a></li>
<li><a href="http://gorevel.cn/docs/manual/index.html" target="_blank" rel="external">Revel 框架手册</a></li>
<li><a href="http://blog.csdn.net/dc_726/article/details/46565241" target="_blank" rel="external">Java程序员的Golang入门指南</a></li>
<li><a href="https://github.com/hyper-carrot/go_command_tutorial" target="_blank" rel="external">Go命令教程</a></li>
<li><a href="https://github.com/achun/Go-Blog-In-Action" target="_blank" rel="external">Go语言博客实践</a></li>
<li><a href="https://github.com/golang-china/golangdoc.translations" target="_blank" rel="external">Go 官方文档翻译</a></li>
</ul>
<h3 id="Groovy">Groovy</h3><ul>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-pg/" target="_blank" rel="external">实战 Groovy 系列</a></li>
</ul>
<h3 id="Haskell">Haskell</h3><ul>
<li><a href="http://learnyouahaskell-zh-tw.csie.org" target="_blank" rel="external">Haskell 趣学指南</a></li>
<li><a href="http://rwh.readthedocs.org/en/latest/" target="_blank" rel="external">Real World Haskell 中文版</a></li>
</ul>
<h3 id="HTML_/_CSS">HTML / CSS</h3><ul>
<li><a href="http://zh.learnlayout.com" target="_blank" rel="external">学习CSS布局</a></li>
<li><a href="https://github.com/chadluo/CSS-Guidelines/blob/master/README.md" target="_blank" rel="external">通用 CSS 笔记、建议与指导</a></li>
<li><a href="http://css.doyoe.com" target="_blank" rel="external">CSS参考手册</a></li>
<li><a href="https://github.com/waylau/css3-tutorial" target="_blank" rel="external">CSS3 Tutorial 《CSS3 教程》</a></li>
<li><a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="external">Emmet 文档</a></li>
<li><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="external">前端代码规范</a> (腾讯 AlloyTeam 团队)</li>
<li><a href="http://codeguide.bootcss.com" target="_blank" rel="external">HTML和CSS编码规范</a></li>
<li><a href="http://www.w3school.com.cn/html5/" target="_blank" rel="external">HTML5 教程</a></li>
<li><a href="http://sass-guidelin.es/zh/" target="_blank" rel="external">Sass Guidelines 中文</a></li>
</ul>
<h3 id="HTTP">HTTP</h3><ul>
<li><a href="http://happypeter.github.io/tealeaf-http" target="_blank" rel="external">HTTP 下午茶</a></li>
</ul>
<h3 id="iOS">iOS</h3><ul>
<li><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="external">iOS开发60分钟入门</a></li>
<li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="external">iOS7人机界面指南</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="external">Google Objective-C Style Guide 中文版</a></li>
<li><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="external">iPhone 6 屏幕揭秘</a></li>
<li><a href="http://nilsun.github.io/apple-watch/" target="_blank" rel="external">Apple Watch开发初探</a></li>
<li><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/index.html" target="_blank" rel="external">马上着手开发 iOS 应用程序</a></li>
<li><a href="https://github.com/jkyin/Subtitle" target="_blank" rel="external">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li>
</ul>
<h3 id="Java">Java</h3><ul>
<li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="external">Apache Shiro 用户指南</a></li>
<li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="external">Jersey 2.x 用户指南</a></li>
<li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="external">Spring Framework 4.x参考文档</a></li>
<li><a href="https://github.com/qibaoguang/Spring-Boot-Reference-Guide" target="_blank" rel="external">Spring Boot参考指南</a> (翻译中)</li>
<li><a href="http://mybatis.github.io/mybatis-3/zh/index.html" target="_blank" rel="external">MyBatis中文文档</a></li>
<li><a href="https://github.com/waylau/RestDemo" target="_blank" rel="external">用jersey构建REST服务</a></li>
<li><a href="https://github.com/waylau/activiti-5.x-user-guide" target="_blank" rel="external">Activiti 5.x 用户指南</a></li>
<li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external">Google Java编程风格指南</a></li>
<li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="external">Netty 4.x 用户指南</a></li>
<li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="external">Netty 实战(精髓)</a></li>
<li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="external">REST 实战</a></li>
<li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="external">Java 编码规范</a></li>
<li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="external">Apache MINA 2 用户指南</a></li>
<li><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="external">H2 Database 教程</a></li>
<li><a href="https://github.com/waylau/servlet-3.1-specification" target="_blank" rel="external">Java Servlet 3.1 规范</a></li>
<li><a href="https://github.com/waylau/jsse-reference-guide" target="_blank" rel="external">JSSE 参考指南</a></li>
</ul>
<h3 id="Javascript">Javascript</h3><ul>
<li><a href="http://typeof.net/s/jsmech/" target="_blank" rel="external">Javascript 原理</a></li>
<li><a href="http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html" target="_blank" rel="external">Google JavaScript 代码风格指南</a></li>
<li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">Google JSON 风格指南</a></li>
<li><a href="https://github.com/adamlu/javascript-style-guide" target="_blank" rel="external">Airbnb JavaScript 规范</a></li>
<li><a href="http://javascript.ruanyifeng.com" target="_blank" rel="external">JavaScript 标准参考教程（alpha）</a></li>
<li><a href="http://pij.robinqu.me" target="_blank" rel="external">Javascript编程指南</a> (<a href="https://github.com/RobinQu/Programing-In-Javascript" target="_blank" rel="external">源码</a>)</li>
<li><a href="https://github.com/justjavac/12-javascript-quirks" target="_blank" rel="external">javascript 的 12 个怪癖</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">JavaScript 秘密花园</a></li>
<li><a href="http://icodeit.org/jsccp/" target="_blank" rel="external">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li>
<li><a href="https://github.com/jayli/javascript-patterns" target="_blank" rel="external">《JavaScript 模式》</a> “JavaScript patterns”中译本</li>
<li><a href="http://justjavac.com/named-function-expressions-demystified.html" target="_blank" rel="external">命名函数表达式探秘</a>  (注:原文由<a href="http://www.cn-cuckoo.com" target="_blank" rel="external">为之漫笔</a>翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li>
<li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="external">学用 JavaScript 设计模式</a> (开源中国)</li>
<li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">深入理解JavaScript系列</a></li>
<li><a href="http://es6.ruanyifeng.com" target="_blank" rel="external">ECMAScript 6 入门</a> (作者：阮一峰)</li>
<li><a href="http://liubin.github.io/promises-book/" target="_blank" rel="external">JavaScript Promise迷你书</a></li>
<li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You-Dont-Know-JS</a> (深入JavaScript语言核心机制的系列图书)</li>
<li>jQuery<ul>
<li><a href="http://www.nowamagic.net/librarys/books/contents/jquery" target="_blank" rel="external">简单易懂的JQuery魔法</a></li>
<li><a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="external">How to write jQuery plugin</a></li>
</ul>
</li>
<li>Node.js<ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node入门</a></li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="https://github.com/nodejs-tw/nodejs-wiki-book" target="_blank" rel="external">Nodejs Wiki Book</a> (繁体中文)</li>
<li><a href="http://expressjs.jser.us" target="_blank" rel="external">express.js 中文文档</a></li>
<li><a href="https://github.com/turingou/koa-guide" target="_blank" rel="external">koa 中文文档</a></li>
<li><a href="https://github.com/nswbmw/N-blog" target="_blank" rel="external">使用 Express + MongoDB 搭建多人博客</a></li>
<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="external">Express框架</a></li>
<li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="external">Node.js 包教不包会</a></li>
<li><a href="https://www.npmjs.org/package/learnyounode-zh-cn" target="_blank" rel="external">Learn You The Node.js For Much Win! (中文版)</a></li>
<li><a href="http://i5ting.github.io/node-debug-tutorial/" target="_blank" rel="external">Node debug 三法三例</a></li>
<li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external">nodejs中文文档</a></li>
</ul>
</li>
<li>underscore.js<ul>
<li><a href="http://learningcn.com/underscore/" target="_blank" rel="external">Underscore.js中文文档</a></li>
</ul>
</li>
<li>backbone.js<ul>
<li><a href="http://www.css88.com/doc/backbone/" target="_blank" rel="external">backbone.js中文文档</a></li>
<li><a href="http://www.the5fire.com/backbone-js-tutorials-pdf-download.html" target="_blank" rel="external">backbone.js入门教程</a> (PDF)</li>
<li><a href="https://github.com/the5fire/backbonejs-learning-note" target="_blank" rel="external">Backbone.js入门教程第二版</a></li>
<li><a href="http://feliving.github.io/developing-backbone-applications" target="_blank" rel="external">Developing Backbone.js Applications(中文版)</a></li>
</ul>
</li>
<li>AngularJS<ul>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external">AngularJS最佳实践和风格指南</a></li>
<li><a href="https://github.com/peiransun/angularjs-cn" target="_blank" rel="external">AngularJS中译本</a></li>
<li><a href="https://github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="external">AngularJS入门教程</a></li>
<li><a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="external">构建自己的AngularJS</a></li>
<li><a href="http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/" target="_blank" rel="external">在Windows环境下用Yeoman构建AngularJS项目</a></li>
</ul>
</li>
<li>Zepto.js<ul>
<li><a href="http://mweb.baidu.com/zeptoapi/" target="_blank" rel="external">Zepto.js 中文文档</a></li>
</ul>
</li>
<li>React.js<ul>
<li><a href="http://reactjs.cn" target="_blank" rel="external">React.js 中文文档</a></li>
<li><a href="https://github.com/fakefish/react-webpack-cookbook" target="_blank" rel="external">React webpack-cookbook</a></li>
<li><a href="http://fraserxu.me/intro-to-react/" target="_blank" rel="external">React 入门教程</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/react-native/" target="_blank" rel="external">React Native 中文文档(含最新Android内容)</a></li>
</ul>
</li>
<li>impress.js<ul>
<li><a href="https://github.com/kokdemo/impress.js-tutorial-in-Chinese" target="_blank" rel="external">impress.js的中文教程</a></li>
</ul>
</li>
<li>CoffeeScript<ul>
<li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="external">CoffeeScript 编码风格指南</a></li>
</ul>
</li>
<li>ExtJS<ul>
<li><a href="http://extjs-doc-cn.github.io/ext4api/" target="_blank" rel="external">Ext4.1.0 中文文档</a></li>
</ul>
</li>
<li>Meteor<ul>
<li><a href="http://zh.discovermeteor.com" target="_blank" rel="external">Discover Meteor</a></li>
</ul>
</li>
<li>D3.js<ul>
<li><a href="https://github.com/mbostock/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C" target="_blank" rel="external">官方API文档</a></li>
<li><a href="http://www.pkuwwt.tk/d3-tutorial-cn/about.html" target="_blank" rel="external">pkuwwt的D3教程</a></li>
<li><a href="http://blog.csdn.net/zhang__tianxu/article/category/1623437" target="_blank" rel="external">张天旭的D3教程</a></li>
<li><a href="http://www.cnblogs.com/winleisure/tag/D3.js/" target="_blank" rel="external">楚狂人的D3教程</a></li>
<li><a href="http://www.ourd3js.com/wordpress/?cat=2" target="_blank" rel="external">D3.js 入门系列</a> (还有进阶、高级等系列)</li>
</ul>
</li>
<li><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="external">Chrome扩展及应用开发</a></li>
</ul>
<h3 id="LaTeX">LaTeX</h3><ul>
<li><a href="http://www.dralpha.com/zh/tech/tech.htm" target="_blank" rel="external">LaTeX 笔记</a></li>
<li><a href="http://ctan.org/pkg/lshort-zh-cn" target="_blank" rel="external">一份不太简短的 LaTeX2ε 介绍</a></li>
<li><a href="http://web.math.isu.edu.tw/yeh/HowTo/HowToTex/latex123.pdf" target="_blank" rel="external">大家來學 LaTeX</a> (PDF)</li>
</ul>
<h3 id="LISP">LISP</h3><ul>
<li><a href="http://acl.readthedocs.org/en/latest/" target="_blank" rel="external">ANSI Common Lisp 中文翻译版</a></li>
<li><a href="http://www.ituring.com.cn/minibook/862" target="_blank" rel="external">Common Lisp 高级编程技术</a> (《On Lisp》中文版)</li>
</ul>
<h3 id="Lua">Lua</h3><ul>
<li><a href="http://www.w3cschool.cc/manual/lua53doc/contents.html" target="_blank" rel="external">Lua 5.3 参考手册</a></li>
</ul>
<h3 id="Markdown">Markdown</h3><ul>
<li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="external">Markdown 快速入门</a></li>
<li><a href="http://jianshu.io/p/7bd23251da0a" target="_blank" rel="external">Markdown 简明教程</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 语法说明</a></li>
<li><a href="http://jianshu.io/p/q81RER" target="_blank" rel="external">献给写作者的 Markdown 新手指南</a></li>
</ul>
<h3 id="Node-js">Node.js</h3><ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node 入门</a></li>
<li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external">The NodeJS 中文文档</a>（社区翻译）</li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a> 阿里出品，很好的入门资料</li>
</ul>
<h3 id="Perl">Perl</h3><ul>
<li><a href="https://github.com/fayland/chinese-perl-book" target="_blank" rel="external">Master Perl Today</a></li>
<li><a href="http://www.cbi.pku.edu.cn/chinese/documents/perl/index.htm" target="_blank" rel="external">Perl 5 教程</a></li>
<li><a href="http://www.yiibai.com/perl" target="_blank" rel="external">Perl 教程</a></li>
<li><a href="https://github.com/horus/modern_perl_book" target="_blank" rel="external">《Modern Perl》中文版</a></li>
</ul>
<h3 id="PHP">PHP</h3><ul>
<li><a href="http://www.php-internals.com/book/" target="_blank" rel="external">深入理解 PHP 内核</a></li>
<li><a href="http://php.net/manual/zh/" target="_blank" rel="external">PHP5中文手册</a></li>
<li><a href="http://www.walu.cc/phpbook/preface.md" target="_blank" rel="external">PHP扩展开发及内核应用</a></li>
<li><a href="http://wusuopu.gitbooks.io/symfony2_tutorial/content" target="_blank" rel="external">Symfony2 实例教程</a></li>
<li><a href="http://wulijun.github.io/php-the-right-way/" target="_blank" rel="external">PHP 之道</a></li>
</ul>
<h3 id="Python">Python</h3><ul>
<li><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="external">Django book 2.0</a></li>
<li><a href="http://docspy3zh.readthedocs.org/en/latest/" target="_blank" rel="external">Python 3 文档(简体中文) 3.2.2 documentation</a></li>
<li><a href="http://www.pythondoc.com" target="_blank" rel="external">Python 中文学习大本营</a></li>
<li><a href="http://woodpecker.org.cn/diveintopython/" target="_blank" rel="external">深入 Python</a></li>
<li><a href="http://woodpecker.org.cn/diveintopython3/" target="_blank" rel="external">深入 Python 3</a></li>
<li><a href="http://sebug.net/paper/books/LearnPythonTheHardWay/" target="_blank" rel="external">笨办法学 Python</a></li>
<li><a href="http://woodpecker.org.cn/abyteofpython_cn/chinese/" target="_blank" rel="external">简明 Python 教程</a> (《A Byte of Python》中文版)</li>
</ul>
<h3 id="R">R</h3><ul>
<li><a href="http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf" target="_blank" rel="external">R 导论</a> (《An Introduction to R》中文版) (PDF)</li>
<li><a href="http://cran.r-project.org/doc/contrib/Liu-FAQ.pdf" target="_blank" rel="external">153分钟学会 R</a> (PDF)</li>
<li><a href="http://www.biosino.org/R/R-doc/files/R4beg_cn_2.0.pdf" target="_blank" rel="external">《R for beginners》中文版</a> (PDF)</li>
<li><a href="http://yanping.me/shiny-tutorial/" target="_blank" rel="external">用 R 构建 Shiny 应用程序</a> (《Building ‘Shiny’ Applications with R》中文版)</li>
<li><a href="http://cran.r-project.org/doc/contrib/Xu-Statistics_and_R.pdf" target="_blank" rel="external">统计学与 R 读书笔记</a> (PDF)</li>
</ul>
<h3 id="reStructuredText">reStructuredText</h3><ul>
<li><a href="http://www.pythondoc.com/sphinx/rest.html" target="_blank" rel="external">reStructuredText 入门</a></li>
<li><a href="http://jwch.sdut.edu.cn/book/rst.html" target="_blank" rel="external">reStructuredText 简明教程</a></li>
</ul>
<h3 id="Ruby">Ruby</h3><ul>
<li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Rails 风格指南</a></li>
<li><a href="http://railstutorial-china.org" target="_blank" rel="external">Ruby on Rails Tutorial 原书第 2 版</a></li>
<li><a href="http://ihower.tw/rails4/" target="_blank" rel="external">Ruby on Rails 实战圣经</a></li>
<li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Ruby 风格指南</a></li>
<li><a href="http://lrthw.github.io" target="_blank" rel="external">笨方法学 Ruby</a></li>
</ul>
<h3 id="Scala">Scala</h3><ul>
<li><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="external">Effective Scala</a></li>
<li><a href="http://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="external">Scala 课堂</a> (Twitter的Scala中文教程)</li>
<li><a href="https://www.gitbook.com/book/windor/beginners-guide-to-scala/details" target="_blank" rel="external">Scala 初学者指南</a> (The Neophyte’s Guide to Scala)</li>
</ul>
<h3 id="Scheme">Scheme</h3><ul>
<li><a href="http://deathking.github.io/yast-cn/" target="_blank" rel="external">Scheme 入门教程</a> (《Yet Another Scheme Tutorial》中文版)</li>
<li><a href="http://r6rs.mrliu.org" target="_blank" rel="external">算法语言Scheme修订<sup>6</sup>报告</a>（R<sup>6</sup>RS简体中文翻译）</li>
</ul>
<h3 id="Shell">Shell</h3><ul>
<li><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80" target="_blank" rel="external">Shell 编程基础</a></li>
<li><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external">Shell 脚本编程30分钟入门</a></li>
<li><a href="http://billie66.github.io/TLCL/book/zh" target="_blank" rel="external">The Linux Command Line 中文版</a></li>
</ul>
<h3 id="Swift">Swift</h3><ul>
<li><a href="https://www.gitbook.io/book/numbbbbb/-the-swift-programming-language-" target="_blank" rel="external">《The Swift Programming Language》中文版</a></li>
</ul>
<h3 id="Vim">Vim</h3><ul>
<li><a href="http://www.study-area.org/tips/vim/index.html" target="_blank" rel="external">大家來學 VIM</a></li>
<li><a href="http://man.chinaunix.net/newsoft/vi/doc/help.html" target="_blank" rel="external">Vim Manual(中文版)</a></li>
</ul>
<h3 id="Visual_Prolog">Visual Prolog</h3><ul>
<li><a href="http://wiki.visual-prolog.com/index.php?title=A_Beginners_Guide_to_Visual_Prolog_in_Chinese" target="_blank" rel="external">Visual Prolog 7初学指南</a></li>
<li><a href="http://wiki.visual-prolog.com/index.php?title=Visual_Prolog_for_Tyros_in_Chinese" target="_blank" rel="external">Visual Prolog 7边练边学</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[免费编程书籍]]>
    
    </summary>
    
      <category term="books" scheme="http://miclee.cn/tags/books/"/>
    
      <category term="blog" scheme="http://miclee.cn/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JAVA的23种设计模式(三)]]></title>
    <link href="http://miclee.cn/2015/08/27/java-design-pattern-3/"/>
    <id>http://miclee.cn/2015/08/27/java-design-pattern-3/</id>
    <published>2015-08-27T09:18:22.000Z</published>
    <updated>2015-12-14T02:37:20.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 行为型模式 11种 </em></strong><br><a id="more"></a></p>
<hr>
<p>  本章是关于设计模式的最后一讲，会讲到第三种设计模式——行为型模式，共11种，这11种模式的关系：</p>
<ul>
<li><p>第一类：通过父类与子类的关系进行实现</p>
<ul>
<li>策略模式</li>
<li>模板方法模式</li>
</ul>
</li>
<li><p>第二类：两个类之间</p>
<ul>
<li>观察者模式</li>
<li>迭代子模式</li>
<li>责任链模式</li>
<li>命令模式</li>
</ul>
</li>
<li><p>第三类：类的状态</p>
<ul>
<li>备忘录模式</li>
<li>状态模式</li>
</ul>
</li>
<li><p>第四类：通过中间类</p>
<ul>
<li>访问者模式</li>
<li>中介者模式</li>
<li>解释器模式</li>
</ul>
</li>
</ul>
<ol>
<li><p>策略模式（strategy）<br>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。<br>需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口。<br>策略模式的决定权在用户，系统本身提供不同算法的实现，新增或者删除算法，对各种算法做封装。因此，策略模式多用在算法决策系统中，外部用户只需要决定用哪个算法即可。<br>其实本质就是定义个接口，并提供不同的实现。</p>
</li>
<li><p>模板方法模式（Template Method）<br>模板方法模式就是指：一个抽象类中，有一个主方法，再定义1…n个方法，可以是抽象的，也可以是实际的方法。<br>定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用</p>
</li>
<li><p>观察者模式（Observer）<br>包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承。<br>观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你订阅了该文章，如果后续有更新，会及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[行为型模式 11种]]>
    
    </summary>
    
      <category term="java" scheme="http://miclee.cn/tags/java/"/>
    
      <category term="java" scheme="http://miclee.cn/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JAVA的23种设计模式(一)]]></title>
    <link href="http://miclee.cn/2015/08/27/java-design-pattern-1/"/>
    <id>http://miclee.cn/2015/08/27/java-design-pattern-1/</id>
    <published>2015-08-27T09:18:22.000Z</published>
    <updated>2015-08-28T09:09:12.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 创建型模式 五种 </em></strong><br><a id="more"></a></p>
<hr>
<p><strong>设计模式（Design pattern）</strong> 是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因。</p>
<h2 id="设计模式的分类">设计模式的分类</h2><ul>
<li><p>创建型模式 五种</p>
<ul>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
<li>单例模式</li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>
</li>
<li><p>结构型模式 七种</p>
<ul>
<li>适配器模式</li>
<li>装饰器模式</li>
<li>代理模式</li>
<li>外观模式</li>
<li>桥接模式</li>
<li>组合模式</li>
<li>享元模式</li>
</ul>
</li>
<li><p>行为型模式 十一种</p>
<ul>
<li>策略模式</li>
<li>模板方法模式</li>
<li>观察者模式</li>
<li>迭代子模式</li>
<li>责任链模式</li>
<li>命令模式</li>
<li>备忘录模式</li>
<li>状态模式</li>
<li>访问者模式</li>
<li>中介者模式</li>
<li>解释器模式</li>
</ul>
</li>
<li><p>其实还有两类：并发型模式和线程池模式</p>
</li>
</ul>
<p><strong><em> 用一张图来表示下设计模式之间的关系：</em></strong> <img src="https://raw.githubusercontent.com/OfMicLee/img-hosting/master/java/java-design.png" alt="java-design"></p>
<h2 id="设计模式的六大原则">设计模式的六大原则</h2><ol>
<li><p>开闭原则（Open Close Principle）</p>
<p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类</p>
</li>
<li><p>里氏替换原则（Liskov Substitution Principle）</p>
<p>任何基类可以出现的地方，子类一定可以出现。<br>里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>
</li>
<li><p>依赖倒转原则（Dependence Inversion Principle）</p>
<p>这个是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>
</li>
<li><p>接口隔离原则（Interface Segregation Principle）</p>
<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p>
</li>
<li><p>迪米特原则（最少知道原则）（Demeter Principle）</p>
<p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
</li>
<li><p>合成复用原则（Composite Reuse Principle）</p>
<p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p>
</li>
</ol>
<h2 id="Java的23中设计模式">Java的23中设计模式</h2><ol>
<li><p>工厂方法模式（Factory Method）</p>
<ul>
<li><p>普通工厂模式</p>
<p>就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。</p>
</li>
<li><p>多个工厂方法模式</p>
<p>多个工厂方法模式是在一个工厂类里提供多个工厂方法，分别创建不同的对象</p>
</li>
<li><p>静态工厂方法模式</p>
<p>创建实例对象的方法为static， 一般情况下会采用这种模式</p>
</li>
</ul>
</li>
<li><p>抽象工厂模式（Abstract Factory）</p>
<p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，<br>所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，<br>直接增加新的工厂类就可以了，不需要修改之前的代码。<br>简而言之，就是将原先的工厂类设计为Interface，实例不同对象用不同的工厂实例。</p>
</li>
<li><p>单例模式（Singleton）</p>
<p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：</p>
<ul>
<li>某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</li>
<li>省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</li>
<li>有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</li>
</ul>
</li>
<li><p>建造者模式（Builder）</p>
<p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象。如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> List&lt;Sender&gt; list = <span class="keyword">new</span> ArrayList&lt;Sender&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceMailSender</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;</span><br><span class="line">			list.add(<span class="keyword">new</span> MailSender());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceSmsSender</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;</span><br><span class="line">			list.add(<span class="keyword">new</span> SmsSender());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。<br>所以与工厂模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建复合对象，多个部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</p>
</li>
<li><p>原型模式（Prototype）</p>
<p>原型模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。<br>在Java中，复制对象通过clone()实现。</p>
<ul>
<li>浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</li>
<li>深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;  </span><br><span class="line">   <span class="keyword">private</span> String string;  </span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> SerializableObject obj;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 浅复制 */</span>  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;  </span><br><span class="line">       Prototype proto = (Prototype) <span class="keyword">super</span>.clone();  </span><br><span class="line">       <span class="keyword">return</span> proto;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 深复制 */</span>  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;  </span><br><span class="line"></span><br><span class="line">       <span class="comment">/* 写入当前对象的二进制流 */</span>  </span><br><span class="line">       ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();  </span><br><span class="line">       ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);  </span><br><span class="line">       oos.writeObject(<span class="keyword">this</span>);  </span><br><span class="line"></span><br><span class="line">       <span class="comment">/* 读出二进制流产生的新对象 */</span>  </span><br><span class="line">       ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());  </span><br><span class="line">       ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);  </span><br><span class="line">       <span class="keyword">return</span> ois.readObject();  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> string;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String string)</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">this</span>.string = string;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> SerializableObject <span class="title">getObj</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> obj;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(SerializableObject obj)</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">this</span>.obj = obj;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializableObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象</em></strong>  </p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[创建型模式 五种]]>
    
    </summary>
    
      <category term="java" scheme="http://miclee.cn/tags/java/"/>
    
      <category term="java" scheme="http://miclee.cn/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JAVA的23种设计模式(二)]]></title>
    <link href="http://miclee.cn/2015/08/27/java-design-pattern-2/"/>
    <id>http://miclee.cn/2015/08/27/java-design-pattern-2/</id>
    <published>2015-08-27T09:18:22.000Z</published>
    <updated>2015-08-30T07:47:48.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 结构型模式 七种 </em></strong><br><a id="more"></a></p>
<hr>
<pre><code>在JAVA的<span class="number">23</span>种设计模式(一)中讲了<span class="number">5</span>种创建型模式，这篇讲以下<span class="number">7</span>种结构型模式：适配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。
</code></pre><p>其中对象的适配器模式是各种模式的起源，我们看下面的图：  <img src="https://raw.githubusercontent.com/OfMicLee/img-hosting/master/java/java-design-2.png" alt="结构型模式"></p>
<ol>
<li><p>适配器模式（Adapter）</p>
<p>适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</p>
<ul>
<li>类的适配器模式</li>
</ul>
<p>核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口时Targetable，通过Adapter类，将Source的功能扩展到Targetable里</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Source类，拥有一个方法，待适配</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> </span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">      System.out.println(<span class="string">"this is original method!"</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//目标接口 Targetable，即期望拥有的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Targetable</span> </span>&#123;</span><br><span class="line">	<span class="comment">/* 与原类中的方法相同 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">/* 新类的方法 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adapter类继承Source类，实现Targetable接口，这样Targetable接口的实现类就具有了Source类的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Targetable</span> </span>&#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"this is the targetable method!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对象的适配器模式  </li>
</ul>
<p>基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source类的实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">implements</span> <span class="title">Targetable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Source source;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Wrapper</span><span class="params">(Source source)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.source = source;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"this is the targetable method!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		source.method1();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>接口的适配器模式（<strong>常用</strong>）</li>
</ul>
<p>这种模式比较常见，就是在接口和实现类之间增加一个抽象类来实现公共部分功能，子类继承抽象类，只需要实现抽象类里未实现的接口方法即可。</p>
</li>
<li><p>装饰模式</p>
<p>顾名思义，装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"the original method!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Sourceable source;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Sourceable source)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>();  </span><br><span class="line">        <span class="keyword">this</span>.source = source;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"before decorator!"</span>);  </span><br><span class="line">        source.method();  </span><br><span class="line">        System.out.println(<span class="string">"after decorator!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>应用场景：<ul>
<li>需要扩展一个类的功能。</li>
<li>动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）</li>
</ul>
</li>
<li>缺点：产生过多相似的对象，不易排错！</li>
</ul>
</li>
<li><p>代理模式（Proxy）</p>
<p>其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操作。<br>代理模式和装饰的区别在于：<br>装饰模式是将功能类实例化出来后交给装饰类去补充功能；<br>代理模式是在代理类内部去实例化功能类，调用者不用关心功能类，完全交给代理类；<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Source source;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.source = <span class="keyword">new</span> Source();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"before proxy!"</span>);</span><br><span class="line">		source.method();</span><br><span class="line">    System.out.println(<span class="string">"after proxy!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>外观模式（Facade）</p>
<p>外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口，看下类图：（我们以一个计算机的启动过程为例）<br><img src="https://raw.githubusercontent.com/OfMicLee/img-hosting/master/java/java-design-facade.png" alt="外观模式"></p>
<p>如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观模式。</p>
</li>
</ol>
<p>10、桥接模式（Bridge）</p>
<p>  桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。<br>  如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgeTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Bridge bridge = <span class="keyword">new</span> MyBridge();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*调用第一个对象*/</span></span><br><span class="line">		Sourceable source1 = <span class="keyword">new</span> SourceSub1();</span><br><span class="line">		bridge.setSource(source1);</span><br><span class="line">		bridge.method();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*调用第二个对象*/</span></span><br><span class="line">		Sourceable source2 = <span class="keyword">new</span> SourceSub2();</span><br><span class="line">		bridge.setSource(source2);</span><br><span class="line">		bridge.method();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  这样，就通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。</p>
<ol>
<li><p>组合模式（Composite）</p>
<p>组合模式有时又叫部分-整体模式在处理类似树形结构的问题时比较方便，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> TreeNode parent;</span><br><span class="line">	<span class="keyword">private</span> Vector&lt;TreeNode&gt; children = <span class="keyword">new</span> Vector&lt;TreeNode&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> TreeNode <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> parent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(TreeNode parent)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.parent = parent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//添加孩子节点</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">		children.add(node);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//删除孩子节点</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">		children.remove(node);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//取得孩子节点</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Enumeration&lt;TreeNode&gt; <span class="title">getChildren</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> children.elements();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;</span><br><span class="line">	TreeNode root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Tree</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		root = <span class="keyword">new</span> TreeNode(name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Tree tree = <span class="keyword">new</span> Tree(<span class="string">"A"</span>);</span><br><span class="line">		TreeNode nodeB = <span class="keyword">new</span> TreeNode(<span class="string">"B"</span>);</span><br><span class="line">		TreeNode nodeC = <span class="keyword">new</span> TreeNode(<span class="string">"C"</span>);</span><br><span class="line"></span><br><span class="line">		nodeB.add(nodeC);</span><br><span class="line">		tree.root.add(nodeB);</span><br><span class="line">		System.out.println(<span class="string">"build the tree finished!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用场景：将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等。</p>
</li>
<li><p>享元模式（Flyweight）</p>
<p>享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。<br>最典型的使用场景：数据库连接池的实现。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[结构型模式 七种]]>
    
    </summary>
    
      <category term="java" scheme="http://miclee.cn/tags/java/"/>
    
      <category term="java" scheme="http://miclee.cn/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jvm]]></title>
    <link href="http://miclee.cn/2015/08/27/jvm/"/>
    <id>http://miclee.cn/2015/08/27/jvm/</id>
    <published>2015-08-27T09:09:51.000Z</published>
    <updated>2015-08-30T12:11:52.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 《深入理解JAVA虚拟机》读书笔记 </em></strong><br><a id="more"></a></p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[《深入理解JAVA虚拟机》读书笔记]]>
    
    </summary>
    
      <category term="jvm" scheme="http://miclee.cn/tags/jvm/"/>
    
      <category term="java" scheme="http://miclee.cn/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[微信第三方平台授权权限集]]></title>
    <link href="http://miclee.cn/2015/08/22/wechat-platform/"/>
    <id>http://miclee.cn/2015/08/22/wechat-platform/</id>
    <published>2015-08-21T16:00:00.000Z</published>
    <updated>2015-08-27T07:24:22.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 微信第三方平台授权权限集说明 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="消息与菜单权限集">消息与菜单权限集</h2><p>指公众号第三方平台方在获得该权限集后，可以获得被授权公众号的消息与菜单相关的权限。由于涉及到接收并回复粉丝消息，为了防止多方对话交叠而导致用户收到多条消息，故一个公众号至多只能授权给一个公众号第三方平台，即授权互斥。具体包括：</p>
<p>1) 接收和回复被动响应消息能力<br>2) 客服消息接口<br>3) 获取语音识别开关状态<br>4) 设置语音识别开关<br>5) 上传下载多媒体文件接口<br>6) 自定义菜单的创建、查询和删除<br>7) 自定义菜单点击事件接收<br>8) 订阅/取消订阅事件推送  </p>
<h2 id="用户管理权限集">用户管理权限集</h2><p>指公众号第三方平台方在获得该权限集后，可以获得被授权公众号的用户管理权限。由于可供多方获取，故授权不互斥。具体包括：</p>
<p>1) 获取用户基本信息接口<br>2) 获取用户列表接口<br>3) 用户分组管理接口<br>4) 用户备注名设置接口<br>5) 设置用户地理位置的开关及上报方式<br>6) 获取用户地理位置上报的开关状态及上报方式  </p>
<h2 id="帐号管理权限集">帐号管理权限集</h2><p>该权限集主要进行公众帐号的帐号管理，包括获取和设置公众帐号信息，由于可供多方获取和设置，故授权不互斥。具体包括：</p>
<h2 id="网页开发权限集">网页开发权限集</h2><p>1) 生成带参数二维码接口<br>2) 扫描带参数二维码的事件接收<br>3) 获取公众帐号基础信息(头像昵称/帐号类型等,此接口暂为服务方独有)<br>4）上传下载多媒体文件接口  </p>
<h2 id="网页开发权限集-1">网页开发权限集</h2><p>该权限集主要指公众号第三方平台可以代替公众帐号发起微信网页授权，并在授权后可以合法获得相关的授权信息，还包括可以代替公众号使用JS SDK。由于可供多方使用，故授权不互斥。具体包括：<br>1) 发起微信内网页授权的权限<br>2) 授权后获取授权用户的基本信息（权限根据应用授权作用域scope的不同而不同：scope为snsapi_base时不弹出授权页面但只能获取用户openid）；scope为snsapi_userinfo时弹出授权页面但可通过openid拿到用户昵称、性别、所在地）<br>3）代替公众号使用JS SDK  </p>
<h2 id="微信小店权限集">微信小店权限集</h2><p>该权限集主要是指管理微信公众平台小店的功能，由于可供多方使用，故授权不互斥。具体包括：<br>1) 微信小店所有接口权限<br>2) 微信小店所有事件推送（事件将推送到创建服务时填写的公众号消息与事件接收URL）</p>
<h2 id="多客服权限集">多客服权限集</h2><p>该权限集主要指能否设置和获取公众账号的多客服功能开关的状态。一旦打开开关之后，客服消息将不再推送给第三方平台方，而是推送给微信多客服功能后台。此时，公众号运营者需要在mp.weixin.qq.com的多客服模块中下载多客服PC客户端来使用，与发客服消息的粉丝进行CRM沟通互动。该权限集可以授权给多个服务方，即授权不互斥，具体包括：<br>1）微信多客服所有接口权限  </p>
]]></content>
    <summary type="html">
    <![CDATA[微信第三方平台授权权限集说明]]>
    
    </summary>
    
      <category term="nodejs" scheme="http://miclee.cn/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[千米微信第三方平台应用]]></title>
    <link href="http://miclee.cn/2015/08/22/qm-wechat/"/>
    <id>http://miclee.cn/2015/08/22/qm-wechat/</id>
    <published>2015-08-21T16:00:00.000Z</published>
    <updated>2015-08-27T07:20:02.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 让天下没有难做的微商 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="历史的痛点">历史的痛点</h2><ul>
<li>在公众平台配置繁琐参数</li>
<li>熟读微信开发者文档，开发业务功能</li>
<li>各团队重复劳动，人力浪费</li>
</ul>
<h2 id="解决方案">解决方案</h2><p>一键授权给我们微信第三方平台，后面的事就交给我们吧，去专注你的业务去</p>
<h2 id="我们能做什么？">我们能做什么？</h2><ul>
<li><p>对内</p>
<ul>
<li>代理公司内部团队所有微信相关交互</li>
</ul>
</li>
<li><p>对外</p>
<ul>
<li>提供公众号能力的 <strong>行业解决方案</strong>，如针对电商行业的商家解决方案；</li>
<li>帮助公众号 <strong>功能优化</strong>，如针对餐饮行业优化的用户管理功能；</li>
<li>甚至，公众号 <strong>行业运营专家</strong></li>
</ul>
</li>
</ul>
<h2 id="我们的愿景？">我们的愿景？</h2><p><strong>让天下没有难做的微商</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[让天下没有难做的微商]]>
    
    </summary>
    
      <category term="nodejs" scheme="http://miclee.cn/tags/nodejs/"/>
    
      <category term="wechat" scheme="http://miclee.cn/tags/wechat/"/>
    
      <category term="nodejs" scheme="http://miclee.cn/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios app 发布模式]]></title>
    <link href="http://miclee.cn/2015/08/20/ios-app-depolyment/"/>
    <id>http://miclee.cn/2015/08/20/ios-app-depolyment/</id>
    <published>2015-08-19T16:00:00.000Z</published>
    <updated>2015-08-27T07:20:02.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> ios app 三种发布模式 </em></strong><br><a id="more"></a></p>
<hr>
<p>教育机构除外，主要有三种方式发布 IOS APP，分别如下：</p>
<h2 id="APP_STORE">APP STORE</h2><ul>
<li>账号要求：个人账号（Individual）、公司团队账号（Company/Organization）</li>
<li>设备限制：无限制，无需注册设备</li>
<li>发布方式：提交APP STORE审核，审核通过后在APP STORE上自由下载</li>
</ul>
<h2 id="Ad_Hoc">Ad Hoc</h2><ul>
<li>账号要求：个人账号（Individual）、公司团队账号（Company/Organization）</li>
<li>设备限制：100台，需要先注册设备的UDID</li>
<li>发布方式：打包成ipa后自由分发</li>
</ul>
<h2 id="企业分发">企业分发</h2><ul>
<li>账号要求：企业账号（Enterprise）</li>
<li>设备限制：无限制，无上限</li>
<li>发布方式：打包成ipa后自由分发，但无法发布在App Store上</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[ios app 三种发布模式]]>
    
    </summary>
    
      <category term="移动端" scheme="http://miclee.cn/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios app 发布流程]]></title>
    <link href="http://miclee.cn/2015/08/19/ios-app-publish/"/>
    <id>http://miclee.cn/2015/08/19/ios-app-publish/</id>
    <published>2015-08-18T16:00:00.000Z</published>
    <updated>2015-08-27T07:20:02.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 简单描述怎样在appstore上发布你的app </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="1、首先，你要有个开发者账号。">1、首先，你要有个开发者账号。</h2><p>开发者账号种类：个人账号、公司账号和企业账号这三种，还有一种是教育账号，这个就不多说了。申请地址：<a href="https://developer.apple.com" target="_blank" rel="external">https://developer.apple.com</a></p>
<ul>
<li><p>个人账号（Individual）</p>
<p>费用99美金一年, 该账号在App Store销售者只能显示个人的ID，比如zhitian zhang，单人使用。个人账号只能有一个开发者。100个苹果的iOS设备UDID测试。</p>
</li>
<li><p>公司团队账号（Company/Organization）</p>
<p>费用99美金一年, 该账号在App Store销售者可以显示类似Studios，或者自定义的团队名称，比如Mamshare INC，<br>公司账号可以允许多个开发者协作开发，比个人多一些帐号管理的设置，可以设置多个AppleID，分4种管理级别权限，详细见备注。<br>100个苹果的iOS设备UDID测试。但是申请时需要填写公司的邓白氏编码（D-U-N-S）。<br><a href="https://developer.apple.com/programs/enroll" target="_blank" rel="external">申请地址</a></p>
<p><strong>备注：</strong></p>
<ul>
<li>Admin Legal权限：超级管理员。可以管理开发者和管理app store中的应用。</li>
<li>Admin权限：管理员，可以管理开发者。添加测试机子和管理团队证书。</li>
<li>Member权限：是普通开发者。只能下载证书和使用证书</li>
<li>No Access权限：没有相应的权限。</li>
</ul>
<p>邓白氏编码（D-U-N-S）<br><a href="https://developer.apple.com/ios/enroll/dunsLookupForm.action" target="_blank" rel="external">申请地址</a></p>
</li>
<li><p>企业账号（Enterprise）</p>
<p>费用299美金一年, 该账号开发应用不能发布到App Store，只能企业内部应用，苹果的iOS设备UDID数量不限制。企业账号适合不希望上线App Store，但是需要企业内部比如1000人的iOS设备都部署。公司测试部门需要全公司测试设备，突破100个UDID的限制。</p>
</li>
<li><p>教育账号(University)</p>
<p>费用0美元 ，只能教育机构或学院内部使用。必须是苹果iOS开发者计划授权机构。不能对外正式发布iOS应用程序。<br><a href="https://developer.apple.com/programs/start/university" target="_blank" rel="external">申请地址</a></p>
</li>
</ul>
<h2 id="2、进入苹果开发者网站，生成证书Certificate">2、进入苹果开发者网站，生成证书Certificate</h2><p>如果你拥有一个开发者账户的话，在iOS Dev Center打开Certificates, Indentifiers &amp; Profiles，你就可以看到如下的列表：<br><img src="https://raw.githubusercontent.com/OfMicLee/img-hosting/master/app/ios-certificate.png" alt="ios Certificates"></p>
<h3 id="步骤：">步骤：</h3><ul>
<li><h4 id="Certificates_-&gt;_Production_-&gt;_+">Certificates -&gt; Production -&gt; +</h4></li>
<li><h4 id="What_type_of_certificate_do_you_need?">What type of certificate do you need?</h4><p>Production -&gt; App Store adn Ad Hoc -&gt; Continue</p>
</li>
<li><h4 id="About_Creating_a_Certificate_Signing_Request_(CSR)">About Creating a Certificate Signing Request (CSR)</h4><blockquote>
<p>利用MAC的钥匙串生成CSR文件</p>
</blockquote>
<ul>
<li><p>In the Applications folder on your Mac, open the Utilities folder and launch Keychain Access.<br>Within the Keychain Access drop down menu, select Keychain Access &gt; Certificate Assistant &gt; Request a Certificate from a Certificate Authority.</p>
</li>
<li><p>In the Certificate Information window, enter the following information:</p>
<ul>
<li><p>In the User Email Address field, enter your email address.</p>
</li>
<li><p>In the Common Name field, create a name for your private key (e.g., John Doe Dev Key).</p>
</li>
<li><p>The CA Email Address field should be left empty.</p>
</li>
<li><p>In the “Request is” group, select the “Saved to disk” option.</p>
</li>
</ul>
</li>
<li><p>Continue</p>
</li>
</ul>
</li>
<li><h4 id="Generate_your_certificate">Generate your certificate</h4><ul>
<li>上传生成的CSR文件</li>
<li>Generate</li>
</ul>
</li>
</ul>
<h2 id="3、创建_IOS_APP_IDs">3、创建 IOS APP IDs</h2><ul>
<li><h4 id="Identifiers_-&gt;_App_IDs_-&gt;_+">Identifiers -&gt; App IDs -&gt; +</h4></li>
<li><h4 id="填写APP_ID信息">填写APP ID信息</h4><ul>
<li>Description（名称）：eg. Hosjoy Comfortable Home APP</li>
<li>Prefix（前缀）：eg. SB4MBL4J65 (Team ID)</li>
<li>Suffix (后缀)：<ul>
<li>Explicit App ID（固定）：eg. com.hosjoy.middleman</li>
<li>Wildcard App ID（通配）：eg. com.hosjoy.*</li>
</ul>
</li>
<li>App Services（需要开通的服务）： 通配模式下服务会比较有限</li>
</ul>
</li>
</ul>
<h2 id="4、创建描述文件Profile">4、创建描述文件Profile</h2><ul>
<li><h4 id="Provisioning_Profiles_-&gt;_Distribution_-&gt;_+">Provisioning Profiles -&gt; Distribution -&gt; +</h4></li>
<li><h4 id="What_type_of_provisioning_profile_do_you_need?">What type of provisioning profile do you need?</h4><p>Distribution -&gt; App Store</p>
</li>
<li><h4 id="Select_App_ID">Select App ID</h4><p>选择上一步生成的APP ID</p>
</li>
<li><h4 id="Select_certificates">Select certificates</h4><p>选择上面生成的证书</p>
</li>
<li><h4 id="命名并生成描述文件">命名并生成描述文件</h4><p>eg. Hosjoy Home APP Profile</p>
</li>
</ul>
<h2 id="5、打包ipa">5、打包ipa</h2><ul>
<li><h4 id="双击生成的描述文件，导入xcode">双击生成的描述文件，导入xcode</h4></li>
<li><h4 id="配置xcode">配置xcode</h4><ul>
<li>TARGENTS -&gt; INFO 里填写项目相关信息，要与前面生成描述文件的信息一致</li>
<li>TARGENTS -&gt; Build Settings -&gt; PROVISIONING_PROFILE -&gt; Release 里输入证书的UUID<br>（从‘~/Library/MobileDevice/Provisioning Profiles’里查看）</li>
<li>Product -&gt; Scheme 里选择Release</li>
</ul>
</li>
<li><h4 id="打包">打包</h4><ul>
<li>Product -&gt; Archive (如果为灰色，插入真机设备再试)</li>
</ul>
</li>
</ul>
<h2 id="6、上传版本至APP_STORE">6、上传版本至APP STORE</h2><ul>
<li>使用xcode或者Application Loader</li>
</ul>
<h2 id="7、在iTunes_Connect里添加你的APP">7、在iTunes Connect里添加你的APP</h2><ul>
<li><h4 id="iTunes_Connect_-&gt;_我的APP_-&gt;_新建IOS_APP">iTunes Connect -&gt; 我的APP -&gt; 新建IOS APP</h4><ul>
<li>名称：App 在 App Store 中显示的名称</li>
<li>版本：与 Xcode 中所使用的版本号相符</li>
<li>语言：Simplified Chinese</li>
<li>SKU：一个独特的、不会在 App Store 中显示的 App ID</li>
<li>套装ID：选择一个前面创建的 APP ID ，必须与 Xcode 中使用的 BundleID 相符</li>
<li>其他：图标（1024jpg）、联系人信息、版权信息、评级等等</li>
<li>版本信息：选择上一步上传到app store的版本</li>
</ul>
</li>
</ul>
<h2 id="8、大功告成，等待审核结果">8、大功告成，等待审核结果</h2>]]></content>
    <summary type="html">
    <![CDATA[简单描述怎样在appstore上发布你的app]]>
    
    </summary>
    
      <category term="ios-app-publish" scheme="http://miclee.cn/tags/ios-app-publish/"/>
    
      <category term="移动端" scheme="http://miclee.cn/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[makefile和shell脚本的区别]]></title>
    <link href="http://miclee.cn/2015/08/19/makefile&shell/"/>
    <id>http://miclee.cn/2015/08/19/makefile&shell/</id>
    <published>2015-08-18T16:00:00.000Z</published>
    <updated>2015-08-27T07:20:02.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 在Makefile可以调用shell脚本，但是Makefile和shell脚本是不同的。本文试着归纳一下Makefile和shell脚本的不同。 </em></strong><br><a id="more"></a></p>
<hr>
<ul>
<li><p>####1）shell中所有引用以$打头的变量其后要加{},而在Makefile中的变量是以$打头的后加()。</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">PATH</span>="/data/"</span><br><span class="line"><span class="constant">SUBPATH</span>=<span class="variable">$(PATH)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=&#34;/data/&#34;&#10;SUBPATH=$&#123;PATH&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>####2）Makefile中所有以$打头的单词都会被解释成Makefile中的变量。如果你需要调用shell中的变量（或者正则表达式中锚定句位$），都需要加两个$符号（$$）。</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">PATH</span>="/data/"</span><br><span class="line"><span class="title">all:</span></span><br><span class="line">    echo $&#123;PATH&#125;</span><br></pre></td></tr></table></figure>
<p>echo $$PATH例子中的第一个${PATH}引用的是Makefile中的变量，而不是shell中的PATH环境变量，后者引用的事Shell中的PATH环境变量。</p>
</li>
<li><p>####3）通配符区别</p>
<p>shell 中通配符*表示所有的字符<br>Makefile 中通配符%表示所有的字符</p>
</li>
<li><p>####4）在Makefile中只能在target中调用Shell脚本，其他地方是不能输出的。</p>
<p>比如如下代码就是没有任何输出：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">VAR</span>="Hello"</span><br><span class="line">echo "$VAR"</span><br><span class="line"><span class="title">all:</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>以上代码任何时候都不会输出，没有在target内，如果上述代码改为如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">VAR</span>="Hello"</span><br><span class="line"><span class="title">all:</span></span><br><span class="line">    echo "$VAR"</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>以上代码，在make all的时候将会执行echo命令。</p>
</li>
<li><p>####5）在Makefile中执行shell命令，一行创建一个进程来执行。这也是为什么很多Makefile中有很多行的末尾都是“;  \”，以此来保证代码是一行而不是多行，这样Makefile可以在一个进程中执行，例如：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">SUBDIR</span>=src example</span><br><span class="line"><span class="title">all:</span></span><br><span class="line">    @for subdir in $(SUBDIR); \</span><br><span class="line">    do\</span><br><span class="line">        echo "building "; \</span><br></pre></td></tr></table></figure>
<p>done上述可以看出for循环中每行都是以”; \”结尾的。</p>
</li>
<li><p>####6）获取当前目录</p>
<p>PATH=<code>pwd</code> 注意是``,不是’’</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在Makefile可以调用shell脚本，但是Makefile和shell脚本是不同的。本文试着归纳一下Makefile和shell脚本的不同。]]>
    
    </summary>
    
      <category term="技术综合" scheme="http://miclee.cn/categories/%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring-boot快速开发spring应用]]></title>
    <link href="http://miclee.cn/2015/08/10/spring-boot/"/>
    <id>http://miclee.cn/2015/08/10/spring-boot/</id>
    <published>2015-08-09T16:00:00.000Z</published>
    <updated>2015-12-14T02:41:53.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 使用spring-boot快速创建和运行一个spring 应用 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="Spring自动化框架">Spring自动化框架</h2><p>spring多年以来一直都是java平台开发web应用的主流技术，在标准的J2EE架构之外提供了一个轻量级的解决方案。虽然spring提供了很多功能，简化了java平台的企业应用开发，降低了开发工作量，但相比较其它语言的一些框架（例如ruby on rails，python Django）来说，基于spring 的开发仍然比较复杂，尤其是新建一个项目时，需要进行各种配置，重复的工作量较大。</p>
<p>针对这个问题spring开源社区一直都在持续不断地进行探索，提供相应的解决方案。</p>
<ul>
<li><p>grails  </p>
<p>使用groovy语言，封装了spring，提供了一个高效的全栈框架，在开发效率方面可媲美ROR，但运行时性能比ROR要高很多。grails用户群较大，目前开发社区比较活跃。</p>
</li>
<li><p>spring roo</p>
<p>在spring之上提供一个纯java的封装，使用到了osgi，aspectj等技术，提供类似ROR的开发模式，但未成功推广，用户不多，目前开发基本停滞。</p>
</li>
<li><p>spring-boot</p>
<p>spring-boot 是spring社区今年推出的一个新项目，其主要目的也是提高生产率，尤其是快速创建和运行一个spring 应用。</p>
</li>
</ul>
<h2 id="spring-boot">spring-boot</h2><h3 id="spring-boot功能特性">spring-boot功能特性</h3><ul>
<li><p>创建独立运行的spring应用</p>
<p>使用spring-boot，可将整个spring应用打包为一个独立的jar文件，内嵌tomcat或者jetty容器。通过 java -jar xxx.jar 即可运行，免去了部署到应用服务器的步骤。</p>
</li>
<li><p>启动器</p>
<p>针对典型的应用需求，提供了一些标准的启动器配置，声明对这些启动器的依赖即可获得相关功能。例如如果需要使用jpa进行数据访问，仅需加入</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;project.groupId&#125;</span><br><span class="line"><span class="title">spring</span>-boot-starter-<span class="typedef"><span class="keyword">data</span>-jpa</span></span><br></pre></td></tr></table></figure>
<p>spring-boot会自动配置通过jpa进行数据访问需要的bean。  </p>
</li>
<li><p>自动配置spring</p>
<p>spring-boot会根据classpath包含的内容自动推测用户的需求并自动配置。例如如果在classpath包含了hsqldb，并且用户未配置数据库连接，spring-boot将会配置一个hsqldb内存数据库和数据源。</p>
</li>
<li><p>自动生成生产环境需要的特性</p>
<p>spring-boot能够为应用自动加入一些典型的生产环境下的功能特性，例如：外部配置，安全，日志，管理，审计等。</p>
</li>
<li><p>无代码生成，无xml配置需求</p>
<p>spring-boot无代码生成，所有的配置可通过代码完成（spring 的javaconfig），不需要使用xml（虽然可以使用）。</p>
</li>
</ul>
<h3 id="spring-boot组件">spring-boot组件</h3><p>spring-boot项目分为几个不同的组件，下面是每个组件的说明：</p>
<ul>
<li>spring-boot SpringBootApplication</li>
</ul>
<p>提供静态方法，用于开发独立运行的应用<br>嵌入容器配置，tomcat或者jetty<br>外部配置支持，从命令行，属性文件读取配置<br>spring context 的初始化  </p>
<ul>
<li>spring-boot-autoconfigure</li>
</ul>
<p>自动配置框架：根据classpath推测用户需要的功能并自动配置。例如如果在classpath 包含了  HSQLDB，并且没有配置数据库连接，spring-boot-autoconfig将自动配置一个内存数据库。spring-boot-autoconfigure使用spring 的javaconfig功能，为一个 @Configuration 类加上 @Conditional注解，注解声明的条件满足时,配置就会生效。用户可编写自己的配置类对自动配置进行扩展。</p>
<ul>
<li>spring-boot-starters</li>
</ul>
<p>一组预定义的依赖，添加不同类型的应用功能。例如如果需要jpa数据访问，加入 spring-boot-starter-data-jpa</p>
<ul>
<li>spring-boot cli</li>
</ul>
<p>一个命令行工具，可以直接运行一个groovy脚本作为spring 应用。例如以下groovy代码定义<br>了一个spring mvc controller，通过运行  spring run HelloController.groovy 即可运行一个spring web 应用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="annotation">@ResponseBody</span></span><br><span class="line">    <span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>groovy语言语法非常类似java语言，大部分代码都可以直接拷贝使用。spring-boot cli提供的功能非常适用于快速原型开发，以及在开发环境中搭建测试/模拟服务器等。（今年一个国人开发的开源项目 moco获得了“ duke选择奖”，moco的主要功能就是搭建测试/模拟服务器，借助于spring-boot cli，只需要用java语言，几分钟之内也可以搭建一个测试/模拟服务器）  </p>
<ul>
<li>spring-boot-actuator</li>
</ul>
<p>提供更多面向生产环境的支持，安全，日志，管理，审计。</p>
<ul>
<li>spring-boot-loader</li>
</ul>
<p>使用java -jar xxx.jar 运行应用的实现，对打包文件格式进行了定义。一般通过gradle插件或者 maven插件使用。这两个插件提供了在gradle和maven构建系统中使用spring-boot的功能。使用你的IDE创建一个普通的java 项目，加入这两个插件即可在项目中引入spring-boot。下面是使用java语言开发的controller：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="annotation">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="annotation">@ResponseBody</span></span><br><span class="line">    <span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpringApplication.run(SampleController.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相比较groovy而言，java语言开发的代码中需要包含一个 main 静态执行入口，在其中调用 SpringApplication.run 方法启动spring 应用。<br>对于包含上述代码的项目使用gradle和maven插件，可以将spring应用打包成为一个单独的jar文件，然后使用<br>java -jar xxxx.jar 执行。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用spring-boot快速创建和运行一个spring 应用]]>
    
    </summary>
    
      <category term="spring" scheme="http://miclee.cn/tags/spring/"/>
    
      <category term="spring-boot" scheme="http://miclee.cn/tags/spring-boot/"/>
    
      <category term="spring" scheme="http://miclee.cn/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[资源记录]]></title>
    <link href="http://miclee.cn/2015/08/08/resource/"/>
    <id>http://miclee.cn/2015/08/08/resource/</id>
    <published>2015-08-07T16:00:00.000Z</published>
    <updated>2015-12-11T03:47:20.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 博客网站资源 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="好玩有趣的">好玩有趣的</h2><ul>
<li><h4 id="Splashthat_URL">Splashthat <a href="https://www.splashthat.com" target="_blank" rel="external">URL</a></h4><p>发布事件（聚会、技术分享。。。）</p>
</li>
<li><h4 id="易企秀_URL">易企秀 <a href="http://eqxiu.com" target="_blank" rel="external">URL</a></h4><p>发布H5单页面、海报</p>
</li>
<li><h4 id="初页_URL">初页 <a href="http://chuye.cloud7.com.cn" target="_blank" rel="external">URL</a></h4><p>发布H5单页面、海报，单带初页广告</p>
</li>
<li><h4 id="全球黑客实时攻击图_URL">全球黑客实时攻击图 <a href="http://map.norsecorp.com" target="_blank" rel="external">URL</a></h4></li>
</ul>
<h2 id="牛人">牛人</h2><ul>
<li><h4 id="皓眸前端博客_Blog">皓眸前端博客 <a href="http://www.haomou.net" target="_blank" rel="external">Blog</a></h4></li>
<li><h4 id="阿里前端大牛、sea-js作者_-_玉伯_Blog_Github">阿里前端大牛、sea.js作者 - 玉伯 <a href="https://github.com/lifesinger/lifesinger.github.com/issues" target="_blank" rel="external">Blog</a>  <a href="https://github.com/lifesinger" target="_blank" rel="external">Github</a></h4></li>
<li><h4 id="阿里云前端大牛_-_朴灵_Github_Blog">阿里云前端大牛 - 朴灵 <a href="https://github.com/jacksontian" target="_blank" rel="external">Github</a> <a href="http://html5ify.com" target="_blank" rel="external">Blog</a></h4></li>
<li><h4 id="Dubbo作者_-_梁飞_Blog">Dubbo作者 - 梁飞 <a href="http://javatar.iteye.com/" target="_blank" rel="external">Blog</a></h4></li>
<li><h4 id="IOS讲师_-_林永坚_Github">IOS讲师 - 林永坚 <a href="https://github.com/JakeLin" target="_blank" rel="external">Github</a></h4></li>
<li><h4 id="Oracle牛人_-_David_Blog">Oracle牛人 - David        <a href="http://blog.csdn.net/tianlesoftware#" target="_blank" rel="external">Blog</a></h4></li>
</ul>
<p>##社区</p>
<ul>
<li><h4 id="segmentfault_URL">segmentfault <a href="http://segmentfault.com/" target="_blank" rel="external">URL</a></h4><p>开发者社区、前后端干货</p>
</li>
<li><h4 id="前端乱炖_URL">前端乱炖 <a href="http://www.html-js.com" target="_blank" rel="external">URL</a></h4><p>前端知名社区</p>
</li>
<li><h4 id="InfoQ_URL">InfoQ <a href="http://www.infoq.com/cn" target="_blank" rel="external">URL</a></h4><p>架构师月刊、QCon全球软件开发者大会组织者、高级技术社区</p>
</li>
<li><h4 id="程序师_URL">程序师 <a href="http://www.techug.com" target="_blank" rel="external">URL</a></h4><p>用程序师的眼光看世界</p>
</li>
<li><h4 id="淘宝UED_URL">淘宝UED <a href="http://ued.taobao.org" target="_blank" rel="external">URL</a></h4></li>
<li><h4 id="美团网技术社区_URL">美团网技术社区 <a href="http://tech.meituan.com" target="_blank" rel="external">URL</a></h4></li>
<li><h4 id="百度前端社区_URL">百度前端社区 <a href="http://fex.baidu.com" target="_blank" rel="external">URL</a></h4></li>
</ul>
<h2 id="订阅">订阅</h2><ul>
<li><h4 id="知乎周刊_URL">知乎周刊 <a href="http://zhuanlan.zhihu.com/Weekly" target="_blank" rel="external">URL</a></h4></li>
<li><h4 id="码农周刊_URL">码农周刊 <a href="http://weekly.manong.io" target="_blank" rel="external">URL</a></h4></li>
<li><h4 id="Pycoder’s_Weekly_URL">Pycoder’s Weekly <a href="http://pycoders.com/archive" target="_blank" rel="external">URL</a></h4></li>
<li><h4 id="Hacker_News_URL">Hacker News <a href="https://news.ycombinator.com" target="_blank" rel="external">URL</a></h4></li>
<li><h4 id="Startup_News_URL">Startup News <a href="http://news.dbanotes.net" target="_blank" rel="external">URL</a></h4></li>
<li><h4 id="极客头条_URL">极客头条 <a href="http://geek.csdn.net" target="_blank" rel="external">URL</a></h4></li>
<li><h4 id="FreeBuf_URL">FreeBuf <a href="http://www.freebuf.com" target="_blank" rel="external">URL</a></h4></li>
<li><h4 id="WooYun_URL">WooYun <a href="http://drops.wooyun.org" target="_blank" rel="external">URL</a></h4></li>
</ul>
<h2 id="创业">创业</h2><ul>
<li><h4 id="TechCrunch_URL">TechCrunch <a href="http://techcrunch.cn" target="_blank" rel="external">URL</a></h4></li>
<li><h4 id="36kr_URL">36kr <a href="http://36kr.com" target="_blank" rel="external">URL</a></h4></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[博客网站资源]]>
    
    </summary>
    
      <category term="blog" scheme="http://miclee.cn/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JAVA世界里的一些概念]]></title>
    <link href="http://miclee.cn/2015/08/06/java/"/>
    <id>http://miclee.cn/2015/08/06/java/</id>
    <published>2015-08-05T16:00:00.000Z</published>
    <updated>2015-08-30T12:09:49.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> JAVA世界里的一些概念名词，用于个人小记 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="EJB（Enterprice_JavaBeans）">EJB（Enterprice JavaBeans）</h2><h4 id="概念">概念</h4><p>Enterprice JavaBeans是一个用于分布式业务应用的标准服务端组件模型。<br>采用Enterprice JavaBeans架构编写的应用是可延伸的、事务性的、多用户安全的。采用ejb编写的这些应用，可以部署在任何支持Enterprice JavaBeans规范的服务器平台，如jboss、weblogic等。</p>
<h4 id="原理">原理</h4><ul>
<li>EJB实现原理： 就是把原来放到客户端实现的代码放到服务器端，并依靠RMI进行通信</li>
<li>RMI实现原理：就是通过Java对象可序列化机制实现分布计算</li>
<li>服务器集群： 就是通过RMI的通信，连接不同功能模块的服务器，以实现一个完整的功能</li>
</ul>
<h4 id="作用">作用</h4><p>EJB实际上是用于编写业务层代码。如果大家对于MVC(Model-View-Controller)结构的应用有所了解的话，我们知道一个基于MVC 结构的应用应包含显示层、控制层和业务层，假设我们采用ejb开发基于MVC结构的应用，那么ejb就是用于开发应用的业务层。</p>
<h4 id="好处">好处</h4><p>EJB为我们提供了很多在企业开发中需要使用到的服务，如事务管理/安全/持久化/分布式等，因为这些服务由容器提供，无需我们自行开发，这样大大减少了我们的开发工作量。</p>
<h4 id="EJB_VS_Spring">EJB VS Spring</h4><p>事务管理/持久化服务一般使用spring+hibernate，但涉及到分布式能力的话就使用ejb。大型企业都是有功能重复，分布式就是ejb开发。因为EJB设计的初衷就是用于分布式场合，而spring一开始就没打算提供分布式功能。</p>
<h2 id="RPC（Remote_Procedure_Call）">RPC（Remote Procedure Call）</h2><p>远程过程调用。RPC 并不是一个纯粹的Java 概念，因为在Java 诞生之前就已经有了RPC 的这个概念，在Java 之前的大多数编程语言，如，Fortran、C、COBOL 等等，都是过程性的语言，而不是面向对象的。所以，这些编<br>程语言很自然地用过程表示工作，如，函数或子程序，让其在网络上另一台机器上执行。说白了，就是本地计算机调用远程计算机上的一个函数。</p>
<h2 id="RMI（Remote_Method_Invocation）">RMI（Remote Method Invocation）</h2><p>远程方法调用。它就是利用Java 对象序列化的机制实现分布式计算，实现远程类对象的实例化以及调用的方法。<br>可以理解为序列化+RPC。</p>
<h2 id="JPA（Java_Persistence_API）">JPA（Java Persistence API）</h2><p>JPA是Sun官方提出的Java持久化规范。它为Java开发人员提供了一种对象/关系映射工具来管理Java应用中的关系数据。<br>JPA的宗旨是为POJO提供持久化标准规范，伴随 Java EE 5 发布以来，受到了各大厂商及开源社区的追捧，各种商用的和开源的 JPA 框架如雨后春笋般出现，为开发者提供了丰富的选择。<br>它一改之前 EJB 2.x 中实体 Bean 笨重且难以使用的形象，充分吸收了在开源社区已经相对成熟的 ORM 思想。<br>另外，它并不依赖于 EJB 容器，可以作为一个独立的持久层技术而存在。<br>目前比较成熟的 JPA 框架主要包括 Jboss 的 Hibernate EntityManager、Oracle 捐献给 Eclipse 社区的 EclipseLink(曾经的toplink)、Apache 的 OpenJPA等。所以使用Jpa的一个好处是，可以更换实现而不必改动太多代码。</p>
<h2 id="Spring_Roo">Spring Roo</h2><p>Spring Roo 是针对 Java™ 技术的一个轻量级生产力工具，可快速便捷地开发基于 Spring 的应用程序。使用 Spring Roo 创建的应用程序遵循 Spring 最佳实践，且基于 JPA、Bean Validation (JSR-303) 和 Dependency Injection (JSR-330) 等标准。Roo 提供一个使用方便、上下文感知、由标签完成的 shell 构建应用程序。<br>简而言之就是使用命令行自动构建一个基于Spring的JAVA应用。</p>
<h2 id="Spring_Boot">Spring Boot</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。</p>
<p>在追求开发体验的提升方面，Spring Boot，甚至可以说整个Spring生态系统都使用到了Groovy编程语言。Boot所提供的众多便捷功能，都是借助于Groovy强大的MetaObject协议、可插拔的AST转换过程以及内置的依赖解决方案引擎所实现的。在其核心的编译模型之中，Boot使用Groovy来构建工程文件，所以它可以使用通用的导入和样板方法（如类的main方法）对类所生成的字节码进行装饰（decorate）。这样使用Boot编写的应用就能保持非常简洁，却依然可以提供众多的功能。</p>
<p>Boot对于如下场景设计的应用来说是最适合的：</p>
<ul>
<li>应用如果要部署到PaaS上，如CloudFoundry，那它是首选的构建方案</li>
<li>微服务/REST服务的首选开发平台</li>
<li>移动应用服务的集成后端</li>
<li>其他JVM语言和框架（Groovy或Grails）的运行时</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[JAVA世界里的一些概念名词，用于个人小记]]>
    
    </summary>
    
      <category term="java" scheme="http://miclee.cn/tags/java/"/>
    
      <category term="java" scheme="http://miclee.cn/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ionic]]></title>
    <link href="http://miclee.cn/2015/08/06/ionic&&phonegap/"/>
    <id>http://miclee.cn/2015/08/06/ionic&&phonegap/</id>
    <published>2015-08-05T16:00:00.000Z</published>
    <updated>2015-08-27T07:20:02.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> ionic使用 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="概念">概念</h2><p>Ionic提供了一个免费且开源的移动优化HTML、CSS和JS 组件库，来构建高交互性应用。基于Sass构建和AngularJS 优化。</p>
<h2 id="How_to_use">How to use</h2><ul>
<li><p>1、 安装ionic</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cordova ionic</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、初始化项目</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ionic start hosjoy</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、增加平台</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd hosjoy&#10;$ ionic platform add ios</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、更改config.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ./config.xml</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">content</span> <span class="attribute">src</span>=<span class="value">"index.html"</span> /&gt;</span></span><br><span class="line">改为</span><br><span class="line"><span class="tag">&lt;<span class="title">content</span> <span class="attribute">src</span>=<span class="value">"http://m.ttmai.com"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>5、修改图标和启动页面</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">icon</span> <span class="attribute">src</span>=<span class="value">"resources/icon.png"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>图标名称：icon.png， 大小192PX；</p>
<p>启动页名称：splash.png，大小2208PX；</p>
<p>支持格式：.png/.ai/.psd</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic resources</span><br></pre></td></tr></table></figure>
</li>
<li><p>6、构建APP</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ionic build ios</span><br></pre></td></tr></table></figure>
</li>
<li><p>7、模拟器打开APP</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ionic emulate ios</span><br></pre></td></tr></table></figure>
</li>
<li><p>8、部署到设备<br>xcode</p>
</li>
</ul>
<p>##Ionic VS PhoneGap</p>
<p>####PhoneGap<br>Cordova是PhoneGap贡献给Apache后的开源项目，是从PhoneGap中抽离出的核心代码，是驱动PhoneGap的核心引擎。有点类似Webkit和Google Chrome的关系。渊源就是：早在2011年10月，Adobe收购了Nitobi Software和它的PhoneGap产品，然后宣布这个移动Web开发框架将会继续开源，并把它提交到Apache Incubator，以便完全接受ASF的管治。当然，由于Adobe拥有了PhoneGap商标，所以开源组织&gt;的这个PhoneGap v2.0版产品就更名为Apache Cordova。（目前Adobe PhoneGap &lt;===&gt;Apache Cordova，似乎只是包名不一样而已，未来会有多大变化与改变，拭目以待吧！！）</p>
<p>####Ionic<br>你可以先理解是一个webapp的框架，通俗的说就是html、js、css写出来的一个h5页面，<br>然后它又集成了angular和sass便于开发维护，本质上还是老三样（html、js、css），<br>再然后它为了方便或者为了以后盈利，又集成了cordova的功能，安装依赖后可以直接用<br>ionic的命令来调用cordova的创建、编译、打包等功能。<br>目前来看ionic后期可能收费:Pricing 路 Ionic.io Documentation，所以你可以选择只把ionic当做ui框架来用，舍弃它集成的cordova功能。</p>
]]></content>
    <summary type="html">
    <![CDATA[ionic使用]]>
    
    </summary>
    
      <category term="ionic" scheme="http://miclee.cn/tags/ionic/"/>
    
      <category term="移动端" scheme="http://miclee.cn/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git操作技巧]]></title>
    <link href="http://miclee.cn/2015/07/30/git/"/>
    <id>http://miclee.cn/2015/07/30/git/</id>
    <published>2015-07-29T16:00:00.000Z</published>
    <updated>2015-12-14T03:22:25.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> 主要自己的使用笔记，不用到处去查 </em></strong><br><a id="more"></a></p>
<hr>
<h3 id="摘取分支上部分功能上线：">摘取分支上部分功能上线：</h3><p><strong><em>基于某个提交点构建分支,再合入主干的某一个commit</em></strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b publish 9eed4b17&#10;&#10;git cherry-pick 5a2623e6</span><br></pre></td></tr></table></figure>
<h3 id="删除远程分支：">删除远程分支：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete publish</span><br></pre></td></tr></table></figure>
<h3 id="撤销远程分支的某次提交：">撤销远程分支的某次提交：</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">revert </span>a50a0f90</span><br><span class="line"><span class="label">git</span> <span class="keyword">push</span></span><br></pre></td></tr></table></figure>
<h3 id="拉取远程分支：">拉取远程分支：</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout origin/develop-<span class="keyword">pos</span> -b develop-<span class="keyword">pos</span></span><br></pre></td></tr></table></figure>
<p><em>或者</em></p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop-<span class="keyword">pos</span> origin/develop-<span class="keyword">pos</span></span><br></pre></td></tr></table></figure>
<h3 id="本地分支提交到远程：">本地分支提交到远程：</h3><p><strong><em>本地test分支提交到远程，并作为master分支或者名叫test的分支</em></strong></p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span> origin <span class="keyword">test</span>:master</span><br><span class="line">git <span class="keyword">push</span> origin <span class="keyword">test</span>:<span class="keyword">test</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[主要自己的使用笔记，不用到处去查]]>
    
    </summary>
    
      <category term="git" scheme="http://miclee.cn/tags/git/"/>
    
      <category term="技术综合" scheme="http://miclee.cn/categories/%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node Profiler]]></title>
    <link href="http://miclee.cn/2015/07/23/node-profiler/"/>
    <id>http://miclee.cn/2015/07/23/node-profiler/</id>
    <published>2015-07-22T16:00:00.000Z</published>
    <updated>2015-08-27T07:20:02.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> JavaScript性能调优工具 </em></strong><br><a id="more"></a></p>
<hr>
<p>##特点</p>
<ul>
<li>基于Node.js开发</li>
<li>深度介入V8</li>
<li>集成Inspector</li>
</ul>
<p>##运行时优化<br>V8能在运行的过程中，收集代码的执行频度，进而对哪些高频度运行的热点代码进行动态优化，<br>这项优化技术十分有效，它并不优化所有的代码，而是找到该优化的代码去优化，将好钢用到刀刃上。</p>
<ul>
<li>原生web-inspector只给出JS函数的执行占比，未说明函数是否被优化</li>
<li>Node Profiler展示执行占比、是否优化、未被优化的原因</li>
</ul>
<h2 id="Bailout">Bailout</h2><ul>
<li><p>###概念<br>即无法优化，或者优化失败的情况。V8针对JavaScript代码的优化是基于函数为单位的，也就是说一个函数的某段代码造成无法优化，会导致整个函数处于未优化的状态。所以即使某些Bailout情况无法避开，但可以确保它们处于一个极小的函数中，以避免整个函数无法优化。</p>
</li>
<li><p>###CASE</p>
<ul>
<li>带有try/catch或者try/finally语句的函数</li>
<li>带有with语句的函数</li>
<li>用for in来进行迭代并不是一种高效的做法，改进方式是使用Object.keys()取出keys，然后再进行普通的for循环</li>
<li>带有yield语句的Generator函数</li>
<li>赋值给形参中的参数</li>
<li>其他。。。</li>
</ul>
</li>
</ul>
<p>##实测</p>
<h3 id="使用示例">使用示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-type'</span> : <span class="string">'text/plain'</span> &#125;);</span><br><span class="line">    res.write(<span class="string">'Hi, MicLee!\n'</span>)</span><br><span class="line">    res.end(<span class="string">'hello world!'</span>);</span><br><span class="line">  &#125;).listen(<span class="number">2014</span>, <span class="string">'127.0.0.1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:2014/'</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server running at http://127.0.0.1:2014/&#10;webkit-devtools-agent: Spawning websocket service process...&#10;start agent&#10;&#10;webkit-devtools-agent: A proxy got connected.&#10;webkit-devtools-agent: Waiting for commands...&#10;webkit-devtools-agent: Websockets service started on 0.0.0.0:9999  &#60;==&#21551;&#21160;&#25104;&#21151;</span><br></pre></td></tr></table></figure>
<p>如出现如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: listen EADDRINUSE           &#60;== &#21487;&#33021;&#26159;&#30001;&#20110;&#31471;&#21475;&#34987;&#21344;&#29992;</span><br></pre></td></tr></table></figure></p>
<p>成功启动后，自动弹出chrome（如果有安装的话）url (<a href="http://alinode.aliyun.com/profiler/inspector.html?host=localhost:9999&amp;page=0" target="_blank" rel="external">http://alinode.aliyun.com/profiler/inspector.html?host=localhost:9999&amp;page=0</a>)<br>出现如下界面：<br><img src="https://cloud.githubusercontent.com/assets/3832082/8587127/7b54f88c-262a-11e5-9298-3a49c2b71d7c.jpg" alt=""></p>
<p>默认<strong>Collect JavaSript CPU Profile</strong>，单击<strong>Start</strong>。</p>
<p>可以采用压测脚本实现对服务进行压力测试，保证更多的结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ab -n1000 -c10 http://localhost:2014/</span><br></pre></td></tr></table></figure></p>
<p>点击<strong>Stop</strong>，得到如下图的结果：<br><img src="https://cloud.githubusercontent.com/assets/3832082/8587247/8dc33cbc-262b-11e5-8a10-59c8f9de280e.jpg" alt=""></p>
<p>可以看到更多关于函数在运行时的信息。</p>
<h3 id="UI含义">UI含义</h3><table>
<thead>
<tr>
<th>UI 栏目</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr>
<td>Self</td>
<td>exclusive time</td>
</tr>
<tr>
<td>Total</td>
<td>inclusive time</td>
</tr>
<tr>
<td><strong># of Hidden Classes</strong></td>
<td>隐藏类个数</td>
</tr>
<tr>
<td><strong>Bailout</strong></td>
<td>v8中提取的最后一次去优化原因</td>
</tr>
<tr>
<td><strong>Function</strong></td>
<td>函数名称 script : line</td>
</tr>
</tbody>
</table>
<p><strong>红色表示函数未被优化， 淡绿色表示函数被V8优化过。</strong></p>
<h3 id="注意事项">注意事项</h3><ul>
<li>该工具目前只支持X64平台（Linux, Mac, Win)。</li>
<li>切勿部署到线上，仅供自己调试使用。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[JavaScript性能调优工具]]>
    
    </summary>
    
      <category term="debug" scheme="http://miclee.cn/tags/debug/"/>
    
      <category term="javascript" scheme="http://miclee.cn/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://miclee.cn/tags/nodejs/"/>
    
      <category term="nodejs" scheme="http://miclee.cn/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[koa框架]]></title>
    <link href="http://miclee.cn/2015/07/03/koa/"/>
    <id>http://miclee.cn/2015/07/03/koa/</id>
    <published>2015-07-02T16:00:00.000Z</published>
    <updated>2015-08-27T07:20:02.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> Koa是Express同组人员开发，但是使用了Generator函数，进行了架构的重新设计，语法和内部结构都进行了升级。 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="概述">概述</h2><p>Koa是一个类似于Express的Web开发框架，开发人员也是同一组人，但是使用了Generator函数，进行了架构的重新设计。也就是说，Koa的原理和内部结构很像Express，但是语法和内部结构进行了升级。</p>
<p>官方<a href="https://github.com/koajs/koa/blob/master/docs/faq.md#why-isnt-koa-just-express-40" target="_blank" rel="external">faq</a>有这样一个问题：”为什么koa不是Express 4.0？“，回答是这样的：”Koa与Express有很大差异，整个设计都是不同的，所以如果将Express 3.0按照这种写法升级到4.0，就意味着重写整个程序。所以，我们觉得创造一个新的库，是更合适的做法。“</p>
<h2 id="Koa应用">Koa应用</h2><p>一个Koa应用就是一个对象，包含了一个middleware数组，这个数组由一组Generator函数组成。这些函数负责对HTTP请求进行各种加工，比如生成缓存、指定代理、请求重定向等等。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">var</span> app = koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码中，变量app就是一个Koa应用。它监听3000端口，返回一个内容为Hello World的网页。</p>
<p>app.use方法用于向middleware数组添加Generator函数。</p>
<p>listen方法指定监听端口，并启动当前应用。它实际上等同于下面的代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">var</span> app = koa();</span><br><span class="line">http.createServer(app.callback()).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="中间件">中间件</h2><p>Koa的中间件很像Express的中间件，也是对HTTP请求进行处理的函数，但是必须是一个Generator函数。而且，Koa的中间件是一个级联式（Cascading）的结构，也就是说，属于是层层调用，第一个中间件调用第二个中间件，第二个调用第三个，以此类推。上游的中间件必须等到下游的中间件返回结果，才会继续执行，这点很像递归。</p>
<p>中间件通过当前应用的use方法注册。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>; <span class="comment">// （1）</span></span><br><span class="line">  <span class="keyword">yield</span> next;  <span class="comment">// （2）</span></span><br><span class="line">  <span class="keyword">var</span> ms = <span class="keyword">new</span> <span class="built_in">Date</span> - start; <span class="comment">// （3）</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'%s %s - %s'</span>, <span class="keyword">this</span>.method, <span class="keyword">this</span>.url, ms); <span class="comment">// （4）</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>app.use</code>方法的参数就是中间件，它是一个Generator函数，最大的特征就是function命令与参数之间，必须有一个星号。Generator函数的参数next，表示下一个中间件。</p>
<p>Generator函数内部使用yield命令，将程序的执行权转交给下一个中间件，即<code>yield next</code>，要等到下一个中间件返回结果，才会继续往下执行。上面代码中，Generator函数体内部，第一行赋值语句首先执行，开始计时，第二行yield语句将执行权交给下一个中间件，当前中间件就暂停执行。等到后面的中间件全部执行完成，执行权就回到原来暂停的地方，继续往下执行，这时才会执行第三行，计算这个过程一共花了多少时间，第四行将这个时间打印出来。</p>
<p>下面是一个两个中间件级联的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.body = <span class="string">"header\n"</span>;</span><br><span class="line">  <span class="keyword">yield</span> saveResults.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.body += <span class="string">"footer\n"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">saveResults</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.body += <span class="string">"Results Saved!\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，第一个中间件调用第二个中间件saveResults，它们都向<code>this.body</code>写入内容。最后，<code>this.body</code>的输出如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header</span><br><span class="line">Results Saved!</span><br><span class="line">footer</span><br></pre></td></tr></table></figure>
<p>只要有一个中间件缺少<code>yield next</code>语句，后面的中间件都不会执行，这一点要引起注意。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params">next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; one'</span>);</span><br><span class="line">  <span class="keyword">yield</span> next;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&lt;&lt; one'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params">next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; two'</span>);</span><br><span class="line">  <span class="keyword">this</span>.body = <span class="string">'two'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&lt;&lt; two'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params">next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; three'</span>);</span><br><span class="line">  <span class="keyword">yield</span> next;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&lt;&lt; three'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码中，因为第二个中间件少了<code>yield next</code>语句，第三个中间件并不会执行。</p>
<p>如果想跳过一个中间件，可以直接在该中间件的第一行语句写上<code>return yield next</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (skip) <span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>由于Koa要求中间件唯一的参数就是next，导致如果要传入其他参数，必须另外写一个返回Generator函数的函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params">format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> *(<span class="params">next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = format</span><br><span class="line">      .replace(<span class="string">':method'</span>, <span class="keyword">this</span>.method)</span><br><span class="line">      .replace(<span class="string">':url'</span>, <span class="keyword">this</span>.url);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(logger(<span class="string">':method :url'</span>));</span><br></pre></td></tr></table></figure>
<p>上面代码中，真正的中间件是logger函数的返回值，而logger函数是可以接受参数的。</p>
<h3 id="多个中间件的合并">多个中间件的合并</h3><p>由于中间件的参数统一为next（意为下一个中间件），因此可以使用<code>.call(this, next)</code>，将多个中间件进行合并。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">random</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'/random'</span> == <span class="keyword">this</span>.path) &#123;</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">backwards</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'/backwards'</span> == <span class="keyword">this</span>.path) &#123;</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="string">'sdrawkcab'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">pi</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'/pi'</span> == <span class="keyword">this</span>.path) &#123;</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="built_in">String</span>(<span class="built_in">Math</span>.PI);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">all</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> random.call(<span class="keyword">this</span>, backwards.call(<span class="keyword">this</span>, pi.call(<span class="keyword">this</span>, next)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(all);</span><br></pre></td></tr></table></figure>
<p>上面代码中，中间件all内部，就是依次调用random、backwards、pi，后一个中间件就是前一个中间件的参数。</p>
<p>Koa内部使用koa-compose模块，进行同样的操作，下面是它的源码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middleware</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> *(<span class="params">next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!next) next = noop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = middleware.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      next = middleware[i].call(<span class="keyword">this</span>, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> *next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">noop</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，middleware是中间件数组。前一个中间件的参数是后一个中间件，依次类推。如果最后一个中间件没有next参数，则传入一个空函数。</p>
<h2 id="路由">路由</h2><p>可以通过<code>this.path</code>属性，判断用户请求的路径，从而起到路由作用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.path === <span class="string">'/'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="string">'we are at home!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.path !== <span class="string">'/'</span>) <span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">  <span class="keyword">this</span>.body = <span class="string">'we are at home!'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>下面是多路径的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// normal route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.path !== <span class="string">'/'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.body = <span class="string">'hello world'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /404 route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.path !== <span class="string">'/404'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.body = <span class="string">'page not found'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /500 route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.path !== <span class="string">'/500'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.body = <span class="string">'internal server error'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>
<p>上面代码中，每一个中间件负责一个路径，如果路径不符合，就传递给下一个中间件。</p>
<p>复杂的路由需要安装koa-route插件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">"koa"</span>)();</span><br><span class="line"><span class="keyword">var</span> route = <span class="built_in">require</span>(<span class="string">"koa-route"</span>);</span><br><span class="line"></span><br><span class="line">app.use(route.get(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="string">'Hello World'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">this</span>.status = <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">this</span>.body = &#123;success: <span class="literal">false</span>, err: err&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<h2 id="context对象">context对象</h2><p>中间件当中的this表示上下文对象context，代表一次HTTP请求和回应，即一次访问/回应的所有信息，都可以从上下文对象获得。context对象封装了request和response对象，并且提供了一些辅助方法。每次HTTP请求，就会创建一个新的context对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>; <span class="comment">// is the Context</span></span><br><span class="line">  <span class="keyword">this</span>.request; <span class="comment">// is a koa Request</span></span><br><span class="line">  <span class="keyword">this</span>.response; <span class="comment">// is a koa Response</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>context对象的很多方法，其实是定义在ctx.request对象或ctx.response对象上面，比如，ctx.type和ctx.length对应于ctx.response.type和ctx.response.length，ctx.path和ctx.method对应于ctx.request.path和ctx.request.method。</p>
<p>context对象的全局属性。</p>
<ul>
<li>request：指向Request对象</li>
<li>response：指向Response对象</li>
<li>req：指向Node的request对象</li>
<li>req：指向Node的response对象</li>
<li>app：指向App对象</li>
<li>state：用于在中间件传递信息。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state.user = <span class="keyword">yield</span> User.find(id);</span><br></pre></td></tr></table></figure>
<p>上面代码中，user属性存放在<code>this.state</code>对象上面，可以被另一个中间件读取。</p>
<p>context对象的全局方法。</p>
<ul>
<li>throw()：抛出错误，直接决定了HTTP回应的状态码。</li>
<li>assert()：如果一个表达式为false，则抛出一个错误。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.throw(<span class="number">403</span>);</span><br><span class="line"><span class="keyword">this</span>.throw(<span class="string">'name required'</span>, <span class="number">400</span>);</span><br><span class="line"><span class="keyword">this</span>.throw(<span class="string">'something exploded'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.throw(<span class="number">400</span>, <span class="string">'name required'</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'name required'</span>);</span><br><span class="line">err.status = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br></pre></td></tr></table></figure>
<p>assert方法的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">ctx.assert(value, [msg], [status], [properties])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">this</span>.assert(<span class="keyword">this</span>.user, <span class="number">401</span>, <span class="string">'User not found. Please login!'</span>);</span><br></pre></td></tr></table></figure>
<p>以下模块解析POST请求的数据。</p>
<ul>
<li>co-body</li>
<li><a href="https://github.com/koajs/body-parser" target="_blank" rel="external">https://github.com/koajs/body-parser</a></li>
<li><a href="https://github.com/koajs/body-parsers" target="_blank" rel="external">https://github.com/koajs/body-parsers</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parse = <span class="built_in">require</span>(<span class="string">'co-body'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// in Koa handler</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="keyword">yield</span> parse(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<h2 id="错误处理机制">错误处理机制</h2><p>Koa提供内置的错误处理机制，任何中间件抛出的错误都会被捕捉到，引发向客户端返回一个500错误，而不会导致进程停止，因此也就不需要forever这样的模块重启进程。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码中，中间件内部抛出一个错误，并不会导致Koa应用挂掉。Koa内置的错误处理机制，会捕捉到这个错误。</p>
<p>当然，也可以额外部署自己的错误处理机制。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> saveResults();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">this</span>.throw(<span class="number">400</span>, <span class="string">'数据无效'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码自行部署了try…catch代码块，一旦产生错误，就用<code>this.throw</code>方法抛出。该方法可以将指定的状态码和错误信息，返回给客户端。</p>
<p>对于未捕获错误，可以设置error事件的监听函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  log.error(<span class="string">'server error'</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>error事件的监听函数还可以接受上下文对象，作为第二个参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, ctx</span>)</span>&#123;</span><br><span class="line">  log.error(<span class="string">'server error'</span>, err, ctx);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果一个错误没有被捕获，koa会向客户端返回一个500错误“Internal Server Error”。</p>
<p>this.throw方法用于向客户端抛出一个错误。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.throw(<span class="number">403</span>);</span><br><span class="line"><span class="keyword">this</span>.throw(<span class="string">'name required'</span>, <span class="number">400</span>);</span><br><span class="line"><span class="keyword">this</span>.throw(<span class="number">400</span>, <span class="string">'name required'</span>);</span><br><span class="line"><span class="keyword">this</span>.throw(<span class="string">'something exploded'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.throw(<span class="string">'name required'</span>, <span class="number">400</span>)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'name required'</span>);</span><br><span class="line">err.status = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br></pre></td></tr></table></figure>
<p><code>this.throw</code>方法的两个参数，一个是错误码，另一个是报错信息。如果省略状态码，默认是500错误。</p>
<p><code>this.assert</code>方法用于在中间件之中断言，用法类似于Node的assert模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.assert(<span class="keyword">this</span>.user, <span class="number">401</span>, <span class="string">'User not found. Please login!'</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码中，如果this.user属性不存在，会抛出一个401错误。</p>
<p>由于中间件是层级式调用，所以可以把<code>try { yield next }</code>当成第一个中间件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">this</span>.status = err.status || <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">this</span>.body = err.message;</span><br><span class="line">    <span class="keyword">this</span>.app.emit(<span class="string">'error'</span>, err, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'some error'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="cookie">cookie</h2><p>cookie的读取和设置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.cookies.get(<span class="string">'view'</span>);</span><br><span class="line"><span class="keyword">this</span>.cookies.set(<span class="string">'view'</span>, n);</span><br></pre></td></tr></table></figure>
<p>get和set方法都可以接受第三个参数，表示配置参数。其中的signed参数，用于指定cookie是否加密。如果指定加密的话，必须用<code>app.keys</code>指定加密短语。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.keys = [<span class="string">'secret1'</span>, <span class="string">'secret2'</span>];</span><br><span class="line"><span class="keyword">this</span>.cookies.set(<span class="string">'name'</span>, <span class="string">'张三'</span>, &#123; signed: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>this.cookie的配置对象的属性如下。</p>
<ul>
<li>signed：cookie是否加密。</li>
<li>expires：cookie何时过期</li>
<li>path：cookie的路径，默认是“/”。</li>
<li>domain：cookie的域名。</li>
<li>secure：cookie是否只有https请求下才发送。</li>
<li>httpOnly：是否只有服务器可以取到cookie，默认为true。</li>
</ul>
<h2 id="session">session</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>);</span><br><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">var</span> app = koa();</span><br><span class="line"></span><br><span class="line">app.keys = [<span class="string">'some secret hurr'</span>];</span><br><span class="line">app.use(session(app));</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="keyword">this</span>.session.views || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.session.views = ++n;</span><br><span class="line">  <span class="keyword">this</span>.body = n + <span class="string">' views'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listening on port 3000'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Request对象">Request对象</h2><p>Request对象表示HTTP请求。</p>
<p>（1）this.request.header</p>
<p>返回一个对象，包含所有HTTP请求的头信息。它也可以写成<code>this.request.headers</code>。</p>
<p>（2）this.request.method</p>
<p>返回HTTP请求的方法，该属性可读写。</p>
<p>（3）this.request.length</p>
<p>返回HTTP请求的Content-Length属性，取不到值，则返回undefined。</p>
<p>（4）this.request.path</p>
<p>返回HTTP请求的路径，该属性可读写。</p>
<p>（5）this.request.href</p>
<p>返回HTTP请求的完整路径，包括协议、端口和url。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.request.href</span><br><span class="line"><span class="comment">// http://example.com/foo/bar?q=1</span></span><br></pre></td></tr></table></figure>
<p>（6）this.request.querystring</p>
<p>返回HTTP请求的查询字符串，不含问号。该属性可读写。</p>
<p>（7）this.request.search</p>
<p>返回HTTP请求的查询字符串，含问号。该属性可读写。</p>
<p>（8）this.request.host</p>
<p>返回HTTP请求的主机（含端口号）。</p>
<p>（9）this.request.hostname</p>
<p>返回HTTP的主机名（不含端口号）。</p>
<p>（10）this.request.type</p>
<p>返回HTTP请求的Content-Type属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ct = <span class="keyword">this</span>.request.type;</span><br><span class="line"><span class="comment">// "image/png"</span></span><br></pre></td></tr></table></figure>
<p>（11）this.request.charset</p>
<p>返回HTTP请求的字符集。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.request.charset</span><br><span class="line"><span class="comment">// "utf-8"</span></span><br></pre></td></tr></table></figure>
<p>（12）this.request.query</p>
<p>返回一个对象，包含了HTTP请求的查询字符串。如果没有查询字符串，则返回一个空对象。该属性可读写。</p>
<p>比如，查询字符串<code>color=blue&amp;size=small</code>，会得到以下的对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  color: <span class="string">'blue'</span>,</span><br><span class="line">  size: <span class="string">'small'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（13）this.request.fresh</p>
<p>返回一个布尔值，表示缓存是否代表了最新内容。通常与If-None-Match、ETag、If-Modified-Since、Last-Modified等缓存头，配合使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.response.set(<span class="string">'ETag'</span>, <span class="string">'123'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查客户端请求的内容是否有变化</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.request.fresh) &#123;</span><br><span class="line">  <span class="keyword">this</span>.response.status = <span class="number">304</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 否则就表示客户端的内容陈旧了，</span></span><br><span class="line"><span class="comment">// 需要取出新内容</span></span><br><span class="line"><span class="keyword">this</span>.response.body = <span class="keyword">yield</span> db.find(<span class="string">'something'</span>);</span><br></pre></td></tr></table></figure>
<p>（14）this.request.stale</p>
<p>返回<code>this.request.fresh</code>的相反值。</p>
<p>（15）this.request.protocol</p>
<p>返回HTTP请求的协议，https或者http。</p>
<p>（16）this.request.secure</p>
<p>返回一个布尔值，表示当前协议是否为https。</p>
<p>（17）this.request.ip</p>
<p>返回发出HTTP请求的IP地址。</p>
<p>（18）this.request.subdomains</p>
<p>返回一个数组，表示HTTP请求的子域名。该属性必须与app.subdomainOffset属性搭配使用。app.subdomainOffset属性默认为2，则域名“tobi.ferrets.example.com”返回[“ferrets”, “tobi”]，如果app.subdomainOffset设为3，则返回[“tobi”]。</p>
<p>（19）this.request.is(types…)</p>
<p>返回指定的类型字符串，表示HTTP请求的Content-Type属性是否为指定类型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Content-Type为 text/html; charset=utf-8</span></span><br><span class="line"><span class="keyword">this</span>.request.is(<span class="string">'html'</span>); <span class="comment">// 'html'</span></span><br><span class="line"><span class="keyword">this</span>.request.is(<span class="string">'text/html'</span>); <span class="comment">// 'text/html'</span></span><br><span class="line"><span class="keyword">this</span>.request.is(<span class="string">'text/*'</span>, <span class="string">'text/html'</span>); <span class="comment">// 'text/html'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Content-Type为s application/json</span></span><br><span class="line"><span class="keyword">this</span>.request.is(<span class="string">'json'</span>, <span class="string">'urlencoded'</span>); <span class="comment">// 'json'</span></span><br><span class="line"><span class="keyword">this</span>.request.is(<span class="string">'application/json'</span>); <span class="comment">// 'application/json'</span></span><br><span class="line"><span class="keyword">this</span>.request.is(<span class="string">'html'</span>, <span class="string">'application/*'</span>); <span class="comment">// 'application/json'</span></span><br></pre></td></tr></table></figure>
<p>如果不满足条件，返回false；如果HTTP请求不含数据，则返回undefined。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.is(<span class="string">'html'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>它可以用于过滤HTTP请求，比如只允许请求下载图片。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.is(<span class="string">'image/*'</span>)) &#123;</span><br><span class="line">  <span class="comment">// process</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.throw(<span class="number">415</span>, <span class="string">'images only!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（20）this.request.accepts(types)</p>
<p>检查HTTP请求的Accept属性是否可接受，如果可接受，则返回指定的媒体类型，否则返回false。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accept: text/html</span></span><br><span class="line"><span class="keyword">this</span>.request.accepts(<span class="string">'html'</span>);</span><br><span class="line"><span class="comment">// "html"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Accept: text/*, application/json</span></span><br><span class="line"><span class="keyword">this</span>.request.accepts(<span class="string">'html'</span>);</span><br><span class="line"><span class="comment">// "html"</span></span><br><span class="line"><span class="keyword">this</span>.request.accepts(<span class="string">'text/html'</span>);</span><br><span class="line"><span class="comment">// "text/html"</span></span><br><span class="line"><span class="keyword">this</span>.request.accepts(<span class="string">'json'</span>, <span class="string">'text'</span>);</span><br><span class="line"><span class="comment">// =&gt; "json"</span></span><br><span class="line"><span class="keyword">this</span>.request.accepts(<span class="string">'application/json'</span>);</span><br><span class="line"><span class="comment">// =&gt; "application/json"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Accept: text/*, application/json</span></span><br><span class="line"><span class="keyword">this</span>.request.accepts(<span class="string">'image/png'</span>);</span><br><span class="line"><span class="keyword">this</span>.request.accepts(<span class="string">'png'</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Accept: text/*;q=.5, application/json</span></span><br><span class="line"><span class="keyword">this</span>.request.accepts([<span class="string">'html'</span>, <span class="string">'json'</span>]);</span><br><span class="line"><span class="keyword">this</span>.request.accepts(<span class="string">'html'</span>, <span class="string">'json'</span>);</span><br><span class="line"><span class="comment">// "json"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// No Accept header</span></span><br><span class="line"><span class="keyword">this</span>.request.accepts(<span class="string">'html'</span>, <span class="string">'json'</span>);</span><br><span class="line"><span class="comment">// "html"</span></span><br><span class="line"><span class="keyword">this</span>.request.accepts(<span class="string">'json'</span>, <span class="string">'html'</span>);</span><br><span class="line"><span class="comment">// =&gt; "json"</span></span><br></pre></td></tr></table></figure>
<p>如果accepts方法没有参数，则返回所有支持的类型（text/html,application/xhtml+xml,image/webp,application/xml,<em>/</em>）。</p>
<p>如果accepts方法的参数有多个参数，则返回最佳匹配。如果都不匹配则返回false，并向客户端抛出一个406”Not Acceptable“错误。</p>
<p>如果HTTP请求没有Accept字段，那么accepts方法返回它的第一个参数。</p>
<p>accepts方法可以根据不同Accept字段，向客户端返回不同的字段。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.request.accepts(<span class="string">'json'</span>, <span class="string">'html'</span>, <span class="string">'text'</span>)) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'json'</span>: <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'html'</span>: <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'text'</span>: <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: <span class="keyword">this</span>.throw(<span class="number">406</span>, <span class="string">'json, html, or text only'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（21）this.request.acceptsEncodings(encodings)</p>
<p>该方法根据HTTP请求的Accept-Encoding字段，返回最佳匹配，如果没有合适的匹配，则返回false。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accept-Encoding: gzip</span></span><br><span class="line"><span class="keyword">this</span>.request.acceptsEncodings(<span class="string">'gzip'</span>, <span class="string">'deflate'</span>, <span class="string">'identity'</span>);</span><br><span class="line"><span class="comment">// "gzip"</span></span><br><span class="line"><span class="keyword">this</span>.request.acceptsEncodings([<span class="string">'gzip'</span>, <span class="string">'deflate'</span>, <span class="string">'identity'</span>]);</span><br><span class="line"><span class="comment">// "gzip"</span></span><br></pre></td></tr></table></figure>
<p>注意，acceptEncodings方法的参数必须包括identity（意为不编码）。</p>
<p>如果HTTP请求没有Accept-Encoding字段，acceptEncodings方法返回所有可以提供的编码方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="keyword">this</span>.request.acceptsEncodings();</span><br><span class="line"><span class="comment">// ["gzip", "deflate", "identity"]</span></span><br></pre></td></tr></table></figure>
<p>如果都不匹配，acceptsEncodings方法返回false，并向客户端抛出一个406“Not Acceptable”错误。</p>
<p>（22）this.request.acceptsCharsets(charsets)</p>
<p>该方法根据HTTP请求的Accept-Charset字段，返回最佳匹配，如果没有合适的匹配，则返回false。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5</span></span><br><span class="line"><span class="keyword">this</span>.request.acceptsCharsets(<span class="string">'utf-8'</span>, <span class="string">'utf-7'</span>);</span><br><span class="line"><span class="comment">// =&gt; "utf-8"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.request.acceptsCharsets([<span class="string">'utf-7'</span>, <span class="string">'utf-8'</span>]);</span><br><span class="line"><span class="comment">// =&gt; "utf-8"</span></span><br></pre></td></tr></table></figure>
<p>如果acceptsCharsets方法没有参数，则返回所有可接受的匹配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5</span></span><br><span class="line"><span class="keyword">this</span>.request.acceptsCharsets();</span><br><span class="line"><span class="comment">// ["utf-8", "utf-7", "iso-8859-1"]</span></span><br></pre></td></tr></table></figure>
<p>如果都不匹配，acceptsCharsets方法返回false，并向客户端抛出一个406“Not Acceptable”错误。</p>
<p>（23）this.request.acceptsLanguages(langs)</p>
<p>该方法根据HTTP请求的Accept-Language字段，返回最佳匹配，如果没有合适的匹配，则返回false。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accept-Language: en;q=0.8, es, pt</span></span><br><span class="line"><span class="keyword">this</span>.request.acceptsLanguages(<span class="string">'es'</span>, <span class="string">'en'</span>);</span><br><span class="line"><span class="comment">// "es"</span></span><br><span class="line"><span class="keyword">this</span>.request.acceptsLanguages([<span class="string">'en'</span>, <span class="string">'es'</span>]);</span><br><span class="line"><span class="comment">// "es"</span></span><br></pre></td></tr></table></figure>
<p>如果acceptsCharsets方法没有参数，则返回所有可接受的匹配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accept-Language: en;q=0.8, es, pt</span></span><br><span class="line"><span class="keyword">this</span>.request.acceptsLanguages();</span><br><span class="line"><span class="comment">// ["es", "pt", "en"]</span></span><br></pre></td></tr></table></figure>
<p>如果都不匹配，acceptsLanguages方法返回false，并向客户端抛出一个406“Not Acceptable”错误。</p>
<p>（24）this.request.socket</p>
<p>返回HTTP请求的socket。</p>
<p>（25）this.request.get(field)</p>
<p>返回HTTP请求指定的字段。</p>
<h2 id="Response对象">Response对象</h2><p>Response对象表示HTTP回应。</p>
<p>（1）this.response.header</p>
<p>返回HTTP回应的头信息。</p>
<p>（2）this.response.socket</p>
<p>返回HTTP回应的socket。</p>
<p>（3）this.response.status</p>
<p>返回HTTP回应的状态码。默认情况下，该属性没有值。该属性可读写，设置时等于一���整数。</p>
<p>（4）this.response.message</p>
<p>返回HTTP回应的状态信息。该属性与<code>this.response.message</code>是配对的。该属性可读写。</p>
<p>（5）this.response.length</p>
<p>返回HTTP回应的Content-Length字段。该属性可读写，如果没有设置它的值，koa会自动从this.request.body推断。</p>
<p>（6）this.response.body</p>
<p>返回HTTP回应的信息体。该属性可读写，它的值可能有以下几种类型。</p>
<ul>
<li>字符串：Content-Type字段默认为text/html或text/plain，字符集默认为utf-8，Content-Length字段同时设定。</li>
<li>二进制Buffer：Content-Type字段默认为application/octet-stream，Content-Length字段同时设定。</li>
<li>Stream：Content-Type字段默认为application/octet-stream。</li>
<li>JSON对象：Content-Type字段默认为application/json。</li>
<li>null（表示没有信息体）</li>
</ul>
<p>如果<code>this.response.status</code>没设置，Koa会自动将其设为200或204。</p>
<p>（7）this.response.get(field)</p>
<p>返回HTTP回应的指定字段。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> etag = <span class="keyword">this</span>.get(<span class="string">'ETag'</span>);</span><br></pre></td></tr></table></figure>
<p>注意，get方法的参数是区分大小写的。</p>
<p>（8）this.response.set()</p>
<p>设置HTTP回应的指定字段。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.set(<span class="string">'Cache-Control'</span>, <span class="string">'no-cache'</span>);</span><br></pre></td></tr></table></figure>
<p>set方法也可以接受一个对象作为参数，同时为多个字段指定值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.set(&#123;</span><br><span class="line">  <span class="string">'Etag'</span>: <span class="string">'1234'</span>,</span><br><span class="line">  <span class="string">'Last-Modified'</span>: date</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>（9）this.response.remove(field)</p>
<p>移除HTTP回应的指定字段。</p>
<p>（10）this.response.type</p>
<p>返回HTTP回应的Content-Type字段，不包括“charset”参数的部分。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ct = <span class="keyword">this</span>.reponse.type;</span><br><span class="line"><span class="comment">// "image/png"</span></span><br></pre></td></tr></table></figure>
<p>该属性是可写的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.reponse.type = <span class="string">'text/plain; charset=utf-8'</span>;</span><br><span class="line"><span class="keyword">this</span>.reponse.type = <span class="string">'image/png'</span>;</span><br><span class="line"><span class="keyword">this</span>.reponse.type = <span class="string">'.png'</span>;</span><br><span class="line"><span class="keyword">this</span>.reponse.type = <span class="string">'png'</span>;</span><br></pre></td></tr></table></figure>
<p>设置type属性的时候，如果没有提供charset参数，Koa会判断是否自动设置。如果<code>this.response.type</code>设为html，charset默认设为utf-8；但如果<code>this.response.type</code>设为text/html，就不会提供charset的默认值。</p>
<p>（10）this.response.is(types…)</p>
<p>该方法类似于<code>this.request.is()</code>，用于检查HTTP回应的类型是否为支持的类型。</p>
<p>它可以在中间件中起到处理不同格式内容的作用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minify = <span class="built_in">require</span>(<span class="string">'html-minifier'</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> *<span class="title">minifyHTML</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> next;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.response.is(<span class="string">'html'</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body = <span class="keyword">this</span>.response.body;</span><br><span class="line">  <span class="keyword">if</span> (!body || body.pipe) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Buffer.isBuffer(body)) body = body.toString();</span><br><span class="line">  <span class="keyword">this</span>.response.body = minify(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码是一个中间件，如果输出的内容类型为HTML，就会进行最小化处理。</p>
<p>（11）this.response.redirect(url, [alt])</p>
<p>该方法执行302跳转到指定网址。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.redirect(<span class="string">'back'</span>);</span><br><span class="line"><span class="keyword">this</span>.redirect(<span class="string">'back'</span>, <span class="string">'/index.html'</span>);</span><br><span class="line"><span class="keyword">this</span>.redirect(<span class="string">'/login'</span>);</span><br><span class="line"><span class="keyword">this</span>.redirect(<span class="string">'http://google.com'</span>);</span><br></pre></td></tr></table></figure>
<p>如果redirect方法的第一个参数是back，将重定向到HTTP请求的Referrer字段指定的网址，如果没有该字段，则重定向到第二个参数或“/”网址。</p>
<p>如果想修改302状态码，或者修改body文字，可以采用下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.status = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">this</span>.redirect(<span class="string">'/cart'</span>);</span><br><span class="line"><span class="keyword">this</span>.body = <span class="string">'Redirecting to shopping cart'</span>;</span><br></pre></td></tr></table></figure>
<p>（12）this.response.attachment([filename])</p>
<p>该方法将HTTP回应的Content-Disposition字段，设为“attachment”，提示浏览器下载指定文件。</p>
<p>（13）this.response.headerSent</p>
<p>该方法返回一个布尔值，检查是否HTTP回应已经发出。</p>
<p>（14）this.response.lastModified</p>
<p>该属性以Date对象的形式，返回HTTP回应的Last-Modified字段（如果该字段存在）。该属性可写。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.response.lastModified = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure>
<p>（15）this.response.etag</p>
<p>该属性设置HTTP回应的ETag字段。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.response.etag = crypto.createHash(<span class="string">'md5'</span>).update(<span class="keyword">this</span>.body).digest(<span class="string">'hex'</span>);</span><br></pre></td></tr></table></figure>
<p>注意，不能用该属性读取ETag字段。</p>
<p>（16）this.response.vary(field)</p>
<p>该方法将参数添加到HTTP回应的Vary字段。</p>
<h2 id="CSRF攻击">CSRF攻击</h2><p>CSRF攻击是指用户的session被劫持，用来冒充用户的攻击。</p>
<p>koa-csrf插件用来防止CSRF攻击。原理是在session之中写入一个秘密的token，用户每次使用POST方法提交数据的时候，必须含有这个token，否则就会抛出错误。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>);</span><br><span class="line"><span class="keyword">var</span> csrf = <span class="built_in">require</span>(<span class="string">'koa-csrf'</span>);</span><br><span class="line"><span class="keyword">var</span> route = <span class="built_in">require</span>(<span class="string">'koa-route'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">module</span>.exports = koa();</span><br><span class="line"></span><br><span class="line">app.keys = [<span class="string">'session key'</span>, <span class="string">'csrf example'</span>];</span><br><span class="line">app.use(session(app));</span><br><span class="line"></span><br><span class="line">app.use(csrf());</span><br><span class="line"></span><br><span class="line">app.use(route.get(<span class="string">'/token'</span>, token));</span><br><span class="line">app.use(route.post(<span class="string">'/post'</span>, post));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">token</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.body = <span class="keyword">this</span>.csrf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">post</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.body = &#123;ok: <span class="literal">true</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>POST请求含有token，可以是以下几种方式之一，koa-csrf插件就能获得token。</p>
<ul>
<li>表单的_csrf字段</li>
<li>查询字符串的_csrf字段</li>
<li>HTTP请求头信息的x-csrf-token字段</li>
<li>HTTP请求头信息的x-xsrf-token字段</li>
</ul>
<h2 id="数据压缩">数据压缩</h2><p>koa-compress模块可以实现数据压缩。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'koa-compress'</span>)())</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'text/plain'</span></span><br><span class="line">  <span class="keyword">this</span>.body = fs.createReadStream(<span class="string">'filename.txt'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="源码解读">源码解读</h2><p>每一个网站就是一个app，它由<code>lib/application</code>定义。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Application</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Application)) <span class="keyword">return</span> <span class="keyword">new</span> Application;</span><br><span class="line">  <span class="keyword">this</span>.env = process.env.NODE_ENV || <span class="string">'development'</span>;</span><br><span class="line">  <span class="keyword">this</span>.subdomainOffset = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">this</span>.middleware = [];</span><br><span class="line">  <span class="keyword">this</span>.context = <span class="built_in">Object</span>.create(context);</span><br><span class="line">  <span class="keyword">this</span>.request = <span class="built_in">Object</span>.create(request);</span><br><span class="line">  <span class="keyword">this</span>.response = <span class="built_in">Object</span>.create(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = Application.prototype;</span><br><span class="line"></span><br><span class="line">exports = <span class="built_in">module</span>.exports = Application;</span><br></pre></td></tr></table></figure>
<p><code>app.use()</code>用于注册中间件，即将Generator函数放入中间件数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.use = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.experimental) &#123;</span><br><span class="line">    <span class="comment">// es7 async functions are allowed</span></span><br><span class="line">    assert(fn &amp;&amp; <span class="string">'GeneratorFunction'</span> == fn.constructor.name, <span class="string">'app.use() requires a generator function'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  debug(<span class="string">'use %s'</span>, fn._name || fn.name || <span class="string">'-'</span>);</span><br><span class="line">  <span class="keyword">this</span>.middleware.push(fn);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>app.listen()</code>就是<code>http.createServer(app.callback()).listen(...)</code>的缩写。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">app.listen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  debug(<span class="string">'listen'</span>);</span><br><span class="line">  <span class="keyword">var</span> server = http.createServer(<span class="keyword">this</span>.callback());</span><br><span class="line">  <span class="keyword">return</span> server.listen.apply(server, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mw = [respond].concat(<span class="keyword">this</span>.middleware);</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="keyword">this</span>.experimental</span><br><span class="line">    ? compose_es7(mw)</span><br><span class="line">    : co.wrap(compose(mw));</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.listeners(<span class="string">'error'</span>).length) <span class="keyword">this</span>.on(<span class="string">'error'</span>, <span class="keyword">this</span>.onerror);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.statusCode = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">var</span> ctx = self.createContext(req, res);</span><br><span class="line">    onFinished(res, ctx.onerror);</span><br><span class="line">    fn.call(ctx).catch(ctx.onerror);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>app.callback()</code>会返回一个函数，用来处理HTTP请求。它的第一行<code>mw = [respond].concat(this.middleware)</code>，表示将respond函数（这也是一个Generator函数）放入<code>this.middleware</code>，现在mw就变成了<code>[respond, S1, S2, S3]</code>。</p>
<p><code>compose(mw)</code>将中间件数组转为一个层层调用的Generator函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middleware</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> *(<span class="params">next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!next) next = noop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = middleware.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      next = middleware[i].call(<span class="keyword">this</span>, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> *next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">noop</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，下一个generator函数总是上一个Generator函数的参数，从而保证了层层调用。</p>
<p><code>var fn = co.wrap(gen)</code>则是将Generator函数包装成一个自动执行的函数，并且返回一个Promise。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//co package</span></span><br><span class="line">co.wrap = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> co.call(<span class="keyword">this</span>, fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>由于<code>co.wrap(compose(mw))</code>执行后，返回的是一个Promise，所以可以对其使用catch方法指定捕捉错误的回调函数<code>fn.call(ctx).catch(ctx.onerror)</code>。</p>
<p>将所有的上下文变量都放进context对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.createContext = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.context);</span><br><span class="line">  <span class="keyword">var</span> request = context.request = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.request);</span><br><span class="line">  <span class="keyword">var</span> response = context.response = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.response);</span><br><span class="line">  context.app = request.app = response.app = <span class="keyword">this</span>;</span><br><span class="line">  context.req = request.req = response.req = req;</span><br><span class="line">  context.res = request.res = response.res = res;</span><br><span class="line">  request.ctx = response.ctx = context;</span><br><span class="line">  request.response = response;</span><br><span class="line">  response.request = request;</span><br><span class="line">  context.onerror = context.onerror.bind(context);</span><br><span class="line">  context.originalUrl = request.originalUrl = req.url;</span><br><span class="line">  context.cookies = <span class="keyword">new</span> Cookies(req, res, <span class="keyword">this</span>.keys);</span><br><span class="line">  context.accept = request.accept = accepts(req);</span><br><span class="line">  context.state = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>真正处理HTTP请求的是下面这个Generator函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">respond</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> *next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allow bypassing koa</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span> === <span class="keyword">this</span>.respond) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> res = <span class="keyword">this</span>.res;</span><br><span class="line">  <span class="keyword">if</span> (res.headersSent || !<span class="keyword">this</span>.writable) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body = <span class="keyword">this</span>.body;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="keyword">this</span>.status;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ignore body</span></span><br><span class="line">  <span class="keyword">if</span> (statuses.empty[code]) &#123;</span><br><span class="line">    <span class="comment">// strip headers</span></span><br><span class="line">    <span class="keyword">this</span>.body = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> res.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'HEAD'</span> == <span class="keyword">this</span>.method) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isJSON(body)) <span class="keyword">this</span>.length = Buffer.byteLength(<span class="built_in">JSON</span>.stringify(body));</span><br><span class="line">    <span class="keyword">return</span> res.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// status body</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">null</span> == body) &#123;</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'text'</span>;</span><br><span class="line">    body = <span class="keyword">this</span>.message || <span class="built_in">String</span>(code);</span><br><span class="line">    <span class="keyword">this</span>.length = Buffer.byteLength(body);</span><br><span class="line">    <span class="keyword">return</span> res.end(body);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// responses</span></span><br><span class="line">  <span class="keyword">if</span> (Buffer.isBuffer(body)) <span class="keyword">return</span> res.end(body);</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'string'</span> == <span class="keyword">typeof</span> body) <span class="keyword">return</span> res.end(body);</span><br><span class="line">  <span class="keyword">if</span> (body <span class="keyword">instanceof</span> Stream) <span class="keyword">return</span> body.pipe(res);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// body: json</span></span><br><span class="line">  body = <span class="built_in">JSON</span>.stringify(body);</span><br><span class="line">  <span class="keyword">this</span>.length = Buffer.byteLength(body);</span><br><span class="line">  res.end(body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考链接">参考链接</h2><ul>
<li><a href="https://github.com/koajs/koa/blob/master/docs/guide.md" target="_blank" rel="external">Koa Guide</a></li>
<li>William XING, <a href="http://william.xingyp.com/is-koa-js-right-for-me/" target="_blank" rel="external">Is Koa.js right for me?</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Koa是Express同组人员开发，但是使用了Generator函数，进行了架构的重新设计，语法和内部结构都进行了升级。]]>
    
    </summary>
    
      <category term="koa" scheme="http://miclee.cn/tags/koa/"/>
    
      <category term="nodejs" scheme="http://miclee.cn/tags/nodejs/"/>
    
      <category term="nodejs" scheme="http://miclee.cn/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[express框架]]></title>
    <link href="http://miclee.cn/2015/07/03/express/"/>
    <id>http://miclee.cn/2015/07/03/express/</id>
    <published>2015-07-02T16:00:00.000Z</published>
    <updated>2015-08-27T07:20:02.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em> Express是目前最流行的基于Node.js的Web开发框架，提供各种模块，可以快速地搭建一个具有完整功能的网站 </em></strong><br><a id="more"></a></p>
<hr>
<h2 id="概述">概述</h2><p>Express是目前最流行的基于Node.js的Web开发框架，提供各种模块，可以快速地搭建一个具有完整功能的网站。</p>
<p>Express的上手非常简单，首先新建一个项目目录，假定叫做hello-world。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ mkdir hello-world</span><br></pre></td></tr></table></figure>
<p>进入该目录，新建一个package.json文件，内容如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"hello-world"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"hello world test app"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"express"</span>: <span class="string">"4.x"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码定义了项目的名称、描述、版本等，并且指定需要4.0版本以上的Express。</p>
<p>然后，就可以安装了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>安装了Express及其依赖的模块以后，在项目根目录下，新建一个启动文件，假定叫做index.js。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码运行之后，访问<code>http://localhost:8080</code>，就会在浏览器中打开当前目录的public子目录。如果public目录之中有一个图片文件my_image.png，那么可以用<code>http://localhost:8080/my_image.png</code>访问该文件。</p>
<p>你也可以在index.js之中，生成动态网页。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello world!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>然后，在命令行下运行下面的命令，就可以在浏览器中访问项目网站了。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ node index</span><br></pre></td></tr></table></figure>
<p>默认情况下，网站运行在本机的3000端口，网页显示Hello World。</p>
<p>index.js中的<code>app.get</code>用于指定不同的访问路径所对应的回调函数，这叫做“路由”（routing）。上面代码只指定了根目录的回调函数，因此只有一个路由记录。实际应用中，可能有多个路由记录。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello world!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/customer'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'customer page'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/admin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'admin page'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>这时，最好就把路由放到一个单独的文件中，比如新建一个routes子目录。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// routes/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'Hello world'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  app.get(<span class="string">'/customer'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'customer page'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  app.get(<span class="string">'/admin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'admin page'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后，原来的index.js就变成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> routes = <span class="built_in">require</span>(<span class="string">'./routes'</span>)(app);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<h3 id="搭建HTTPs服务器">搭建HTTPs服务器</h3><p>使用Express搭建HTTPs加密服务器，也很简单。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  key: fs.readFileSync(<span class="string">'E:/ssl/myserver.key'</span>),</span><br><span class="line">  cert: fs.readFileSync(<span class="string">'E:/ssl/myserver.crt'</span>),</span><br><span class="line">  passphrase: <span class="string">'1234'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World Expressjs'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = https.createServer(options, app);</span><br><span class="line">server.listen(<span class="number">8084</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running on port 8084'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="运行原理">运行原理</h2><h3 id="底层：http模块">底层：http模块</h3><p>Express框架建立在node.js内置的http模块上。 http模块生成服务器的原始代码如下。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</span><br><span class="line">  response.end(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="string">"localhost"</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码的关键是http模块的createServer方法，表示生成一个HTTP服务器实例。该方法接受一个回调函数，该回调函数的参数，分别为代表HTTP请求和HTTP回应的request对象和response对象。</p>
<h3 id="对http模块的再包装">对http模块的再包装</h3><p>Express框架的核心是对http模块的再包装。上面的代码用Express改写如下。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'Hello world!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  response.end(<span class="string">"Hello world!\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure>
<p>比较两段代码，可以看到它们非常接近，唯一的差别是createServer方法的参数，从一个回调函数变成了一个Epress对象的实例。而这个实例使用了use方法，加载了与上一段代码相同的回调函数。</p>
<p>Express框架等于在http模块之上，加了一个中间层，而use方法则相当于调用中间件。</p>
<h3 id="什么是中间件">什么是中间件</h3><p>简单说，中间件（middleware）就是处理HTTP请求的函数，用来完成各种特定的任务，比如检查用户是否登录、分析数据、以及其他在需要最终将数据发送给用户之前完成的任务。它最大的特点就是，一个中间件处理完，再传递给下一个中间件。</p>
<p>node.js的内置模块http的createServer方法，可以生成一个服务器实例，该实例允许在运行过程中，调用一系列函数（也就是中间件）。当一个HTTP请求进入服务器，服务器实例会调用第一个中间件，完成后根据设置，决定是否再调用下一个中间件。中间件内部可以使用服务器实例的response对象（ServerResponse，即回调函数的第二个参数），以及一个next回调函数（即第三个参数）。每个中间件都可以对HTTP请求（request对象）做出回应，并且决定是否调用next方法，将request对象再传给下一个中间件。</p>
<p>一个不进行任何操作、只传递request对象的中间件，大概是下面这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uselessMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码的next为中间件的回调函数。如果它带有参数，则代表抛出一个错误，参数为错误文本。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uselessMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  next(<span class="string">'出错了！'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抛出错误以后，后面的中间件将不再执行，直到发现一个错误处理函数为止。</p>
<h3 id="use方法">use方法</h3><p>use是express调用中间件的方法，它返回一个函数。下面是一个连续调用两个中间件的例子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"In comes a "</span> + request.method + <span class="string">" to "</span> + request.url);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  response.end(<span class="string">"Hello world!\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码先调用第一个中间件，在控制台输出一行信息，然后通过next方法，调用第二个中间件，输出HTTP回应。由于第二个中间件没有调用next方法，所以不再request对象就不再向后传递了。</p>
<p>使用use方法，可以根据请求的网址，返回不同的网页内容。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url == <span class="string">"/"</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">    response.end(<span class="string">"Welcome to the homepage!\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url == <span class="string">"/about"</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">404</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  response.end(<span class="string">"404 error!\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码通过request.url属性，判断请求的网址，从而返回不同的内容。</p>
<p>除了在回调函数内部，判断请求的网址，Express也允许将请求的网址写在use方法的第一个参数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, someMiddleware);</span><br></pre></td></tr></table></figure>
<p>上面代码表示，只对根目录的请求，调用某个中间件。</p>
<p>因此，上面的代码可以写成下面的样子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">    response.end(<span class="string">"Welcome to the homepage!\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">"/about"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">    response.end(<span class="string">"Welcome to the about page!\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">404</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  response.end(<span class="string">"404 error!\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Express的方法">Express的方法</h2><h3 id="all方法和HTTP动词方法">all方法和HTTP动词方法</h3><p>针对不同的请求，Express提供了use方法的一些别名。比如，上面代码也可以用别名的形式来写。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.end(<span class="string">"Welcome to the homepage!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/about"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.end(<span class="string">"Welcome to the about page!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.end(<span class="string">"404!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码的all方法表示，所有请求都必须通过该中间件，参数中的“*”表示对所有路径有效。get方法则是只有GET动词的HTTP请求通过该中间件，它的第一个参数是请求的路径。由于get方法的回调函数没有调用next方法，所以只要有一个中间件被调用了，后面的中间件就不会再被调用了。</p>
<p>除了get方法以外，Express还提供post、put、delete方法，即HTTP动词都是Express的方法。</p>
<p>这些方法的第一个参数，都是请求的路径。除了绝对匹配以外，Express允许模式匹配。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.get(<span class="string">"/hello/:who"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.end(<span class="string">"Hello, "</span> + req.params.who + <span class="string">"."</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码将匹配“/hello/alice”网址，网址中的alice将被捕获，作为req.params.who属性的值。需要注意的是，捕获后需要对网址进行检查，过滤不安全字符，上面的写法只是为了演示，生产中不应这样直接使用用户提供的值。</p>
<p>如果在模式参数后面加上问号，表示该参数可选。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.get(<span class="string">'/hello/:who?'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.params.id) &#123;</span><br><span class="line">        res.end(<span class="string">"Hello, "</span> + req.params.who + <span class="string">"."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">"Hello, Guest."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>下面是一些更复杂的模式匹配的例子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.get(<span class="string">'/forum/:fid/thread/:tid'</span>, middleware)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配/commits/71dbb9c</span></span><br><span class="line"><span class="comment">// 或/commits/71dbb9c..4c084f9这样的git格式的网址</span></span><br><span class="line">app.get(<span class="regexp">/^\/commits\/(\w+)(?:\.\.(\w+))?$/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> from = req.params[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> to = req.params[<span class="number">1</span>] || <span class="string">'HEAD'</span>;</span><br><span class="line">  res.send(<span class="string">'commit range '</span> + from + <span class="string">'..'</span> + to);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="set方法">set方法</h3><p>set方法用于指定变量的值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.set(<span class="string">"views"</span>, __dirname + <span class="string">"/views"</span>);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">"view engine"</span>, <span class="string">"jade"</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码使用set方法，为系统变量“views”和“view engine”指定值。</p>
<h3 id="response对象">response对象</h3><p><strong>（1）response.redirect方法</strong></p>
<p>response.redirect方法允许网址的重定向。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">response.redirect(<span class="string">"/hello/anime"</span>);</span><br><span class="line">response.redirect(<span class="string">"http://www.example.com"</span>);</span><br><span class="line">response.redirect(<span class="number">301</span>, <span class="string">"http://www.example.com"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>（2）response.sendFile方法</strong></p>
<p>response.sendFile方法用于发送文件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">response.sendFile(<span class="string">"/path/to/anime.mp4"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>（3）response.render方法</strong></p>
<p>response.render方法用于渲染网页模板。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.render(<span class="string">"index"</span>, &#123; message: <span class="string">"Hello World"</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码使用render方法，将message变量传入index模板，渲染成HTML网页。</p>
<h3 id="requst对象">requst对象</h3><p><strong>（1）request.ip</strong></p>
<p>request.ip属性用于获得HTTP请求的IP地址。</p>
<p><strong>（2）request.files</strong></p>
<p>request.files用于获取上传的文件。</p>
<h2 id="项目开发实例">项目开发实例</h2><h3 id="编写启动脚本">编写启动脚本</h3><p>上一节使用express命令自动建立项目，也可以不使用这个命令，手动新建所有文件。</p>
<p>先建立一个项目目录（假定这个目录叫做demo）。进入该目录，新建一个package.json文件，写入项目的配置信息。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"name"</span>: <span class="string">"demo"</span>,</span><br><span class="line">   <span class="string">"description"</span>: <span class="string">"My First Express App"</span>,</span><br><span class="line">   <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">   <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">      <span class="string">"express"</span>: <span class="string">"3.x"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在项目目录中，新建文件app.js。项目的代码就放在这个文件里面。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br></pre></td></tr></table></figure>
<p>上面代码首先加载express模块，赋给变量express。然后，生成express实例，赋给变量app。</p>
<p>接着，设定express实例的参数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 设定port变量，意为访问端口</span></span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定views变量，意为视图存放的目录</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定view engine变量，意为网页模板引擎</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>);</span><br><span class="line"></span><br><span class="line">app.use(express.favicon());</span><br><span class="line">app.use(express.logger(<span class="string">'dev'</span>));</span><br><span class="line">app.use(express.bodyParser());</span><br><span class="line">app.use(express.methodOverride());</span><br><span class="line">app.use(app.router);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定静态文件目录，比如本地文件</span></span><br><span class="line"><span class="comment">// 目录为demo/public/images，访问</span></span><br><span class="line"><span class="comment">// 网址则显示为http://localhost:3000/images</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br></pre></td></tr></table></figure>
<p>上面代码中的set方法用于设定内部变量，use方法用于调用express的中间件。</p>
<p>最后，调用实例方法listen，让其监听事先设定的端口（3000）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.listen(app.get(<span class="string">'port'</span>));</span><br></pre></td></tr></table></figure>
<p>这时，运行下面的命令，就可以在浏览器访问<a href="http://127.0.0.1:3000。" target="_blank" rel="external">http://127.0.0.1:3000。</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>网页提示“Cannot GET /”，表示没有为网站的根路径指定可以显示的内容。所以，下一步就是配置路由。</p>
<h3 id="配置路由">配置路由</h3><p>所谓“路由”，就是指为不同的访问路径，指定不同的处理方法。</p>
<p><strong>（1）指定根路径</strong></p>
<p>在app.js之中，先指定根路径的处理方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.send(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码的get方法，表示处理客户端发出的GET请求。相应的，还有app.post、app.put、app.del（delete是JavaScript保留字，所以改叫del）方法。</p>
<p>get方法的第一个参数是访问路径，正斜杠（/）就代表根路径；第二个参数是回调函数，它的req参数表示客户端发来的HTTP请求，res参数代表发向客户端的HTTP回应，这两个参数都是对象。在回调函数内部，使用HTTP回应的send方法，表示向浏览器发送一个字符串。然后，运行下面的命令。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>此时，在浏览器中访问<a href="http://127.0.0.1:3000，网页就会显示“Hello" target="_blank" rel="external">http://127.0.0.1:3000，网页就会显示“Hello</a> World”。</p>
<p>如果需要指定HTTP头信息，回调函数就必须换一种写法，要使用setHeader方法与end方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="string">'Hello World'</span>;</span><br><span class="line">  res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</span><br><span class="line">  res.setHeader(<span class="string">'Content-Length'</span>, body.length);</span><br><span class="line">  res.end(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>（2）指定特定路径</strong></p>
<p>上面是处理根目录的情况，下面再举一个例子。假定用户访问/api路径，希望返回一个JSON字符串。这时，get可以这样写。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.get(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">   response.send(&#123;name:<span class="string">"张三"</span>,age:<span class="number">40</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码表示，除了发送字符串，send方法还可以直接发送对象。重新启动node以后，再访问路径/api，浏览器就会显示一个JSON对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">40</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们也可以把app.get的回调函数，封装成模块。先在routes目录下面建立一个api.js文件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// routes/api.js</span></span><br><span class="line"></span><br><span class="line">exports.index = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.json(<span class="number">200</span>, &#123;name:<span class="string">"张三"</span>,age:<span class="number">40</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，在app.js中加载这个模块。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> api = <span class="built_in">require</span>(<span class="string">'./routes/api'</span>);</span><br><span class="line">app.get(<span class="string">'/api'</span>, api.index);</span><br></pre></td></tr></table></figure>
<p>现在访问时，就会显示与上一次同样的结果。</p>
<p>如果只向浏览器发送简单的文本信息，上面的方法已经够用；但是如果要向浏览器发送复杂的内容，还是应该使用网页模板。</p>
<h3 id="静态网页模板">静态网页模板</h3><p>在项目目录之中，建立一个子目录views，用于存放网页模板。</p>
<p>假定这个项目有三个路径：根路径（/）、自我介绍（/about）和文章（/article）。那么，app.js可以这样写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/about.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/article'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/article.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码表示，三个路径分别对应views目录中的三个模板：index.html、about.html和article.html。另外，向服务器发送信息的方法，从send变成了sendfile，后者专门用于发送文件。</p>
<p>假定index.html的内容如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Express Demo<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="title">a</span>&gt;</span> - <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/about"</span>&gt;</span>自我介绍<span class="tag">&lt;/<span class="title">a</span>&gt;</span> - <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/article"</span>&gt;</span>文章<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面代码是一个静态网页。如果想要展示动态内容，就必须使用动态网页模板。</p>
<h2 id="动态网页模板">动态网页模板</h2><p>网站真正的魅力在于动态网页，下面我们来看看，如何制作一个动态网页的网站。</p>
<h3 id="安装模板引擎">安装模板引擎</h3><p>Express支持多种模板引擎，这里采用Handlebars模板引擎的服务器端版本<a href="https://github.com/donpark/hbs" target="_blank" rel="external">hbs</a>模板引擎。</p>
<p>先安装hbs。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install hbs --save-dev</span><br></pre></td></tr></table></figure>
<p>上面代码将hbs模块，安装在项目目录的子目录node_modules之中。save-dev参数表示，将依赖关系写入package.json文件。安装以后的package.json文件变成下面这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// package.json文件</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"demo"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"My First Express App"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"express"</span>: <span class="string">"3.x"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"hbs"</span>: <span class="string">"~2.3.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>安装模板引擎之后，就要改写app.js。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// app.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载hbs模块</span></span><br><span class="line"><span class="keyword">var</span> hbs = <span class="built_in">require</span>(<span class="string">'hbs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定模板文件的后缀名为html</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行hbs模块</span></span><br><span class="line">app.engine(<span class="string">'html'</span>, hbs.__express);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'about'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/article'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'article'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码改用render方法，对网页模板进行渲染。render方法的参数就是模板的文件名，默认放在子目录views之中，后缀名已经在前面指定为html，这里可以省略。所以，res.render(‘index’) 就是指，把子目录views下面的index.html文件，交给模板引擎hbs渲染。</p>
<h3 id="新建数据脚本">新建数据脚本</h3><p>渲染是指将数据代入模板的过程。实际运用中，数据都是保存在数据库之中的，这里为了简化问题，假定数据保存在一个脚本文件中。</p>
<p>在项目目录中，新建一个文件blog.js，用于存放数据。blog.js的写法符合CommonJS规范，使得它可以被require语句加载。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// blog.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> entries = [</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">1</span>, <span class="string">"title"</span>:<span class="string">"第一篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/2/2013"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">2</span>, <span class="string">"title"</span>:<span class="string">"第二篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/3/2013"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">3</span>, <span class="string">"title"</span>:<span class="string">"第三篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/4/2013"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">4</span>, <span class="string">"title"</span>:<span class="string">"第四篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/5/2013"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">5</span>, <span class="string">"title"</span>:<span class="string">"第五篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/10/2013"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">6</span>, <span class="string">"title"</span>:<span class="string">"第六篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/12/2013"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">exports.getBlogEntries = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> entries;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.getBlogEntry = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; entries.length; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(entries[i].id == id) <span class="keyword">return</span> entries[i];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="新建网页模板">新建网页模板</h3><p>接着，新建模板文件index.html。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- views/index.html文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>文章列表<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;"&#123;&#123;"&#125;&#125;#each entries&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/article/&#123;&#123;"</span><span class="value">&#123;&#123;"&#125;&#125;id&#125;&#125;"</span>&gt;</span>&#123;&#123;"&#123;&#123;"&#125;&#125;title&#125;&#125;<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">br</span>/&gt;</span></span><br><span class="line">      Published: &#123;&#123;"&#123;&#123;"&#125;&#125;published&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">&#123;&#123;"&#123;&#123;"&#125;&#125;/each&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>模板文件about.html。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- views/about.html文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>自我介绍<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>正文<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>模板文件article.html。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- views/article.html文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>&#123;&#123;"&#123;&#123;"&#125;&#125;blog.title&#125;&#125;<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">Published: &#123;&#123;"&#123;&#123;"&#125;&#125;blog.published&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;"&#123;&#123;"&#125;&#125;blog.body&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，上面三个模板文件都只有网页主体。因为网页布局是共享的，所以布局的部分可以单独新建一个文件layout.html。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- views/layout.html文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">title</span>&gt;</span>&#123;&#123;"&#123;&#123;"&#125;&#125;title&#125;&#125;<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123;"&#123;&#123;&#123;"&#125;&#125;body&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="title">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="title">a</span>&gt;</span> - <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/about"</span>&gt;</span>自我介绍<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="渲染模板">渲染模板</h3><p>最后，改写app.js文件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// app.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hbs = <span class="built_in">require</span>(<span class="string">'hbs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载数据模块</span></span><br><span class="line"><span class="keyword">var</span> blogEngine = <span class="built_in">require</span>(<span class="string">'./blog'</span>);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line">app.engine(<span class="string">'html'</span>, hbs.__express);</span><br><span class="line">app.use(express.bodyParser());</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'index'</span>,&#123;title:<span class="string">"最近文章"</span>, entries:blogEngine.getBlogEntries()&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'about'</span>, &#123;title:<span class="string">"自我介绍"</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/article/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> entry = blogEngine.getBlogEntry(req.params.id);</span><br><span class="line">   res.render(<span class="string">'article'</span>,&#123;title:entry.title, blog:entry&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码中的render方法，现在加入了第二个参数，表示模板变量绑定的数据。</p>
<p>现在重启node服务器，然后访问<a href="http://127.0.0.1:3000。" target="_blank" rel="external">http://127.0.0.1:3000。</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>可以看得，模板已经使用加载的数据渲染成功了。</p>
<h3 id="指定静态文件目录">指定静态文件目录</h3><p>模板文件默认存放在views子目录。这时，如果要在网页中加载静态文件（比如样式表、图片等），就需要另外指定一个存放静态文件的目录。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br></pre></td></tr></table></figure>
<p>上面代码在文件app.js之中，指定静态文件存放的目录是public。于是，当浏览器发出非HTML文件请求时，服务器端就到public目录寻找这个文件。比如，浏览器发出如下的样式表请求：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;link href=<span class="string">"/bootstrap/css/bootstrap.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>服务器端就到public/bootstrap/css/目录中寻找bootstrap.css文件。</p>
<h2 id="ExpressJS_4-0的Router用法">ExpressJS 4.0的Router用法</h2><p>Express 4.0的Router用法，做了大幅改变，增加了很多新的功能。Router成了一个单独的组件，好像小型的express应用程序一样，有自己的use、get、param和route方法。</p>
<h3 id="基本用法">基本用法</h3><p>Express 4.0的router对象，需要单独新建。然后，使用该对象的HTTP动词方法，为不同的访问路径，指定回调函数；最后，挂载到某个路径</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'首页'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'关于'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, router);</span><br></pre></td></tr></table></figure>
<p>上面代码先定义了两个访问路径，然后将它们挂载到根目录。如果最后一行改为app.use(‘/app’, router)，则相当于/app和/app/about这两个路径，指定了回调函数。</p>
<p>这种挂载路径和router对象分离的做法，为程序带来了更大的灵活性，既可以定义多个router对象，也可以为将同一个router对象挂载到多个路径。</p>
<h3 id="router-route方法">router.route方法</h3><p>router实例对象的route方法，可以接受访问路径作为参数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.route(<span class="string">'/api'</span>)</span><br><span class="line">    .post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        Bear.find(<span class="function"><span class="keyword">function</span>(<span class="params">err, bears</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) res.send(err);</span><br><span class="line">            res.json(bears);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, router);</span><br></pre></td></tr></table></figure>
<h3 id="router中间件">router中间件</h3><p>use方法为router对象指定中间件，即在数据正式发给用户之前，对数据进行处理。下面就是一个中间件的例子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.method, req.url);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码中，回调函数的next参数，表示接受其他中间件的调用。函数体中的next()，表示将数据传递给下一个中间件。</p>
<p>注意，中间件的放置顺序很重要，等同于执行顺序。而且，中间件必须放在HTTP动词方法之前，否则不会执行。</p>
<h3 id="对路径参数的处理">对路径参数的处理</h3><p>router对象的param方法用于路径参数的处理，可以</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router.param(<span class="string">'name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next, name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对name进行验证或其他处理……</span></span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">    req.name = name;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/hello/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello '</span> + req.name + <span class="string">'!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码中，get方法为访问路径指定了name参数，param方法则是对name参数进行处理。注意，param方法必须放在HTTP动词方法之前。</p>
<h3 id="app-route">app.route</h3><p>假定app是Express的实例对象，Express 4.0为该对象提供了一个route属性。app.route实际上是express.Router()的缩写形式，除了直接挂载到根路径。因此，对同一个路径指定get和post方法的回调函数，可以写成链式形式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.route(<span class="string">'/login'</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.send(<span class="string">'this is the login form'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'processing'</span>);</span><br><span class="line">        res.send(<span class="string">'processing the login form!'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码的这种写法，显然非常简洁清晰。</p>
<h2 id="上传文件">上传文件</h2><p>首先，在网页插入上传文件的表单。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"/pictures/upload"</span> <span class="attribute">method</span>=<span class="value">"POST"</span> <span class="attribute">enctype</span>=<span class="value">"multipart/form-data"</span>&gt;</span></span><br><span class="line">  Select an image to upload:</span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">name</span>=<span class="value">"image"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"Upload Image"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后，服务器脚本建立指向<code>/upload</code>目录的路由。这时可以安装multer模块，它提供了上传文件的许多功能。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploading = multer(&#123;</span><br><span class="line">  dest: __dirname + <span class="string">'../public/uploads/'</span>,</span><br><span class="line">  <span class="comment">// 设定限制，每次最多上传1个文件，文件大小不超过1MB</span></span><br><span class="line">  limits: &#123;fileSize: <span class="number">1000000</span>, files:<span class="number">1</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/upload'</span>, uploading, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p>上面代码是上传文件到本地目录。下面是上传到Amazon S3的例子。</p>
<p>首先，在S3上面新增CORS配置文件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">CORSConfiguration</span> <span class="attribute">xmlns</span>=<span class="value">"http://s3.amazonaws.com/doc/2006-03-01/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">CORSRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">AllowedOrigin</span>&gt;</span>*<span class="tag">&lt;/<span class="title">AllowedOrigin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">AllowedMethod</span>&gt;</span>GET<span class="tag">&lt;/<span class="title">AllowedMethod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">AllowedMethod</span>&gt;</span>POST<span class="tag">&lt;/<span class="title">AllowedMethod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">AllowedMethod</span>&gt;</span>PUT<span class="tag">&lt;/<span class="title">AllowedMethod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">AllowedHeader</span>&gt;</span>*<span class="tag">&lt;/<span class="title">AllowedHeader</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">CORSRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">CORSConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的配置允许任意电脑向你的bucket发送HTTP请求。</p>
<p>然后，安装aws-sdk。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install aws-sdk --save</span><br></pre></td></tr></table></figure>
<p>下面是服务器脚本。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> aws = <span class="built_in">require</span>(<span class="string">'aws-sdk'</span>);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AWS_ACCESS_KEY = <span class="string">'your_AWS_access_key'</span></span><br><span class="line"><span class="keyword">var</span> AWS_SECRET_KEY = <span class="string">'your_AWS_secret_key'</span></span><br><span class="line"><span class="keyword">var</span> S3_BUCKET = <span class="string">'images_upload'</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/sign'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  aws.config.update(&#123;accessKeyId: AWS_ACCESS_KEY, secretAccessKey: AWS_SECRET_KEY&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> s3 = <span class="keyword">new</span> aws.S3()</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    Bucket: S3_BUCKET,</span><br><span class="line">    Key: req.query.file_name,</span><br><span class="line">    Expires: <span class="number">60</span>,</span><br><span class="line">    ContentType: req.query.file_type,</span><br><span class="line">    ACL: <span class="string">'public-read'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  s3.getSignedUrl(<span class="string">'putObject'</span>, options, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> res.send(<span class="string">'Error with S3'</span>)</span><br><span class="line"></span><br><span class="line">    res.json(&#123;</span><br><span class="line">      signed_request: data,</span><br><span class="line">      url: <span class="string">'https://s3.amazonaws.com/'</span> + S3_BUCKET + <span class="string">'/'</span> + req.query.file_name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p>上面代码中，用户访问<code>/sign</code>路径，正确登录后，会收到一个JSON对象，里面是S3返回的数据和一个暂时用来接收上传文件的URL，有效期只有60秒。</p>
<p>浏览器代码如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTML代码为</span></span><br><span class="line"><span class="comment">// &lt;br&gt;Please select an image</span></span><br><span class="line"><span class="comment">// &lt;input type="file" id="image"&gt;</span></span><br><span class="line"><span class="comment">// &lt;br&gt;</span></span><br><span class="line"><span class="comment">// &lt;img id="preview"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"image"</span>).onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">"image"</span>).files[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">if</span> (!file) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  sign_request(file, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    upload(file, response.signed_request, response.url, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"preview"</span>).src = response.url</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sign_request</span>(<span class="params">file, done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  xhr.open(<span class="string">"GET"</span>, <span class="string">"/sign?file_name="</span> + file.name + <span class="string">"&amp;file_type="</span> + file.type)</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> response = <span class="built_in">JSON</span>.parse(xhr.responseText)</span><br><span class="line">      done(response)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.send()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">file, signed_request, url, done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  xhr.open(<span class="string">"PUT"</span>, signed_request)</span><br><span class="line">  xhr.setRequestHeader(<span class="string">'x-amz-acl'</span>, <span class="string">'public-read'</span>)</span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">      done()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  xhr.send(file)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码首先监听file控件的change事件，一旦有变化，就先向服务器要求一个临时的上传URL，然后向该URL上传文件。</p>
<h2 id="参考链接">参考链接</h2><ul>
<li>Raymond Camden, <a href="http://net.tutsplus.com/tutorials/javascript-ajax/introduction-to-express/" target="_blank" rel="external">Introduction to Express</a></li>
<li>Christopher Buecheler, <a href="http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/" target="_blank" rel="external">Getting Started With Node.js, Express, MongoDB</a></li>
<li>Stephen Sugden, <a href="http://stephensugden.com/middleware_guide/" target="_blank" rel="external">A short guide to Connect Middleware</a></li>
<li>Evan Hahn, <a href="http://evanhahn.com/understanding-express/" target="_blank" rel="external">Understanding Express.js</a></li>
<li>Chris Sevilleja, <a href="http://scotch.io/tutorials/javascript/learn-to-use-the-new-router-in-expressjs-4" target="_blank" rel="external">Learn to Use the New Router in ExpressJS 4.0</a></li>
<li>Stefan Fidanov, <a href="http://www.terlici.com/2015/05/23/uploading-files-S3.html" target="_blank" rel="external">Limitless file uploading to Amazon S3 with Node &amp; Express</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Express是目前最流行的基于Node.js的Web开发框架，提供各种模块，可以快速地搭建一个具有完整功能的网站]]>
    
    </summary>
    
      <category term="express" scheme="http://miclee.cn/tags/express/"/>
    
      <category term="nodejs" scheme="http://miclee.cn/tags/nodejs/"/>
    
      <category term="nodejs" scheme="http://miclee.cn/categories/nodejs/"/>
    
  </entry>
  
</feed>
